   Link: canonical
   Link: index: Index
   Link: search: Search
   Link: next: Contributing documentation
   Link: prev: How to contribute
   Skip to main content [ ] [ ]
   _____________________ Ctrl+K
   [IMG] nix.dev
   IFrame

   Official documentation for getting things done with Nix.

   _____________________ Ctrl+K
     * Install Nix
     * Tutorials [ ]
          * First steps [ ]
               * Ad hoc shell environments
               * Reproducible interpreted scripts
               * Declarative shell environments
               * Towards reproducibility: pinning Nixpkgs
          * Nix language basics
          * Packaging existing software
          * Package parameters and overrides with callPackage
          * Working with local files
          * Cross compilation
          * Module system [ ]
               * 1. A basic module
               * 2. Module system deep dive
          * NixOS [ ]
               * NixOS virtual machines
               * Building a bootable ISO image
               * Building and running Docker images
               * Integration testing with NixOS virtual machines
               * Provisioning remote machines via SSH
               * Installing NixOS on a Raspberry Pi
               * Deploying NixOS using Terraform
               * Setting up an HTTP binary cache
               * Setting up distributed builds
     * Guides [ ]
          * Recipes [ ]
               * Configure Nix to use a custom binary cache
               * Automatic environments
               * Dependencies in the development shell
               * Managing remote sources
               * Python development environment
               * Setting up post-build hooks
               * Continuous integration with GitHub Actions
          * Best practices
          * Troubleshooting
          * Frequently Asked Questions
     * Reference [ ]
          * Glossary
          * Nix reference manual [ ]
               * Nix pre-release (development)
               * Nix 2.24 (latest)
               * Nix 2.18 (in Nixpkgs rolling)
               * Nix 2.18 (in Nixpkgs 24.05)
               * Nix 2.18 (in Nixpkgs 23.11)
          * Nixpkgs manual
          * NixOS manual
          * Community projects
          * Support tools
          * Further reading
          * Pinning Nixpkgs
     * Concepts [ ]
          * Flakes
          * Frequently Asked Questions
     * Contributing [ ]
          * How to contribute
          * How to get help
          * Contributing documentation [ ]
               * Documentation resources
               * Documentation framework
               * Style guide
               * How to write a tutorial
     * Acknowledgements [ ]
          * Sponsors
     * Repository
     * Suggest edit
     * Open issue
     * .md
     * .pdf
   [ Submit ]

                                How to get help

Contents

     * How to find maintainers
     * Which communication channels to use
     * Other venues

                                How to get help#

   If you need assistance with one of your contributions, there are a few
   places you can go for help.

How to find maintainers#

   For better efficiency and higher chance of success, you should try
   contacting individuals or groups with more specific knowledge first:

     * If your contribution is for a package in Nixpkgs, look for its
       maintainers in the maintainers attribute.

     * Check if any teams are responsible for the relevant subsystem:

          * On the NixOS website.

          * In the list of Nixpkgs maintainer teams.

          * In the CODEOWNERS files for Nixpkgs or Nix.

     * Check the output of git blame or git log for the files you need help
       with. Take note of the email addresses of people who committed
       relevant code.

Which communication channels to use#

   Once you’ve found the people you’re looking for, you can contact them on
   one of the following platforms:

     * GitHub

       All the source code is maintained on GitHub. This is the right place
       to discuss implementation details.

       In issue comments or pull request descriptions, mention the GitHub
       username found in the maintainers-list.nix file.

     * Discourse

       Discourse is used for announcements, coordination, and open-ended
       questions.

       Try the GitHub username found in the maintainers-list.nix file to
       mention or directly contact a specific user. Note that some people use
       a different username on Discourse.

     * Matrix

       Matrix is used for short-lived, timely exchanges, and direct messages.

       To contact a maintainer, use their Matrix handle found in the
       maintainers-list.nix file. If no Matrix handle is present for a
       specific maintainer, try searching for their GitHub username, as most
       people tend to use the same one across channels.

       Maintainer teams sometimes have their own public Matrix room.

     * Email

       Use email addresses found with git log.

     * Meetings and events

       Check the Discourse community calendar for real-time or in-person
       events. Some community teams hold regular meetings and publish their
       meeting notes.

Other venues#

   If you haven’t found any specific users or groups that could help you with
   your contribution, you can resort to asking the community at large, using
   one of the following official communication channels:

     * A room related to your question in the NixOS Matrix space.

     * The Help category on Discourse.

     * The general #nix room on Matrix.

   previous

   How to contribute

   next

   Contributing documentation

   Contents
     * How to find maintainers
     * Which communication channels to use
     * Other venues

   By the Nix documentation team and contributors.

   © Copyright 2016-2024, NixOS Foundation.
