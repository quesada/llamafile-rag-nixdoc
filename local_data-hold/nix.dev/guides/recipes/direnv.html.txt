   Link: canonical
   Link: index: Index
   Link: search: Search
   Link: next: Dependencies in the development shell
   Link: prev: Configure Nix to use a custom binary cache
   Skip to main content [ ] [ ]
   _____________________ Ctrl+K
   [IMG] nix.dev
   IFrame

   Official documentation for getting things done with Nix.

   _____________________ Ctrl+K
     * Install Nix
     * Tutorials [ ]
          * First steps [ ]
               * Ad hoc shell environments
               * Reproducible interpreted scripts
               * Declarative shell environments
               * Towards reproducibility: pinning Nixpkgs
          * Nix language basics
          * Packaging existing software
          * Package parameters and overrides with callPackage
          * Working with local files
          * Cross compilation
          * Module system [ ]
               * 1. A basic module
               * 2. Module system deep dive
          * NixOS [ ]
               * NixOS virtual machines
               * Building a bootable ISO image
               * Building and running Docker images
               * Integration testing with NixOS virtual machines
               * Provisioning remote machines via SSH
               * Installing NixOS on a Raspberry Pi
               * Deploying NixOS using Terraform
               * Setting up an HTTP binary cache
               * Setting up distributed builds
     * Guides [ ]
          * Recipes [ ]
               * Configure Nix to use a custom binary cache
               * Automatic environments
               * Dependencies in the development shell
               * Managing remote sources
               * Python development environment
               * Setting up post-build hooks
               * Continuous integration with GitHub Actions
          * Best practices
          * Troubleshooting
          * Frequently Asked Questions
     * Reference [ ]
          * Glossary
          * Nix reference manual [ ]
               * Nix pre-release (development)
               * Nix 2.24 (latest)
               * Nix 2.18 (in Nixpkgs rolling)
               * Nix 2.18 (in Nixpkgs 24.05)
               * Nix 2.18 (in Nixpkgs 23.11)
          * Nixpkgs manual
          * NixOS manual
          * Community projects
          * Support tools
          * Further reading
          * Pinning Nixpkgs
     * Concepts [ ]
          * Flakes
          * Frequently Asked Questions
     * Contributing [ ]
          * How to contribute
          * How to get help
          * Contributing documentation [ ]
               * Documentation resources
               * Documentation framework
               * Style guide
               * How to write a tutorial
     * Acknowledgements [ ]
          * Sponsors
     * Repository
     * Suggest edit
     * Open issue
     * .md
     * .pdf
   [ Submit ]

                  Automatic environment activation with direnv

                 Automatic environment activation with direnv#

   Instead of manually activating the environment for each project, you can
   reload a declarative shell every time you enter the project’s directory or
   change the shell.nix inside it.

    1. Make nix-direnv available

    2. Hook it into your shell

   For example, write a shell.nix with the following contents:

  1let
  2  nixpkgs = fetchTarball "https://github.com/NixOS/nixpkgs/tarball/nixos-23.11";
  3  pkgs = import nixpkgs { config = {}; overlays = []; };
  4in
  5
  6pkgs.mkShellNoCC {
  7  packages = with pkgs; [
  8    hello
  9  ];
 10}

   From the top-level directory of your project run:

 $ echo "use nix" > .envrc && direnv allow

   The next time you launch your terminal and enter the top-level directory
   of your project, direnv will automatically launch the shell defined in
   shell.nix

 $ cd myproject
 $ which hello
 /nix/store/1gxz5nfzfnhyxjdyzi04r86sh61y4i00-hello-2.12.1/bin/hello

   direnv will also check for changes to the shell.nix file.

   Make the following addition:

  let
    nixpkgs = fetchTarball "https://github.com/NixOS/nixpkgs/tarball/nixos-23.11";
    pkgs = import nixpkgs { config = {}; overlays = []; };
  in

  pkgs.mkShellNoCC {
    packages = with pkgs; [
      hello
    ];
 +
 +  shellHook = ''
 +    hello
 +  '';
  }

   The running environment should reload itself after the first interaction
   (run any command or press Enter).

 Hello, world!

   previous

   Configure Nix to use a custom binary cache

   next

   Dependencies in the development shell

   By the Nix documentation team and contributors.

   © Copyright 2016-2024, NixOS Foundation.
