    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Package Management
    6.   1. 4.1. Basic Package Management
         2. 4.2. Profiles
         3. 4.3. Garbage Collection
         4.   1. 4.3.1. Garbage Collector Roots
         5. 4.4. Sharing Packages Between Machines
         6.   1. 4.4.1. Serving a Nix store via HTTP
              2. 4.4.2. Copying Closures via SSH
              3. 4.4.3. Serving a Nix store via SSH
              4. 4.4.4. Serving a Nix store via S3
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Advanced Topics
   10.   1. 6.1. Remote Builds
         2. 6.2. Tuning Cores and Jobs
         3. 6.3. Verifying Build Reproducibility
         4. 6.4. Using the post-build-hook
   11. 7. Command Reference
   12.   1. 7.1. Common Options
         2. 7.2. Common Environment Variables
         3. 7.3. Main Commands
         4.   1. 7.3.1. nix-build
              2. 7.3.2. nix-shell
              3. 7.3.3. nix-store
              4.   1. 7.3.3.1. nix-store --add-fixed
                   2. 7.3.3.2. nix-store --add
                   3. 7.3.3.3. nix-store --delete
                   4. 7.3.3.4. nix-store --dump-db
                   5. 7.3.3.5. nix-store --dump
                   6. 7.3.3.6. nix-store --export
                   7. 7.3.3.7. nix-store --gc
                   8. 7.3.3.8. nix-store --generate-binary-cache-key
                   9. 7.3.3.9. nix-store --import
                  10. 7.3.3.10. nix-store --load-db
                  11. 7.3.3.11. nix-store --optimise
                  12. 7.3.3.12. nix-store --print-env
                  13. 7.3.3.13. nix-store --query
                  14. 7.3.3.14. nix-store --read-log
                  15. 7.3.3.15. nix-store --realise
                  16. 7.3.3.16. nix-store --repair-path
                  17. 7.3.3.17. nix-store --restore
                  18. 7.3.3.18. nix-store --serve
                  19. 7.3.3.19. nix-store --verify-path
                  20. 7.3.3.20. nix-store --verify
              5. 7.3.4. nix-env
              6.   1. 7.3.4.1. nix-env --delete-generations
                   2. 7.3.4.2. nix-env --install
                   3. 7.3.4.3. nix-env --list-generations
                   4. 7.3.4.4. nix-env --query
                   5. 7.3.4.5. nix-env --rollback
                   6. 7.3.4.6. nix-env --set-flag
                   7. 7.3.4.7. nix-env --set
                   8. 7.3.4.8. nix-env --switch-generation
                   9. 7.3.4.9. nix-env --switch-profile
                  10. 7.3.4.10. nix-env --uninstall
                  11. 7.3.4.11. nix-env --upgrade
         5. 7.4. Utilities
         6.   1. 7.4.1. nix-channel
              2. 7.4.2. nix-collect-garbage
              3. 7.4.3. nix-copy-closure
              4. 7.4.4. nix-daemon
              5. 7.4.5. nix-hash
              6. 7.4.6. nix-instantiate
              7. 7.4.7. nix-prefetch-url
         7. 7.5. Experimental Commands
         8.   1. 7.5.1. nix
              2. 7.5.2. nix build
              3. 7.5.3. nix bundle
              4. 7.5.4. nix copy
              5. 7.5.5. nix daemon
              6. 7.5.6. nix derivation
              7. 7.5.7. nix derivation add
              8. 7.5.8. nix derivation show
              9. 7.5.9. nix develop
             10. 7.5.10. nix doctor
             11. 7.5.11. nix edit
             12. 7.5.12. nix eval
             13. 7.5.13. nix flake
             14. 7.5.14. nix flake archive
             15. 7.5.15. nix flake check
             16. 7.5.16. nix flake clone
             17. 7.5.17. nix flake info
             18. 7.5.18. nix flake init
             19. 7.5.19. nix flake lock
             20. 7.5.20. nix flake metadata
             21. 7.5.21. nix flake new
             22. 7.5.22. nix flake prefetch
             23. 7.5.23. nix flake show
             24. 7.5.24. nix flake update
             25. 7.5.25. nix fmt
             26. 7.5.26. nix hash
             27. 7.5.27. nix hash file
             28. 7.5.28. nix hash path
             29. 7.5.29. nix hash to-base16
             30. 7.5.30. nix hash to-base32
             31. 7.5.31. nix hash to-base64
             32. 7.5.32. nix hash to-sri
             33. 7.5.33. nix help
             34. 7.5.34. nix help-stores
             35. 7.5.35. nix key
             36. 7.5.36. nix key convert-secret-to-public
             37. 7.5.37. nix key generate-secret
             38. 7.5.38. nix log
             39. 7.5.39. nix nar
             40. 7.5.40. nix nar cat
             41. 7.5.41. nix nar dump-path
             42. 7.5.42. nix nar ls
             43. 7.5.43. nix path-info
             44. 7.5.44. nix print-dev-env
             45. 7.5.45. nix profile
             46. 7.5.46. nix profile diff-closures
             47. 7.5.47. nix profile history
             48. 7.5.48. nix profile install
             49. 7.5.49. nix profile list
             50. 7.5.50. nix profile remove
             51. 7.5.51. nix profile rollback
             52. 7.5.52. nix profile upgrade
             53. 7.5.53. nix profile wipe-history
             54. 7.5.54. nix realisation
             55. 7.5.55. nix realisation info
             56. 7.5.56. nix registry
             57. 7.5.57. nix registry add
             58. 7.5.58. nix registry list
             59. 7.5.59. nix registry pin
             60. 7.5.60. nix registry remove
             61. 7.5.61. nix repl
             62. 7.5.62. nix run
             63. 7.5.63. nix search
             64. 7.5.64. nix shell
             65. 7.5.65. nix show-config
             66. 7.5.66. nix store
             67. 7.5.67. nix store add-file
             68. 7.5.68. nix store add-path
             69. 7.5.69. nix store cat
             70. 7.5.70. nix store copy-log
             71. 7.5.71. nix store copy-sigs
             72. 7.5.72. nix store delete
             73. 7.5.73. nix store diff-closures
             74. 7.5.74. nix store dump-path
             75. 7.5.75. nix store gc
             76. 7.5.76. nix store ls
             77. 7.5.77. nix store make-content-addressed
             78. 7.5.78. nix store optimise
             79. 7.5.79. nix store path-from-hash-part
             80. 7.5.80. nix store ping
             81. 7.5.81. nix store prefetch-file
             82. 7.5.82. nix store repair
             83. 7.5.83. nix store sign
             84. 7.5.84. nix store verify
             85. 7.5.85. nix upgrade-nix
             86. 7.5.86. nix why-depends
         9. 7.6. Files
        10.   1. 7.6.1. nix.conf
              2. 7.6.2. Profiles
              3.   1. 7.6.2.1. manifest.nix
                   2. 7.6.2.2. manifest.json
              4. 7.6.3. Channels
              5. 7.6.4. Default Nix expression
   13. 8. Architecture and Design
   14.   1. 8.1. File System Object
   15. 9. Protocols
   16.   1. 9.1. Serving Tarball Flakes
         2. 9.2. Derivation "ATerm" file format
   17. 10. Glossary
   18. 11. Contributing
   19.   1. 11.1. Hacking
         2. 11.2. Testing
         3. 11.3. Experimental Features
         4. 11.4. CLI guideline
         5. 11.5. C++ style guide
   20. 12. Release Notes
   21.   1. 12.1. Release 2.18 (2023-09-20)
         2. 12.2. Release 2.17 (2023-07-24)
         3. 12.3. Release 2.16 (2023-05-31)
         4. 12.4. Release 2.15 (2023-04-11)
         5. 12.5. Release 2.14 (2023-02-28)
         6. 12.6. Release 2.13 (2023-01-17)
         7. 12.7. Release 2.12 (2022-12-06)
         8. 12.8. Release 2.11 (2022-08-25)
         9. 12.9. Release 2.10 (2022-07-11)
        10. 12.10. Release 2.9 (2022-05-30)
        11. 12.11. Release 2.8 (2022-04-19)
        12. 12.12. Release 2.7 (2022-03-07)
        13. 12.13. Release 2.6 (2022-01-24)
        14. 12.14. Release 2.5 (2021-12-13)
        15. 12.15. Release 2.4 (2021-11-01)
        16. 12.16. Release 2.3 (2019-09-04)
        17. 12.17. Release 2.2 (2019-01-11)
        18. 12.18. Release 2.1 (2018-09-02)
        19. 12.19. Release 2.0 (2018-02-22)
        20. 12.20. Release 1.11.10 (2017-06-12)
        21. 12.21. Release 1.11 (2016-01-19)
        22. 12.22. Release 1.10 (2015-09-03)
        23. 12.23. Release 1.9 (2015-06-12)
        24. 12.24. Release 1.8 (2014-12-14)
        25. 12.25. Release 1.7 (2014-04-11)
        26. 12.26. Release 1.6.1 (2013-10-28)
        27. 12.27. Release 1.6 (2013-09-10)
        28. 12.28. Release 1.5.2 (2013-05-13)
        29. 12.29. Release 1.5 (2013-02-27)
        30. 12.30. Release 1.4 (2013-02-26)
        31. 12.31. Release 1.3 (2013-01-04)
        32. 12.32. Release 1.2 (2012-12-06)
        33. 12.33. Release 1.1 (2012-07-18)
        34. 12.34. Release 1.0 (2012-05-11)
        35. 12.35. Release 0.16 (2010-08-17)
        36. 12.36. Release 0.15 (2010-03-17)
        37. 12.37. Release 0.14 (2010-02-04)
        38. 12.38. Release 0.13 (2009-11-05)
        39. 12.39. Release 0.12 (2008-11-20)
        40. 12.40. Release 0.11 (2007-12-31)
        41. 12.41. Release 0.10.1 (2006-10-11)
        42. 12.42. Release 0.10 (2006-10-06)
        43. 12.43. Release 0.9.2 (2005-09-21)
        44. 12.44. Release 0.9.1 (2005-09-20)
        45. 12.45. Release 0.9 (2005-09-16)
        46. 12.46. Release 0.8.1 (2005-04-13)
        47. 12.47. Release 0.8 (2005-04-11)
        48. 12.48. Release 0.7 (2005-01-12)
        49. 12.49. Release 0.6 (2004-11-14)
        50. 12.50. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                      Name

   nix-store --add - add paths to Nix store

                                    Synopsis

   nix-store --add paths…

                                  Description

   The operation --add adds the specified paths to the Nix store. It prints
   the resulting paths in the Nix store on standard output.

                                    Options

   The following options are allowed for all nix-store operations, but may
   not always have an effect.

     * --add-root path

       Causes the result of a realisation (--realise and --force-realise) to
       be registered as a root of the garbage collector. path will be created
       as a symlink to the resulting store path. In addition, a uniquely
       named symlink to path will be created in /nix/var/nix/gcroots/auto/.
       For instance,

 $ nix-store --add-root /home/eelco/bla/result --realise ...

 $ ls -l /nix/var/nix/gcroots/auto
 lrwxrwxrwx    1 ... 2005-03-13 21:10 dn54lcypm8f8... -> /home/eelco/bla/result

 $ ls -l /home/eelco/bla/result
 lrwxrwxrwx    1 ... 2005-03-13 21:10 /home/eelco/bla/result -> /nix/store/1r11343n6qd4...-f-spot-0.0.10

       Thus, when /home/eelco/bla/result is removed, the GC root in the auto
       directory becomes a dangling symlink and will be ignored by the
       collector.

         Warning

         Note that it is not possible to move or rename GC roots, since the
         symlink in the auto directory will still point to the old location.

       If there are multiple results, then multiple symlinks will be created
       by sequentially numbering symlinks beyond the first one (e.g., foo,
       foo-2, foo-3, and so on).

                                 Common Options

   Most Nix commands accept the following command-line options:

     * --help

       Prints out a summary of the command syntax and exits.

     * --version

       Prints out the Nix version number on standard output and exits.

     * --verbose / -v

       Increases the level of verbosity of diagnostic messages printed on
       standard error. For each Nix operation, the information printed on
       standard output is well-defined; any diagnostic information is printed
       on standard error, never on standard output.

       This option may be specified repeatedly. Currently, the following
       verbosity levels exist:

          * 0 “Errors only”

            Only print messages explaining why the Nix invocation failed.

          * 1 “Informational”

            Print useful messages about what Nix is doing. This is the
            default.

          * 2 “Talkative”

            Print more informational messages.

          * 3 “Chatty”

            Print even more informational messages.

          * 4 “Debug”

            Print debug information.

          * 5 “Vomit”

            Print vast amounts of debug information.

     * --quiet

       Decreases the level of verbosity of diagnostic messages printed on
       standard error. This is the inverse option to -v / --verbose.

       This option may be specified repeatedly. See the previous verbosity
       levels list.

     * --log-format format

       This option can be used to change the output of the log format, with
       format being one of:

          * raw

            This is the raw format, as outputted by nix-build.

          * internal-json

            Outputs the logs in a structured manner.

              Warning

              While the schema itself is relatively stable, the format of the
              error-messages (namely of the msg-field) can change between
              releases.

          * bar

            Only display a progress bar during the builds.

          * bar-with-logs

            Display the raw logs, with the progress bar at the bottom.

     * --no-build-output / -Q

       By default, output written by builders to standard output and standard
       error is echoed to the Nix command's standard error. This option
       suppresses this behaviour. Note that the builder's standard output and
       error are always written to a log file in prefix/nix/var/log/nix.

     * --max-jobs / -j number

       Sets the maximum number of build jobs that Nix will perform in
       parallel to the specified number. Specify auto to use the number of
       CPUs in the system. The default is specified by the max-jobs
       configuration setting, which itself defaults to 1. A higher value is
       useful on SMP systems or to exploit I/O latency.

       Setting it to 0 disallows building on the local machine, which is
       useful when you want builds to happen only on remote builders.

     * --cores

       Sets the value of the NIX_BUILD_CORES environment variable in the
       invocation of builders. Builders can use this variable at their
       discretion to control the maximum amount of parallelism. For instance,
       in Nixpkgs, if the derivation attribute enableParallelBuilding is set
       to true, the builder passes the -jN flag to GNU Make. It defaults to
       the value of the cores configuration setting, if set, or 1 otherwise.
       The value 0 means that the builder should use all available CPU cores
       in the system.

     * --max-silent-time

       Sets the maximum number of seconds that a builder can go without
       producing any data on standard output or standard error. The default
       is specified by the max-silent-time configuration setting. 0 means no
       time-out.

     * --timeout

       Sets the maximum number of seconds that a builder can run. The default
       is specified by the timeout configuration setting. 0 means no timeout.

     * --keep-going / -k

       Keep going in case of failed builds, to the greatest extent possible.
       That is, if building an input of some derivation fails, Nix will still
       build the other inputs, but not the derivation itself. Without this
       option, Nix stops if any build fails (except for builds of
       substitutes), possibly killing builds in progress (in case of parallel
       or distributed builds).

     * --keep-failed / -K

       Specifies that in case of a build failure, the temporary directory
       (usually in /tmp) in which the build takes place should not be
       deleted. The path of the build directory is printed as an
       informational message.

     * --fallback

       Whenever Nix attempts to build a derivation for which substitutes are
       known for each output path, but realising the output paths through the
       substitutes fails, fall back on building the derivation.

       The most common scenario in which this is useful is when we have
       registered substitutes in order to perform binary distribution from,
       say, a network repository. If the repository is down, the realisation
       of the derivation will fail. When this option is specified, Nix will
       build the derivation instead. Thus, installation from binaries falls
       back on installation from source. This option is not the default since
       it is generally not desirable for a transient failure in obtaining the
       substitutes to lead to a full build from source (with the related
       consumption of resources).

     * --readonly-mode

       When this option is used, no attempt is made to open the Nix database.
       Most Nix operations do need database access, so those operations will
       fail.

     * --arg name value

       This option is accepted by nix-env, nix-instantiate, nix-shell and
       nix-build. When evaluating Nix expressions, the expression evaluator
       will automatically try to call functions that it encounters. It can
       automatically call functions for which every argument has a default
       value (e.g., { argName ? defaultValue }: ...).

       With --arg, you can also call functions that have arguments without a
       default value (or override a default value). That is, if the evaluator
       encounters a function with an argument named name, it will call it
       with value value.

       For instance, the top-level default.nix in Nixpkgs is actually a
       function:

 { # The system (e.g., `i686-linux') for which to build the packages.
   system ? builtins.currentSystem
   ...
 }: ...

       So if you call this Nix expression (e.g., when you do nix-env
       --install --attr pkgname), the function will be called automatically
       using the value builtins.currentSystem for the system argument. You
       can override this using --arg, e.g., nix-env --install --attr pkgname
       --arg system \"i686-freebsd\". (Note that since the argument is a Nix
       string literal, you have to escape the quotes.)

     * --argstr name value

       This option is like --arg, only the value is not a Nix expression but
       a string. So instead of --arg system \"i686-linux\" (the outer quotes
       are to keep the shell happy) you can say --argstr system i686-linux.

     * --attr / -A attrPath

       Select an attribute from the top-level Nix expression being evaluated.
       (nix-env, nix-instantiate, nix-build and nix-shell only.) The
       attribute path attrPath is a sequence of attribute names separated by
       dots. For instance, given a top-level Nix expression e, the attribute
       path xorg.xorgserver would cause the expression e.xorg.xorgserver to
       be used. See nix-env --install for some concrete examples.

       In addition to attribute names, you can also specify array indices.
       For instance, the attribute path foo.3.bar selects the bar attribute
       of the fourth element of the array in the foo attribute of the
       top-level expression.

     * --expr / -E

       Interpret the command line arguments as a list of Nix expressions to
       be parsed and evaluated, rather than as a list of file names of Nix
       expressions. (nix-instantiate, nix-build and nix-shell only.)

       For nix-shell, this option is commonly used to give you a shell in
       which you can build the packages returned by the expression. If you
       want to get a shell which contain the built packages ready for use,
       give your expression to the nix-shell --packages convenience flag
       instead.

     * -I path

       Add an entry to the Nix expression search path. This option may be
       given multiple times. Paths added through -I take precedence over
       NIX_PATH.

     * --option name value

       Set the Nix configuration option name to value. This overrides
       settings in the Nix configuration file (see nix.conf5).

     * --repair

       Fix corrupted or missing store paths by redownloading or rebuilding
       them. Note that this is slow because it requires computing a
       cryptographic hash of the contents of every path in the closure of the
       build. Also note the warning under nix-store --repair-path.

                          Common Environment Variables

   Most Nix commands interpret the following environment variables:

     * IN_NIX_SHELL
       Indicator that tells if the current environment was set up by
       nix-shell. It can have the values pure or impure.

     * NIX_PATH
       A colon-separated list of directories used to look up the location of
       Nix expressions using paths enclosed in angle brackets (i.e., <path>),
       e.g. /home/eelco/Dev:/etc/nixos. It can be extended using the -I
       option.

       If NIX_PATH is not set at all, Nix will fall back to the following
       list in impure and unrestricted evaluation mode:

         1. $HOME/.nix-defexpr/channels
         2. nixpkgs=/nix/var/nix/profiles/per-user/root/channels/nixpkgs
         3. /nix/var/nix/profiles/per-user/root/channels

       If NIX_PATH is set to an empty string, resolving search paths will
       always fail. For example, attempting to use <nixpkgs> will produce:

 error: file 'nixpkgs' was not found in the Nix search path

     * NIX_IGNORE_SYMLINK_STORE
       Normally, the Nix store directory (typically /nix/store) is not
       allowed to contain any symlink components. This is to prevent “impure”
       builds. Builders sometimes “canonicalise” paths by resolving all
       symlink components. Thus, builds on different machines (with
       /nix/store resolving to different locations) could yield different
       results. This is generally not a problem, except when builds are
       deployed to machines where /nix/store resolves differently. If you are
       sure that you’re not going to do that, you can set
       NIX_IGNORE_SYMLINK_STORE to 1.

       Note that if you’re symlinking the Nix store so that you can put it on
       another file system than the root file system, on Linux you’re better
       off using bind mount points, e.g.,

 $ mkdir /nix
 $ mount -o bind /mnt/otherdisk/nix /nix

       Consult the mount 8 manual page for details.

     * NIX_STORE_DIR
       Overrides the location of the Nix store (default prefix/store).

     * NIX_DATA_DIR
       Overrides the location of the Nix static data directory (default
       prefix/share).

     * NIX_LOG_DIR
       Overrides the location of the Nix log directory (default
       prefix/var/log/nix).

     * NIX_STATE_DIR
       Overrides the location of the Nix state directory (default
       prefix/var/nix).

     * NIX_CONF_DIR
       Overrides the location of the system Nix configuration directory
       (default prefix/etc/nix).

     * NIX_CONFIG
       Applies settings from Nix configuration from the environment. The
       content is treated as if it was read from a Nix configuration file.
       Settings are separated by the newline character.

     * NIX_USER_CONF_FILES
       Overrides the location of the Nix user configuration files to load
       from.

       The default are the locations according to the XDG Base Directory
       Specification. See the XDG Base Directories sub-section for details.

       The variable is treated as a list separated by the : token.

     * TMPDIR
       Use the specified directory to store temporary files. In particular,
       this includes temporary build directories; these can take up
       substantial amounts of disk space. The default is /tmp.

     * NIX_REMOTE
       This variable should be set to daemon if you want to use the Nix
       daemon to execute Nix operations. This is necessary in multi-user Nix
       installations. If the Nix daemon's Unix socket is at some non-standard
       path, this variable should be set to unix://path/to/socket. Otherwise,
       it should be left unset.

     * NIX_SHOW_STATS
       If set to 1, Nix will print some evaluation statistics, such as the
       number of values allocated.

     * NIX_COUNT_CALLS
       If set to 1, Nix will print how often functions were called during Nix
       expression evaluation. This is useful for profiling your Nix
       expressions.

     * GC_INITIAL_HEAP_SIZE
       If Nix has been configured to use the Boehm garbage collector, this
       variable sets the initial size of the heap in bytes. It defaults to
       384 MiB. Setting it to a low value reduces memory consumption, but
       will increase runtime due to the overhead of garbage collection.

XDG Base Directories

   Nix follows the XDG Base Directory Specification.

   For backwards compatibility, Nix commands will follow the standard only
   when use-xdg-base-directories is enabled. New Nix commands (experimental)
   conform to the standard by default.

   The following environment variables are used to determine locations of
   various state and configuration files:

     * XDG_CONFIG_HOME (default ~/.config)
     * XDG_STATE_HOME (default ~/.local/state)
     * XDG_CACHE_HOME (default ~/.cache)

                                    Example

 $ nix-store --add ./foo.c
 /nix/store/m7lrha58ph6rcnv109yzx1nk1cj7k7zf-foo.c
