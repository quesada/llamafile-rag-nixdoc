    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix copy
              5. 8.5.5. nix daemon
              6. 8.5.6. nix derivation
              7. 8.5.7. nix derivation add
              8. 8.5.8. nix derivation show
              9. 8.5.9. nix develop
             10. 8.5.10. nix doctor
             11. 8.5.11. nix edit
             12. 8.5.12. nix eval
             13. 8.5.13. nix flake
             14. 8.5.14. nix flake archive
             15. 8.5.15. nix flake check
             16. 8.5.16. nix flake clone
             17. 8.5.17. nix flake info
             18. 8.5.18. nix flake init
             19. 8.5.19. nix flake lock
             20. 8.5.20. nix flake metadata
             21. 8.5.21. nix flake new
             22. 8.5.22. nix flake prefetch
             23. 8.5.23. nix flake show
             24. 8.5.24. nix flake update
             25. 8.5.25. nix fmt
             26. 8.5.26. nix hash
             27. 8.5.27. nix hash file
             28. 8.5.28. nix hash path
             29. 8.5.29. nix hash to-base16
             30. 8.5.30. nix hash to-base32
             31. 8.5.31. nix hash to-base64
             32. 8.5.32. nix hash to-sri
             33. 8.5.33. nix help
             34. 8.5.34. nix help-stores
             35. 8.5.35. nix key
             36. 8.5.36. nix key convert-secret-to-public
             37. 8.5.37. nix key generate-secret
             38. 8.5.38. nix log
             39. 8.5.39. nix nar
             40. 8.5.40. nix nar cat
             41. 8.5.41. nix nar dump-path
             42. 8.5.42. nix nar ls
             43. 8.5.43. nix nar pack
             44. 8.5.44. nix path-info
             45. 8.5.45. nix print-dev-env
             46. 8.5.46. nix profile
             47. 8.5.47. nix profile diff-closures
             48. 8.5.48. nix profile history
             49. 8.5.49. nix profile install
             50. 8.5.50. nix profile list
             51. 8.5.51. nix profile remove
             52. 8.5.52. nix profile rollback
             53. 8.5.53. nix profile upgrade
             54. 8.5.54. nix profile wipe-history
             55. 8.5.55. nix realisation
             56. 8.5.56. nix realisation info
             57. 8.5.57. nix registry
             58. 8.5.58. nix registry add
             59. 8.5.59. nix registry list
             60. 8.5.60. nix registry pin
             61. 8.5.61. nix registry remove
             62. 8.5.62. nix repl
             63. 8.5.63. nix run
             64. 8.5.64. nix search
             65. 8.5.65. nix shell
             66. 8.5.66. nix show-config
             67. 8.5.67. nix store
             68. 8.5.68. nix store add
             69. 8.5.69. nix store add-file
             70. 8.5.70. nix store add-path
             71. 8.5.71. nix store cat
             72. 8.5.72. nix store copy-log
             73. 8.5.73. nix store copy-sigs
             74. 8.5.74. nix store delete
             75. 8.5.75. nix store diff-closures
             76. 8.5.76. nix store dump-path
             77. 8.5.77. nix store gc
             78. 8.5.78. nix store info
             79. 8.5.79. nix store ls
             80. 8.5.80. nix store make-content-addressed
             81. 8.5.81. nix store optimise
             82. 8.5.82. nix store path-from-hash-part
             83. 8.5.83. nix store ping
             84. 8.5.84. nix store prefetch-file
             85. 8.5.85. nix store repair
             86. 8.5.86. nix store sign
             87. 8.5.87. nix store verify
             88. 8.5.88. nix upgrade-nix
             89. 8.5.89. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Protocols
   17.   1. 10.1. Serving Tarball Flakes
         2. 10.2. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.19 (2023-11-17)
         2. 13.2. Release 2.18 (2023-09-20)
         3. 13.3. Release 2.17 (2023-07-24)
         4. 13.4. Release 2.16 (2023-05-31)
         5. 13.5. Release 2.15 (2023-04-11)
         6. 13.6. Release 2.14 (2023-02-28)
         7. 13.7. Release 2.13 (2023-01-17)
         8. 13.8. Release 2.12 (2022-12-06)
         9. 13.9. Release 2.11 (2022-08-25)
        10. 13.10. Release 2.10 (2022-07-11)
        11. 13.11. Release 2.9 (2022-05-30)
        12. 13.12. Release 2.8 (2022-04-19)
        13. 13.13. Release 2.7 (2022-03-07)
        14. 13.14. Release 2.6 (2022-01-24)
        15. 13.15. Release 2.5 (2021-12-13)
        16. 13.16. Release 2.4 (2021-11-01)
        17. 13.17. Release 2.3 (2019-09-04)
        18. 13.18. Release 2.2 (2019-01-11)
        19. 13.19. Release 2.1 (2018-09-02)
        20. 13.20. Release 2.0 (2018-02-22)
        21. 13.21. Release 1.11.10 (2017-06-12)
        22. 13.22. Release 1.11 (2016-01-19)
        23. 13.23. Release 1.10 (2015-09-03)
        24. 13.24. Release 1.9 (2015-06-12)
        25. 13.25. Release 1.8 (2014-12-14)
        26. 13.26. Release 1.7 (2014-04-11)
        27. 13.27. Release 1.6.1 (2013-10-28)
        28. 13.28. Release 1.6 (2013-09-10)
        29. 13.29. Release 1.5.2 (2013-05-13)
        30. 13.30. Release 1.5 (2013-02-27)
        31. 13.31. Release 1.4 (2013-02-26)
        32. 13.32. Release 1.3 (2013-01-04)
        33. 13.33. Release 1.2 (2012-12-06)
        34. 13.34. Release 1.1 (2012-07-18)
        35. 13.35. Release 1.0 (2012-05-11)
        36. 13.36. Release 0.16 (2010-08-17)
        37. 13.37. Release 0.15 (2010-03-17)
        38. 13.38. Release 0.14 (2010-02-04)
        39. 13.39. Release 0.13 (2009-11-05)
        40. 13.40. Release 0.12 (2008-11-20)
        41. 13.41. Release 0.11 (2007-12-31)
        42. 13.42. Release 0.10.1 (2006-10-11)
        43. 13.43. Release 0.10 (2006-10-06)
        44. 13.44. Release 0.9.2 (2005-09-21)
        45. 13.45. Release 0.9.1 (2005-09-20)
        46. 13.46. Release 0.9 (2005-09-16)
        47. 13.47. Release 0.8.1 (2005-04-13)
        48. 13.48. Release 0.8 (2005-04-11)
        49. 13.49. Release 0.7 (2005-01-12)
        50. 13.50. Release 0.6 (2004-11-14)
        51. 13.51. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

     Warning
     This program is experimental and its interface is subject to change.

                                      Name

   nix - a tool for reproducible and declarative configuration management

                                    Synopsis

   nix [option...] subcommand

   where subcommand is one of the following:

   Help commands:

     * nix help - show help about nix or a particular subcommand
     * nix help-stores - show help about store types and their settings

   Main commands:

     * nix build - build a derivation or fetch a store path
     * nix develop - run a bash shell that provides the build environment of
       a derivation
     * nix flake - manage Nix flakes
     * nix profile - manage Nix profiles
     * nix run - run a Nix application
     * nix search - search for packages
     * nix shell - run a shell in which the specified packages are available

   Main commands:

     * nix repl - start an interactive environment for evaluating Nix
       expressions

   Infrequently used commands:

     * nix bundle - bundle an application so that it works outside of the Nix
       store
     * nix copy - copy paths between Nix stores
     * nix edit - open the Nix expression of a Nix package in $EDITOR
     * nix eval - evaluate a Nix expression
     * nix fmt - reformat your code in the standard style
     * nix log - show the build log of the specified packages or paths, if
       available
     * nix path-info - query information about store paths
     * nix registry - manage the flake registry
     * nix why-depends - show why a package has another package in its
       closure

   Utility/scripting commands:

     * nix daemon - daemon to perform store operations on behalf of non-root
       clients
     * nix derivation - Work with derivations, Nix's notion of a build plan.
     * nix hash - compute and convert cryptographic hashes
     * nix key - generate and convert Nix signing keys
     * nix nar - create or inspect NAR files
     * nix print-dev-env - print shell code that can be sourced by bash to
       reproduce the build environment of a derivation
     * nix realisation - manipulate a Nix realisation
     * nix show-config - show the Nix configuration or the value of a
       specific setting
     * nix store - manipulate a Nix store

   Commands for upgrading or troubleshooting your Nix installation:

     * nix doctor - check your system for potential problems and print a PASS
       or FAIL for each check
     * nix upgrade-nix - upgrade Nix to the latest stable version

                                    Examples

     * Create a new flake:

 # nix flake new hello
 # cd hello

     * Build the flake in the current directory:

 # nix build
 # ./result/bin/hello
 Hello, world!

     * Run the flake in the current directory:

 # nix run
 Hello, world!

     * Start a development shell for hacking on this flake:

 # nix develop
 # unpackPhase
 # cd hello-*
 # configurePhase
 # buildPhase
 # ./hello
 Hello, world!
 # installPhase
 # ../outputs/out/bin/hello
 Hello, world!

                                  Description

   Nix is a tool for building software, configurations and other artifacts in
   a reproducible and declarative way. For more information, see the Nix
   homepage or the Nix manual.

                                  Installables

     Warning
     Installables are part of the unstable nix-command experimental feature,
     and subject to change without notice.

   Many nix subcommands operate on one or more installables. These are
   command line arguments that represent something that can be realised in
   the Nix store.

   The following types of installable are supported by most commands:

     * Flake output attribute (experimental)
     * Store path
     * Nix file, optionally qualified by an attribute path
     * Nix expression, optionally qualified by an attribute path

   For most commands, if no installable is specified, . is assumed. That is,
   Nix will operate on the default flake output attribute of the flake in the
   current directory.

  Flake output attribute

     Warning
     Flake output attribute installables depend on both the flakes and
     nix-command experimental features, and subject to change without notice.

   Example: nixpkgs#hello

   These have the form flakeref[#attrpath], where flakeref is a flake
   reference and attrpath is an optional attribute path. For more information
   on flakes, see the nix flake manual page. Flake references are most
   commonly a flake identifier in the flake registry (e.g. nixpkgs), or a raw
   path (e.g. /path/to/my-flake or . or ../foo), or a full URL (e.g.
   github:nixos/nixpkgs or path:.)

   When the flake reference is a raw path (a path without any URL scheme), it
   is interpreted as a path: or git+file: url in the following way:

     * If the path is within a Git repository, then the url will be of the
       form git+file://[GIT_REPO_ROOT]?dir=[RELATIVE_FLAKE_DIR_PATH] where
       GIT_REPO_ROOT is the path to the root of the git repository, and
       RELATIVE_FLAKE_DIR_PATH is the path (relative to the directory root)
       of the closest parent of the given path that contains a flake.nix
       within the git repository. If no such directory exists, then Nix will
       error-out.

       Note that the search will only include files indexed by git. In
       particular, files which are matched by .gitignore or have never been
       git add-ed will not be available in the flake. If this is undesirable,
       specify path:<directory> explicitly;

       For example, if /foo/bar is a git repository with the following
       structure:

 .
 └── baz
     ├── blah
     │   └── file.txt
     └── flake.nix

       Then /foo/bar/baz/blah will resolve to git+file:///foo/bar?dir=baz

     * If the supplied path is not a git repository, then the url will have
       the form path:FLAKE_DIR_PATH where FLAKE_DIR_PATH is the closest
       parent of the supplied path that contains a flake.nix file (within the
       same file-system). If no such directory exists, then Nix will
       error-out.

       For example, if /foo/bar/flake.nix exists, then /foo/bar/baz/ will
       resolve to path:/foo/bar

   If attrpath is omitted, Nix tries some default values; for most
   subcommands, the default is packages.system.default (e.g.
   packages.x86_64-linux.default), but some subcommands have other defaults.
   If attrpath is specified, attrpath is interpreted as relative to one or
   more prefixes; for most subcommands, these are packages.system,
   legacyPackages.*system* and the empty prefix. Thus, on x86_64-linux nix
   build nixpkgs#hello will try to build the attributes
   packages.x86_64-linux.hello, legacyPackages.x86_64-linux.hello and hello.

   If attrpath begins with . then no prefixes or defaults are attempted. This
   allows the form flakeref[#.attrpath], such as
   github:NixOS/nixpkgs#.lib.fakeSha256 to avoid a search of
   packages.*system*.lib.fakeSha256

  Store path

   Example: /nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10

   These are paths inside the Nix store, or symlinks that resolve to a path
   in the Nix store.

   A store derivation is also addressed by store path.

   Example: /nix/store/p7gp6lxdg32h4ka1q398wd9r2zkbbz2v-hello-2.10.drv

   If you want to refer to an output path of that store derivation, add the
   output name preceded by a caret (^).

   Example: /nix/store/p7gp6lxdg32h4ka1q398wd9r2zkbbz2v-hello-2.10.drv^out

   All outputs can be referred to at once with the special syntax ^*.

   Example: /nix/store/p7gp6lxdg32h4ka1q398wd9r2zkbbz2v-hello-2.10.drv^*

  Nix file

   Example: --file /path/to/nixpkgs hello

   When the option -f / --file path [attrpath...] is given, installables are
   interpreted as the value of the expression in the Nix file at path. If
   attribute paths are provided, commands will operate on the corresponding
   values accessible at these paths. The Nix expression in that file, or any
   selected attribute, must evaluate to a derivation.

  Nix expression

   Example: --expr 'import <nixpkgs> {}' hello

   When the option --expr expression [attrpath...] is given, installables are
   interpreted as the value of the of the Nix expression. If attribute paths
   are provided, commands will operate on the corresponding values accessible
   at these paths. The Nix expression, or any selected attribute, must
   evaluate to a derivation.

   You may need to specify --impure if the expression references impure
   inputs (such as <nixpkgs>).

Derivation output selection

   Derivations can have multiple outputs, each corresponding to a different
   store path. For instance, a package can have a bin output that contains
   programs, and a dev output that provides development artifacts like C/C++
   header files. The outputs on which nix commands operate are determined as
   follows:

     * You can explicitly specify the desired outputs using the syntax
       installable^output1,...,outputN. For example, you can obtain the dev
       and static outputs of the glibc package:

 # nix build 'nixpkgs#glibc^dev,static'
 # ls ./result-dev/include/ ./result-static/lib/
 …

       and likewise, using a store path to a "drv" file to specify the
       derivation:

 # nix build '/nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^dev,static'
 …

     * You can also specify that all outputs should be used using the syntax
       installable^*. For example, the following shows the size of all
       outputs of the glibc package in the binary cache:

 # nix path-info --closure-size --eval-store auto --store https://cache.nixos.org 'nixpkgs#glibc^*'
 /nix/store/g02b1lpbddhymmcjb923kf0l7s9nww58-glibc-2.33-123                 33208200
 /nix/store/851dp95qqiisjifi639r0zzg5l465ny4-glibc-2.33-123-bin             36142896
 /nix/store/kdgs3q6r7xdff1p7a9hnjr43xw2404z7-glibc-2.33-123-debug          155787312
 /nix/store/n4xa8h6pbmqmwnq0mmsz08l38abb06zc-glibc-2.33-123-static          42488328
 /nix/store/q6580lr01jpcsqs4r5arlh4ki2c1m9rv-glibc-2.33-123-dev             44200560

       and likewise, using a store path to a "drv" file to specify the
       derivation:

 # nix path-info --closure-size '/nix/store/gzaflydcr6sb3567hap9q6srzx8ggdgg-glibc-2.33-78.drv^*'
 …

     * If you didn't specify the desired outputs, but the derivation has an
       attribute meta.outputsToInstall, Nix will use those outputs. For
       example, since the package nixpkgs#libxml2 has this attribute:

 # nix eval 'nixpkgs#libxml2.meta.outputsToInstall'
 [ "bin" "man" ]

       a command like nix shell nixpkgs#libxml2 will provide only those two
       outputs by default.

       Note that a store derivation (given by its .drv file store path)
       doesn't have any attributes like meta, and thus this case doesn't
       apply to it.

     * Otherwise, Nix will use all outputs of the derivation.

                                   Nix stores

   Most nix subcommands operate on a Nix store. These are documented in nix
   help-stores.

                              Shebang interpreter

   The nix command can be used as a #! interpreter. Arguments to Nix can be
   passed on subsequent lines in the script.

   Verbatim strings may be passed in double backtick (``) quotes. Sequences
   of n backticks of 3 or longer are parsed as n-1 literal backticks. A
   single space before the closing `` is ignored if present.

   --file and --expr resolve relative paths based on the script location.

   Examples:

 #!/usr/bin/env nix
 #! nix shell --file ``<nixpkgs>`` hello cowsay --command bash

 hello | cowsay

   or with flakes:

 #!/usr/bin/env nix
 #! nix shell nixpkgs#bash nixpkgs#hello nixpkgs#cowsay --command bash

 hello | cowsay

   or with an expression:

 #! /usr/bin/env nix
 #! nix shell --impure --expr ``
 #! nix with (import (builtins.getFlake "nixpkgs") {});
 #! nix terraform.withPlugins (plugins: [ plugins.openstack ])
 #! nix ``
 #! nix --command bash

 terraform "$@"

   or with cascading interpreters. Note that the #! nix lines don't need to
   follow after the first line, to accomodate other interpreters.

 #!/usr/bin/env nix
 //! ```cargo
 //! [dependencies]
 //! time = "0.1.25"
 //! ```
 /*
 #!nix shell nixpkgs#rustc nixpkgs#rust-script nixpkgs#cargo --command rust-script
 */
 fn main() {
     for argument in std::env::args().skip(1) {
         println!("{}", argument);
     };
     println!("{}", std::env::var("HOME").expect(""));
     println!("{}", time::now().rfc822z());
 }
 // vim: ft=rust

                                    Options

Logging-related options

     * --debug

       Set the logging verbosity level to 'debug'.

     * --log-format format

       Set the format of log output; one of raw, internal-json, bar or
       bar-with-logs.

     * --print-build-logs / -L

       Print full build logs on standard error.

     * --quiet

       Decrease the logging verbosity level.

     * --verbose / -v

       Increase the logging verbosity level.

Miscellaneous global options

     * --help

       Show usage information.

     * --offline

       Disable substituters and consider all previously downloaded files
       up-to-date.

     * --option name value

       Set the Nix configuration setting name to value (overriding nix.conf).

     * --refresh

       Consider all previously downloaded files out-of-date.

     * --version

       Show version information.

     Note

     See man nix.conf for overriding configuration settings with command line
     flags.
