    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix copy
              5. 8.5.5. nix daemon
              6. 8.5.6. nix derivation
              7. 8.5.7. nix derivation add
              8. 8.5.8. nix derivation show
              9. 8.5.9. nix develop
             10. 8.5.10. nix doctor
             11. 8.5.11. nix edit
             12. 8.5.12. nix eval
             13. 8.5.13. nix flake
             14. 8.5.14. nix flake archive
             15. 8.5.15. nix flake check
             16. 8.5.16. nix flake clone
             17. 8.5.17. nix flake info
             18. 8.5.18. nix flake init
             19. 8.5.19. nix flake lock
             20. 8.5.20. nix flake metadata
             21. 8.5.21. nix flake new
             22. 8.5.22. nix flake prefetch
             23. 8.5.23. nix flake show
             24. 8.5.24. nix flake update
             25. 8.5.25. nix fmt
             26. 8.5.26. nix hash
             27. 8.5.27. nix hash file
             28. 8.5.28. nix hash path
             29. 8.5.29. nix hash to-base16
             30. 8.5.30. nix hash to-base32
             31. 8.5.31. nix hash to-base64
             32. 8.5.32. nix hash to-sri
             33. 8.5.33. nix help
             34. 8.5.34. nix help-stores
             35. 8.5.35. nix key
             36. 8.5.36. nix key convert-secret-to-public
             37. 8.5.37. nix key generate-secret
             38. 8.5.38. nix log
             39. 8.5.39. nix nar
             40. 8.5.40. nix nar cat
             41. 8.5.41. nix nar dump-path
             42. 8.5.42. nix nar ls
             43. 8.5.43. nix nar pack
             44. 8.5.44. nix path-info
             45. 8.5.45. nix print-dev-env
             46. 8.5.46. nix profile
             47. 8.5.47. nix profile diff-closures
             48. 8.5.48. nix profile history
             49. 8.5.49. nix profile install
             50. 8.5.50. nix profile list
             51. 8.5.51. nix profile remove
             52. 8.5.52. nix profile rollback
             53. 8.5.53. nix profile upgrade
             54. 8.5.54. nix profile wipe-history
             55. 8.5.55. nix realisation
             56. 8.5.56. nix realisation info
             57. 8.5.57. nix registry
             58. 8.5.58. nix registry add
             59. 8.5.59. nix registry list
             60. 8.5.60. nix registry pin
             61. 8.5.61. nix registry remove
             62. 8.5.62. nix repl
             63. 8.5.63. nix run
             64. 8.5.64. nix search
             65. 8.5.65. nix shell
             66. 8.5.66. nix show-config
             67. 8.5.67. nix store
             68. 8.5.68. nix store add
             69. 8.5.69. nix store add-file
             70. 8.5.70. nix store add-path
             71. 8.5.71. nix store cat
             72. 8.5.72. nix store copy-log
             73. 8.5.73. nix store copy-sigs
             74. 8.5.74. nix store delete
             75. 8.5.75. nix store diff-closures
             76. 8.5.76. nix store dump-path
             77. 8.5.77. nix store gc
             78. 8.5.78. nix store info
             79. 8.5.79. nix store ls
             80. 8.5.80. nix store make-content-addressed
             81. 8.5.81. nix store optimise
             82. 8.5.82. nix store path-from-hash-part
             83. 8.5.83. nix store ping
             84. 8.5.84. nix store prefetch-file
             85. 8.5.85. nix store repair
             86. 8.5.86. nix store sign
             87. 8.5.87. nix store verify
             88. 8.5.88. nix upgrade-nix
             89. 8.5.89. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Protocols
   17.   1. 10.1. Serving Tarball Flakes
         2. 10.2. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.19 (2023-11-17)
         2. 13.2. Release 2.18 (2023-09-20)
         3. 13.3. Release 2.17 (2023-07-24)
         4. 13.4. Release 2.16 (2023-05-31)
         5. 13.5. Release 2.15 (2023-04-11)
         6. 13.6. Release 2.14 (2023-02-28)
         7. 13.7. Release 2.13 (2023-01-17)
         8. 13.8. Release 2.12 (2022-12-06)
         9. 13.9. Release 2.11 (2022-08-25)
        10. 13.10. Release 2.10 (2022-07-11)
        11. 13.11. Release 2.9 (2022-05-30)
        12. 13.12. Release 2.8 (2022-04-19)
        13. 13.13. Release 2.7 (2022-03-07)
        14. 13.14. Release 2.6 (2022-01-24)
        15. 13.15. Release 2.5 (2021-12-13)
        16. 13.16. Release 2.4 (2021-11-01)
        17. 13.17. Release 2.3 (2019-09-04)
        18. 13.18. Release 2.2 (2019-01-11)
        19. 13.19. Release 2.1 (2018-09-02)
        20. 13.20. Release 2.0 (2018-02-22)
        21. 13.21. Release 1.11.10 (2017-06-12)
        22. 13.22. Release 1.11 (2016-01-19)
        23. 13.23. Release 1.10 (2015-09-03)
        24. 13.24. Release 1.9 (2015-06-12)
        25. 13.25. Release 1.8 (2014-12-14)
        26. 13.26. Release 1.7 (2014-04-11)
        27. 13.27. Release 1.6.1 (2013-10-28)
        28. 13.28. Release 1.6 (2013-09-10)
        29. 13.29. Release 1.5.2 (2013-05-13)
        30. 13.30. Release 1.5 (2013-02-27)
        31. 13.31. Release 1.4 (2013-02-26)
        32. 13.32. Release 1.3 (2013-01-04)
        33. 13.33. Release 1.2 (2012-12-06)
        34. 13.34. Release 1.1 (2012-07-18)
        35. 13.35. Release 1.0 (2012-05-11)
        36. 13.36. Release 0.16 (2010-08-17)
        37. 13.37. Release 0.15 (2010-03-17)
        38. 13.38. Release 0.14 (2010-02-04)
        39. 13.39. Release 0.13 (2009-11-05)
        40. 13.40. Release 0.12 (2008-11-20)
        41. 13.41. Release 0.11 (2007-12-31)
        42. 13.42. Release 0.10.1 (2006-10-11)
        43. 13.43. Release 0.10 (2006-10-06)
        44. 13.44. Release 0.9.2 (2005-09-21)
        45. 13.45. Release 0.9.1 (2005-09-20)
        46. 13.46. Release 0.9 (2005-09-16)
        47. 13.47. Release 0.8.1 (2005-04-13)
        48. 13.48. Release 0.8 (2005-04-11)
        49. 13.49. Release 0.7 (2005-01-12)
        50. 13.50. Release 0.6 (2004-11-14)
        51. 13.51. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

     Warning
     This program is experimental and its interface is subject to change.

                                      Name

   nix help-stores - show help about store types and their settings

                                    Synopsis

   nix help-stores [option...]

   Nix supports different types of stores. These are described below.

Store URL format

   Stores are specified using a URL-like syntax. For example, the command

 # nix path-info --store https://cache.nixos.org/ --json \
   /nix/store/a7gvj343m05j2s32xcnwr35v31ynlypr-coreutils-9.1

   fetches information about a store path in the HTTP binary cache located at
   https://cache.nixos.org/, which is a type of store.

   Store URLs can specify store settings using URL query strings, i.e. by
   appending ?name1=value1&name2=value2&... to the URL. For instance,

 --store ssh://machine.example.org?ssh-key=/path/to/my/key

   tells Nix to access the store on a remote machine via the SSH protocol,
   using /path/to/my/key as the SSH private key. The supported settings for
   each store type are documented below.

   The special store URL auto causes Nix to automatically select a store as
   follows:

     * Use the local store /nix/store if /nix/var/nix is writable by the
       current user.

     * Otherwise, if /nix/var/nix/daemon-socket/socket exists, connect to the
       Nix daemon listening on that socket.

     * Otherwise, on Linux only, use the local chroot store
       ~/.local/share/nix/root, which will be created automatically if it
       does not exist.

     * Otherwise, use the local store /nix/store.

Dummy Store

   Store URL format: dummy://

   This store type represents a store that contains no store paths and cannot
   be written to. It's useful when you want to use the Nix evaluator when no
   actual Nix store exists, e.g.

 # nix eval --store dummy:// --expr '1 + 2'

  Settings

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

Experimental SSH Store

   Store URL format: ssh-ng://[username@]hostname

   Experimental store type that allows full access to a Nix store on a remote
   machine.

  Settings

     * base64-ssh-public-host-key

       The public host key of the remote machine.

       Default: empty

     * compress

       Whether to enable SSH compression.

       Default: false

     * max-connection-age

       Maximum age of a connection before it is closed.

       Default: 4294967295

     * max-connections

       Maximum number of concurrent connections to the Nix daemon.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * remote-program

       Path to the nix-daemon executable on the remote machine.

       Default: nix-daemon

     * remote-store

       Store URL to be used on the remote machine. The default is auto (i.e.
       use the Nix daemon or /nix/store directly).

       Default: empty

     * ssh-key

       Path to the SSH private key used to authenticate to the remote
       machine.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

HTTP Binary Cache Store

   Store URL format: http://..., https://...

   This store allows a binary cache to be accessed via the HTTP protocol.

  Settings

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

Local Binary Cache Store

   Store URL format: file://path

   This store allows reading and writing a binary cache stored in path in the
   local filesystem. If path does not exist, it will be created.

   For example, the following builds or downloads nixpkgs#hello into the
   local store and then copies it to the binary cache in /tmp/binary-cache:

 # nix copy --to file:///tmp/binary-cache nixpkgs#hello

  Settings

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

Local Daemon Store

   Store URL format: daemon, unix://path

   This store type accesses a Nix store by talking to a Nix daemon listening
   on the Unix domain socket path. The store pseudo-URL daemon is equivalent
   to unix:///nix/var/nix/daemon-socket/socket.

  Settings

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * max-connection-age

       Maximum age of a connection before it is closed.

       Default: 4294967295

     * max-connections

       Maximum number of concurrent connections to the Nix daemon.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * root

       Directory prefixed to all other paths.

       Default: ``

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

Local Store

   Store URL format: local, root

   This store type accesses a Nix store in the local filesystem directly
   (i.e. not via the Nix daemon). root is an absolute path that is prefixed
   to other directories such as the Nix store directory. The store pseudo-URL
   local denotes a store that uses / as its root directory.

   A store that uses a root other than / is called a chroot store. With such
   stores, the store directory is "logically" still /nix/store, so programs
   stored in them can only be built and executed by chroot-ing into root.
   Chroot stores only support building and running on Linux when mount
   namespaces and user namespaces are enabled.

   For example, the following uses /tmp/root as the chroot environment to
   build or download nixpkgs#hello and then execute it:

 # nix run --store /tmp/root nixpkgs#hello
 Hello, world!

   Here, the "physical" store location is /tmp/root/nix/store, and Nix's
   store metadata is in /tmp/root/nix/var/nix/db.

   It is also possible, but not recommended, to change the "logical" location
   of the Nix store from its default of /nix/store. This makes it impossible
   to use default substituters such as https://cache.nixos.org/, and thus you
   may have to build everything locally. Here is an example:

 # nix build --store 'local?store=/tmp/my-nix/store&state=/tmp/my-nix/state&log=/tmp/my-nix/log' nixpkgs#hello

  Settings

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * read-only

       Allow this store to be opened when its database is on a read-only
       filesystem.

       Normally Nix will attempt to open the store database in read-write
       mode, even for querying (when write access is not needed), causing it
       to fail if the database is on a read-only filesystem.

       Enable read-only mode to disable locking and open the SQLite database
       with the immutable parameter set.

         Warning Do not use this unless the filesystem is read-only.

         Using it when the filesystem is writable can cause incorrect query
         results or corruption errors if the database is changed by another
         process. While the filesystem the database resides on might appear
         to be read-only, consider whether another user or system might have
         write access to it.

       Default: false

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * require-sigs

       Whether store paths copied into this store should have a trusted
       signature.

       Default: true

     * root

       Directory prefixed to all other paths.

       Default: ``

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

S3 Binary Cache Store

   Store URL format: s3://bucket-name

   This store allows reading and writing a binary cache stored in an AWS S3
   (or S3-compatible service) bucket. This store shares many idioms with the
   HTTP Binary Cache Store.

   For AWS S3, the binary cache URL for a bucket named example-nix-cache will
   be exactly s3://example-nix-cache. For S3 compatible binary caches,
   consult that cache's documentation.

  Anonymous reads to your S3-compatible binary cache

     If your binary cache is publicly accessible and does not require
     authentication, it is simplest to use the [HTTP Binary Cache Store]
     rather than S3 Binary Cache Store with
     https://example-nix-cache.s3.amazonaws.com instead of
     s3://example-nix-cache.

   Your bucket will need a bucket policy like the following to be accessible:

 {
     "Id": "DirectReads",
     "Version": "2012-10-17",
     "Statement": [
         {
             "Sid": "AllowDirectReads",
             "Action": [
                 "s3:GetObject",
                 "s3:GetBucketLocation"
             ],
             "Effect": "Allow",
             "Resource": [
                 "arn:aws:s3:::example-nix-cache",
                 "arn:aws:s3:::example-nix-cache/*"
             ],
             "Principal": "*"
         }
     ]
 }

  Authentication

   Nix will use the default credential provider chain for authenticating
   requests to Amazon S3.

   Note that this means Nix will read environment variables and files with
   different idioms than with Nix's own settings, as implemented by the AWS
   SDK. Consult the documentation linked above for further details.

  Authenticated reads to your S3 binary cache

   Your bucket will need a bucket policy allowing the desired users to
   perform the s3:GetObject and s3:GetBucketLocation action on all objects in
   the bucket. The anonymous policy given above can be updated to have a
   restricted Principal to support this.

  Authenticated writes to your S3-compatible binary cache

   Your account will need an IAM policy to support uploading to the bucket:

 {
   "Version": "2012-10-17",
   "Statement": [
     {
       "Sid": "UploadToCache",
       "Effect": "Allow",
       "Action": [
         "s3:AbortMultipartUpload",
         "s3:GetBucketLocation",
         "s3:GetObject",
         "s3:ListBucket",
         "s3:ListBucketMultipartUploads",
         "s3:ListMultipartUploadParts",
         "s3:PutObject"
       ],
       "Resource": [
         "arn:aws:s3:::example-nix-cache",
         "arn:aws:s3:::example-nix-cache/*"
       ]
     }
   ]
 }

  Examples

   With bucket policies and authentication set up as described above,
   uploading works via nix copy (experimental).

     * To upload with a specific credential profile for Amazon S3:

 $ nix copy nixpkgs.hello \
   --to 's3://example-nix-cache?profile=cache-upload&region=eu-west-2'

     * To upload to an S3-compatible binary cache:

 $ nix copy nixpkgs.hello --to \
   's3://example-nix-cache?profile=cache-upload&scheme=https&endpoint=minio.example.com'

  Settings

     * buffer-size

       Size (in bytes) of each part in multi-part uploads.

       Default: 5242880

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * endpoint

       The URL of the endpoint of an S3-compatible service such as MinIO. Do
       not specify this setting if you're using Amazon S3.

         Note

         This endpoint must support HTTPS and will use path-based addressing
         instead of virtual host based addressing.

       Default: empty

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * log-compression

       Compression method for log/* files. It is recommended to use a
       compression method supported by most web browsers (e.g. brotli).

       Default: empty

     * ls-compression

       Compression method for .ls files.

       Default: empty

     * multipart-upload

       Whether to use multi-part uploads.

       Default: false

     * narinfo-compression

       Compression method for .narinfo files.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * profile

       The name of the AWS configuration profile to use. By default Nix will
       use the default profile.

       Default: empty

     * region

       The region of the S3 bucket. If your bucket is not in us–east-1, you
       should always explicitly specify the region parameter.

       Default: us-east-1

     * scheme

       The scheme used for S3 requests, https (default) or http. This option
       allows you to disable HTTPS for binary caches which don't support it.

         Note

         HTTPS should be used if the cache might contain sensitive
         information.

       Default: empty

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

SSH Store

   Store URL format: ssh://[username@]hostname

   This store type allows limited access to a remote store on another machine
   via SSH.

  Settings

     * base64-ssh-public-host-key

       The public host key of the remote machine.

       Default: empty

     * compress

       Whether to enable SSH compression.

       Default: false

     * max-connections

       Maximum number of concurrent SSH connections.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * remote-program

       Path to the nix-store executable on the remote machine.

       Default: nix-store

     * remote-store

       Store URL to be used on the remote machine. The default is auto (i.e.
       use the Nix daemon or /nix/store directly).

       Default: empty

     * ssh-key

       Path to the SSH private key used to authenticate to the remote
       machine.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: benchmark big-parallel kvm nixos-test uid-range

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                                    Options

Logging-related options

     * --debug

       Set the logging verbosity level to 'debug'.

     * --log-format format

       Set the format of log output; one of raw, internal-json, bar or
       bar-with-logs.

     * --print-build-logs / -L

       Print full build logs on standard error.

     * --quiet

       Decrease the logging verbosity level.

     * --verbose / -v

       Increase the logging verbosity level.

Miscellaneous global options

     * --help

       Show usage information.

     * --offline

       Disable substituters and consider all previously downloaded files
       up-to-date.

     * --option name value

       Set the Nix configuration setting name to value (overriding nix.conf).

     * --refresh

       Consider all previously downloaded files out-of-date.

     * --version

       Show version information.

     Note

     See man nix.conf for overriding configuration settings with command line
     flags.
