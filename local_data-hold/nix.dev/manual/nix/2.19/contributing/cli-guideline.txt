    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix copy
              5. 8.5.5. nix daemon
              6. 8.5.6. nix derivation
              7. 8.5.7. nix derivation add
              8. 8.5.8. nix derivation show
              9. 8.5.9. nix develop
             10. 8.5.10. nix doctor
             11. 8.5.11. nix edit
             12. 8.5.12. nix eval
             13. 8.5.13. nix flake
             14. 8.5.14. nix flake archive
             15. 8.5.15. nix flake check
             16. 8.5.16. nix flake clone
             17. 8.5.17. nix flake info
             18. 8.5.18. nix flake init
             19. 8.5.19. nix flake lock
             20. 8.5.20. nix flake metadata
             21. 8.5.21. nix flake new
             22. 8.5.22. nix flake prefetch
             23. 8.5.23. nix flake show
             24. 8.5.24. nix flake update
             25. 8.5.25. nix fmt
             26. 8.5.26. nix hash
             27. 8.5.27. nix hash file
             28. 8.5.28. nix hash path
             29. 8.5.29. nix hash to-base16
             30. 8.5.30. nix hash to-base32
             31. 8.5.31. nix hash to-base64
             32. 8.5.32. nix hash to-sri
             33. 8.5.33. nix help
             34. 8.5.34. nix help-stores
             35. 8.5.35. nix key
             36. 8.5.36. nix key convert-secret-to-public
             37. 8.5.37. nix key generate-secret
             38. 8.5.38. nix log
             39. 8.5.39. nix nar
             40. 8.5.40. nix nar cat
             41. 8.5.41. nix nar dump-path
             42. 8.5.42. nix nar ls
             43. 8.5.43. nix nar pack
             44. 8.5.44. nix path-info
             45. 8.5.45. nix print-dev-env
             46. 8.5.46. nix profile
             47. 8.5.47. nix profile diff-closures
             48. 8.5.48. nix profile history
             49. 8.5.49. nix profile install
             50. 8.5.50. nix profile list
             51. 8.5.51. nix profile remove
             52. 8.5.52. nix profile rollback
             53. 8.5.53. nix profile upgrade
             54. 8.5.54. nix profile wipe-history
             55. 8.5.55. nix realisation
             56. 8.5.56. nix realisation info
             57. 8.5.57. nix registry
             58. 8.5.58. nix registry add
             59. 8.5.59. nix registry list
             60. 8.5.60. nix registry pin
             61. 8.5.61. nix registry remove
             62. 8.5.62. nix repl
             63. 8.5.63. nix run
             64. 8.5.64. nix search
             65. 8.5.65. nix shell
             66. 8.5.66. nix show-config
             67. 8.5.67. nix store
             68. 8.5.68. nix store add
             69. 8.5.69. nix store add-file
             70. 8.5.70. nix store add-path
             71. 8.5.71. nix store cat
             72. 8.5.72. nix store copy-log
             73. 8.5.73. nix store copy-sigs
             74. 8.5.74. nix store delete
             75. 8.5.75. nix store diff-closures
             76. 8.5.76. nix store dump-path
             77. 8.5.77. nix store gc
             78. 8.5.78. nix store info
             79. 8.5.79. nix store ls
             80. 8.5.80. nix store make-content-addressed
             81. 8.5.81. nix store optimise
             82. 8.5.82. nix store path-from-hash-part
             83. 8.5.83. nix store ping
             84. 8.5.84. nix store prefetch-file
             85. 8.5.85. nix store repair
             86. 8.5.86. nix store sign
             87. 8.5.87. nix store verify
             88. 8.5.88. nix upgrade-nix
             89. 8.5.89. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Protocols
   17.   1. 10.1. Serving Tarball Flakes
         2. 10.2. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.19 (2023-11-17)
         2. 13.2. Release 2.18 (2023-09-20)
         3. 13.3. Release 2.17 (2023-07-24)
         4. 13.4. Release 2.16 (2023-05-31)
         5. 13.5. Release 2.15 (2023-04-11)
         6. 13.6. Release 2.14 (2023-02-28)
         7. 13.7. Release 2.13 (2023-01-17)
         8. 13.8. Release 2.12 (2022-12-06)
         9. 13.9. Release 2.11 (2022-08-25)
        10. 13.10. Release 2.10 (2022-07-11)
        11. 13.11. Release 2.9 (2022-05-30)
        12. 13.12. Release 2.8 (2022-04-19)
        13. 13.13. Release 2.7 (2022-03-07)
        14. 13.14. Release 2.6 (2022-01-24)
        15. 13.15. Release 2.5 (2021-12-13)
        16. 13.16. Release 2.4 (2021-11-01)
        17. 13.17. Release 2.3 (2019-09-04)
        18. 13.18. Release 2.2 (2019-01-11)
        19. 13.19. Release 2.1 (2018-09-02)
        20. 13.20. Release 2.0 (2018-02-22)
        21. 13.21. Release 1.11.10 (2017-06-12)
        22. 13.22. Release 1.11 (2016-01-19)
        23. 13.23. Release 1.10 (2015-09-03)
        24. 13.24. Release 1.9 (2015-06-12)
        25. 13.25. Release 1.8 (2014-12-14)
        26. 13.26. Release 1.7 (2014-04-11)
        27. 13.27. Release 1.6.1 (2013-10-28)
        28. 13.28. Release 1.6 (2013-09-10)
        29. 13.29. Release 1.5.2 (2013-05-13)
        30. 13.30. Release 1.5 (2013-02-27)
        31. 13.31. Release 1.4 (2013-02-26)
        32. 13.32. Release 1.3 (2013-01-04)
        33. 13.33. Release 1.2 (2012-12-06)
        34. 13.34. Release 1.1 (2012-07-18)
        35. 13.35. Release 1.0 (2012-05-11)
        36. 13.36. Release 0.16 (2010-08-17)
        37. 13.37. Release 0.15 (2010-03-17)
        38. 13.38. Release 0.14 (2010-02-04)
        39. 13.39. Release 0.13 (2009-11-05)
        40. 13.40. Release 0.12 (2008-11-20)
        41. 13.41. Release 0.11 (2007-12-31)
        42. 13.42. Release 0.10.1 (2006-10-11)
        43. 13.43. Release 0.10 (2006-10-06)
        44. 13.44. Release 0.9.2 (2005-09-21)
        45. 13.45. Release 0.9.1 (2005-09-20)
        46. 13.46. Release 0.9 (2005-09-16)
        47. 13.47. Release 0.8.1 (2005-04-13)
        48. 13.48. Release 0.8 (2005-04-11)
        49. 13.49. Release 0.7 (2005-01-12)
        50. 13.50. Release 0.6 (2004-11-14)
        51. 13.51. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                 CLI guideline

Goals

   Purpose of this document is to provide a clear direction to help design
   delightful command line experience. This document contains guidelines to
   follow to ensure a consistent and approachable user experience.

Overview

   nix command provides a single entry to a number of sub-commands that help
   developers and system administrators in the life-cycle of a software
   project. We particularly need to pay special attention to help and assist
   new users of Nix.

                              Naming the COMMANDS

   Words matter. Naming is an important part of the usability. Users will be
   interacting with Nix on a regular basis so we should name things for ease
   of understanding.

   We recommend following the Principle of Least Astonishment. This means
   that you should never use acronyms or abbreviations unless they are
   commonly used in other tools (e.g. nix init). And if the command name is
   too long (> 10-12 characters) then shortening it makes sense (e.g.
   “prioritization” → “priority”).

   Commands should follow a noun-verb dialogue. Although noun-verb formatting
   seems backwards from a speaking perspective (i.e. nix store copy vs. nix
   copy store) it allows us to organize commands the same way users think
   about completing an action (the group first, then the command).

Naming rules

   Rules are there to guide you by limiting your options. But not everything
   can fit the rules all the time. In those cases document the exceptions in
   Appendix 1: Commands naming exceptions and provide reason. The rules want
   to force a Nix developer to look, not just at the command at hand, but
   also the command in a full context alongside other nix commands.

 $ nix [<GROUP>] <COMMAND> [<ARGUMENTS>] [<OPTIONS>]

     * GROUP, COMMAND, ARGUMENTS and OPTIONS should be lowercase and in a
       singular form.
     * GROUP should be a NOUN.
     * COMMAND should be a VERB.
     * ARGUMENTS and OPTIONS are discussed in Input section.

Classification

   Some commands are more important, some less. While we want all of our
   commands to be perfect we can only spend limited amount of time testing
   and improving them.

   This classification tries to separate commands in 3 categories in terms of
   their importance in regards to the new users. Users who are likely to be
   impacted the most by bad user experience.

     * Main commands

       Commands used for our main use cases and most likely used by new
       users. We expect attention to details, such as:

          * Proper use of colors, emojis and aligning of text.
          * Autocomplete of options.
          * Show next possible steps.
          * Showing some “tips” when running logs running tasks (eg. building
            / downloading) in order to teach users interesting bits of Nix
            ecosystem.
          * Help pages to be as good as we can write them pointing to
            external documentation and tutorials for more.

       Examples of such commands: nix init, nix develop, nix build, nix run,
       ...

     * Infrequently used commands

       From infrequently used commands we expect less attention to details,
       but still some:

          * Proper use of colors, emojis and aligning of text.
          * Autocomplete of options.

       Examples of such commands: nix doctor, nix edit, nix eval, ...

     * Utility and scripting commands

       Commands that expose certain internal functionality of nix, mostly
       used by other scripts.

          * Autocomplete of options.

       Examples of such commands: nix store copy, nix hash base16, nix store
       ping, ...

                               Help is essential

   Help should be built into your command line so that new users can
   gradually discover new features when they need them.

Looking for help

   Since there is no standard way how user will look for help we rely on ways
   help is provided by commonly used tools. As a guide for this we took git
   and whenever in doubt look at it as a preferred direction.

   The rules are:

     * Help is shown by using --help or help command (eg nix --``help or nix
       help).
     * For non-COMMANDs (eg. nix --``help and nix store --``help) we show a
       summary of most common use cases. Summary is presented on the STDOUT
       without any use of PAGER.
     * For COMMANDs (eg. nix init --``help or nix help init) we display the
       man page of that command. By default the PAGER is used (as in git).
     * At the end of either summary or man page there should be an URL
       pointing to an online version of more detailed documentation.
     * The structure of summaries and man pages should be the same as in git.

Anticipate where help is needed

   Even better then requiring the user to search for help is to anticipate
   and predict when user might need it. Either because the lack of
   discoverability, typo in the input or simply taking the opportunity to
   teach the user of interesting - but less visible - details.

  Shell completion

   This type of help is most common and almost expected by users. We need to
   provide the best shell completion for bash, zsh and fish.

   Completion needs to be context aware, this mean when a user types:

 $ nix build n<TAB>

   we need to display a list of flakes starting with n.

  Wrong input

   As we all know we humans make mistakes, all the time. When a typo -
   intentional or unintentional - is made, we should prompt for closest
   possible options or point to the documentation which would educate user to
   not make the same errors. Here are few examples:

   In first example we prompt the user for typing wrong command name:

 $ nix int
 ------------------------------------------------------------------------
   Error! Command `int` not found.
 ------------------------------------------------------------------------
   Did you mean:
     |> nix init
     |> nix input

   Sometimes users will make mistake either because of a typo or simply
   because of lack of discoverability. Our handling of this cases needs to be
   context sensitive.

 $ nix init --template=template#pyton
 ------------------------------------------------------------------------
   Error! Template `template#pyton` not found.
 ------------------------------------------------------------------------
 Initializing Nix project at `/path/to/here`.
       Select a template for you new project:
           |> template#python
              template#python-pip
              template#python-poetry

  Next steps

   It can be invaluable to newcomers to show what a possible next steps and
   what is the usual development workflow with Nix. For example:

 $ nix init --template=template#python
 Initializing project `template#python`
           in `/home/USER/dev/new-project`

   Next steps
     |> nix develop   -- to enter development environment
     |> nix build     -- to build your project

  Educate the user

   We should take any opportunity to educate users, but at the same time we
   must be very very careful to not annoy users. There is a thin line between
   being helpful and being annoying.

   An example of educating users might be to provide Tips in places where
   they are waiting.

 $ nix build
     Started building my-project 1.2.3
  Downloaded python3.8-poetry 1.2.3 in 5.3 seconds
  Downloaded python3.8-requests 1.2.3 in 5.3 seconds
 ------------------------------------------------------------------------
       Press `v` to increase logs verbosity
          |> `?` to see other options
 ------------------------------------------------------------------------
       Learn something new with every build...
          |> See last logs of a build with `nix log --last` command.
 ------------------------------------------------------------------------
   Evaluated my-project 1.2.3 in 14.43 seconds
 Downloading [12 / 200]
          |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left
    Building [2 / 20]
          |> glibc 1.2.3 -> buildPhase: <last log line>
 ------------------------------------------------------------------------

   Now Learn part of the output is where you educate users. You should only
   show it when you know that a build will take some time and not annoy users
   of the builds that take only few seconds.

   Every feature like this should go through an intensive review and testing
   to collect as much feedback as possible and to fine tune every little
   detail. If done right this can be an awesome features beginners and
   advance users will love, but if not done perfectly it will annoy users and
   leave bad impression.

                                     Input

   Input to a command is provided via ARGUMENTS and OPTIONS.

   ARGUMENTS represent a required input for a function. When choosing to use
   ARGUMENTS over OPTIONS please be aware of the downsides that come with it:

     * User will need to remember the order of ARGUMENTS. This is not a
       problem if there is only one ARGUMENT.
     * With OPTIONS it is possible to provide much better auto completion.
     * With OPTIONS it is possible to provide much better error message.
     * Using OPTIONS it will mean there is a little bit more typing.

   We don’t discourage the use of ARGUMENTS, but simply want to make every
   developer consider the downsides and choose wisely.

Naming the OPTIONS

   The only naming convention - apart from the ones mentioned in Naming the
   COMMANDS section is how flags are named.

   Flags are a type of OPTION that represent an option that can be turned ON
   of OFF. We can say flags are boolean type of **OPTION**.

   Here are few examples of flag OPTIONS:

     * --colors vs. --no-colors (showing colors in the output)
     * --emojis vs. --no-emojis (showing emojis in the output)

Prompt when input not provided

   For main commands (as per classification) we want command to improve the
   discoverability of possible input. A new user will most likely not know
   which ARGUMENTS and OPTIONS are required or which values are possible for
   those options.

   In case the user does not provide the input or they provide wrong input,
   rather than show the error, prompt a user with an option to find and
   select correct input (see examples).

   Prompting is of course not required when TTY is not attached to STDIN.
   This would mean that scripts won't need to handle prompt, but rather
   handle errors.

   A place to use prompt and provide user with interactive select

 $ nix init
 Initializing Nix project at `/path/to/here`.
       Select a template for you new project:
           |> py
              template#python-pip
              template#python-poetry
              [ Showing 2 templates from 1345 templates ]

   Another great place to add prompts are confirmation dialogues for
   dangerous actions. For example when adding new substitutor via OPTIONS or
   via flake.nix we should prompt - for the first time - and let user review
   what is going to happen.

 $ nix build --option substitutors https://cache.example.org
 ------------------------------------------------------------------------
   Warning! A security related question needs to be answered.
 ------------------------------------------------------------------------
   The following substitutors will be used to in `my-project`:
     - https://cache.example.org

   Do you allow `my-project` to use above mentioned substitutors?
     [y/N] |> y

                                     Output

   Terminal output can be quite limiting in many ways. Which should force us
   to think about the experience even more. As with every design the output
   is a compromise between being terse and being verbose, between showing
   help to beginners and annoying advance users. For this it is important
   that we know what are the priorities.

   Nix command line should be first and foremost written with beginners in
   mind. But users won't stay beginners for long and what was once useful
   might quickly become annoying. There is no golden rule that we can give in
   this guideline that would make it easier how to draw a line and find best
   compromise.

   What we would encourage is to build prototypes, do some user testing and
   collect feedback. Then repeat the cycle few times.

   First design the happy path and only after your iron it out, continue to
   work on edge cases (handling and displaying errors, changes of the output
   by certain OPTIONS, etc…)

Follow best practices

   Needless to say we Nix must be a good citizen and follow best practices in
   command line.

   In short: STDOUT is for output, STDERR is for (human) messaging.

   STDOUT and STDERR provide a way for you to output messages to the user
   while also allowing them to redirect content to a file. For example:

 $ nix build > build.txt
 ------------------------------------------------------------------------
   Error! Attribute `bin` missing at (1:94) from string.
 ------------------------------------------------------------------------

   1| with import <nixpkgs> { }; (pkgs.runCommandCC or pkgs.runCommand) "shell" { buildInputs = [ (surge.bin) ]; } ""

   Because this warning is on STDERR, it doesn’t end up in the file.

   But not everything on STDERR is an error though. For example, you can run
   nix build and collect logs in a file while still seeing the progress.

 $ nix build > build.txt
   Evaluated 1234 files in 1.2 seconds
  Downloaded python3.8-poetry 1.2.3 in 5.3 seconds
  Downloaded python3.8-requests 1.2.3 in 5.3 seconds
 ------------------------------------------------------------------------
       Press `v` to increase logs verbosity
          |> `?` to see other options
 ------------------------------------------------------------------------
       Learn something new with every build...
          |> See last logs of a build with `nix log --last` command.
 ------------------------------------------------------------------------
   Evaluated my-project 1.2.3 in 14.43 seconds
 Downloading [12 / 200]
          |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left
    Building [2 / 20]
          |> glibc 1.2.3 -> buildPhase: <last log line>
 ------------------------------------------------------------------------

Errors (WIP)

   TODO: Once we have implementation for the happy path then we will think
   how to present errors.

Not only for humans

   Terse, machine-readable output formats can also be useful but shouldn’t
   get in the way of making beautiful CLI output. When needed, commands
   should offer a --json flag to allow users to easily parse and script the
   CLI.

   When TTY is not detected on STDOUT we should remove all design elements
   (no colors, no emojis and using ASCII instead of Unicode symbols). The
   same should happen when TTY is not detected on STDERR. We should not
   display progress / status section, but only print warnings and errors.

Returning future proof JSON

   The schema of JSON output should allow for backwards compatible extension.
   This section explains how to achieve this.

   Two definitions are helpful here, because while JSON only defines one
   "key-value" object type, we use it to cover two use cases:

     * dictionary: a map from names to value that all have the same type. In
       C++ this would be a std::map with string keys.
     * record: a fixed set of attributes each with their own type. In C++,
       this would be represented by a struct.

   It is best not to mix these use cases, as that may lead to
   incompatibilities when the schema changes. For example, adding a record
   field to a dictionary breaks consumers that assume all JSON object fields
   to have the same meaning and type.

   This leads to the following guidelines:

     * The top-level (root) value must be a record.

       Otherwise, one can not change the structure of a command's output.

     * The value of a dictionary item must be a record.

       Otherwise, the item type can not be extended.

     * List items should be records.

       Otherwise, one can not change the structure of the list items.

       If the order of the items does not matter, and each item has a unique
       key that is a string, consider representing the list as a dictionary
       instead. If the order of the items needs to be preserved, return a
       list of records.

     * Streaming JSON should return records.

       An example of a streaming JSON format is JSON lines, where each line
       represents a JSON value. These JSON values can be considered top-level
       values or list items, and they must be records.

  Examples

   This is bad, because all keys must be assumed to be store implementations:

 {
   "local": { ... },
   "remote": { ... },
   "http": { ... }
 }

   This is good, because the it is extensible at the root, and is somewhat
   self-documenting:

 {
   "storeTypes": { "local": { ... }, ... },
   "pluginSupport": true
 }

   While the dictionary of store types seems like a very complete response at
   first, a use case may arise that warrants returning additional
   information. For example, the presence of plugin support may be crucial
   information for a client to proceed when their desired store type is
   missing.

   The following representation is bad because it is not extensible:

 { "outputs": [ "out" "bin" ] }

   However, simply converting everything to records is not enough, because
   the order of outputs must be preserved:

 { "outputs": { "bin": {}, "out": {} } }

   The first item is the default output. Deriving this information from the
   outputs ordering is not great, but this is how Nix currently happens to
   work. While it is possible for a JSON parser to preserve the order of
   fields, we can not rely on this capability to be present in all JSON
   libraries.

   This representation is extensible and preserves the ordering:

 { "outputs": [ { "outputName": "out" }, { "outputName": "bin" } ] }

Dialog with the user

   CLIs don't always make it clear when an action has taken place. For every
   action a user performs, your CLI should provide an equal and appropriate
   reaction, clearly highlighting the what just happened. For example:

 $ nix build
  Downloaded python3.8-poetry 1.2.3 in 5.3 seconds
  Downloaded python3.8-requests 1.2.3 in 5.3 seconds
 ...
    Success! You have successfully built my-project.
 $

   Above command clearly states that command successfully completed. And in
   case of nix build, which is a command that might take some time to
   complete, it is equally important to also show that a command started.

Text alignment

   Text alignment is the number one design element that will present all of
   the Nix commands as a family and not as separate tools glued together.

   The format we should follow is:

 $ nix COMMAND
    VERB_1 NOUN and other words
   VERB__1 NOUN and other words
        |> Some details

   Few rules that we can extract from above example:

     * Each line should start at least with one space.
     * First word should be a VERB and must be aligned to the right.
     * Second word should be a NOUN and must be aligned to the left.
     * If you can not find a good VERB / NOUN pair, don’t worry make it as
       understandable to the user as possible.
     * More details of each line can be provided by |> character which is
       serving as the first word when aligning the text

   Don’t forget you should also test your terminal output with colors and
   emojis off (--no-colors --no-emojis).

Dim / Bright

   After comparing few terminals with different color schemes we would
   recommend to avoid using dimmed text. The difference from the rest of the
   text is very little in many terminal and color scheme combinations.
   Sometimes the difference is not even notable, therefore relying on it
   wouldn’t make much sense.

   The bright text is much better supported across terminals and color
   schemes. Most of the time the difference is perceived as if the bright
   text would be bold.

Colors

   Humans are already conditioned by society to attach certain meaning to
   certain colors. While the meaning is not universal, a simple collection of
   colors is used to represent basic emotions.

   Colors that can be used in output

     * Red = error, danger, stop
     * Green = success, good
     * Yellow/Orange = proceed with caution, warning, in progress
     * Blue/Magenta = stability, calm

   While colors are nice, when command line is used by machines (in
   automation scripts) you want to remove the colors. There should be a
   global --no-colors option that would remove the colors.

Special (Unicode) characters

   Most of the terminal have good support for Unicode characters and you
   should use them in your output by default. But always have a backup
   solution that is implemented only with ASCII characters and will be used
   when --ascii option is going to be passed in. Please make sure that you
   test your output also without Unicode characters

   More they showing all the different Unicode characters it is important to
   establish common set of characters that we use for certain situations.

Emojis

   Emojis help channel emotions even better than text, colors and special
   characters.

   We recommend keeping the set of emojis to a minimum. This will enable each
   emoji to stand out more.

   As not everybody is happy about emojis we should provide an --no-emojis
   option to disable them. Please make sure that you test your output also
   without emojis.

Tables

   All commands that are listing certain data can be implemented in some sort
   of a table. It’s important that each row of your output is a single
   ‘entry’ of data. Never output table borders. It’s noisy and a huge pain
   for parsing using other tools such as grep.

   Be mindful of the screen width. Only show a few columns by default with
   the table header, for more the table can be manipulated by the following
   options:

     * --no-headers: Show column headers by default but allow to hide them.
     * --columns: Comma-separated list of column names to add.
     * --sort: Allow sorting by column. Allow inverse and multi-column sort
       as well.

Interactive output

   Interactive output was selected to be able to strike the balance between
   beginners and advance users. While the default output will target
   beginners it can, with a few key strokes, be changed into and advance
   introspection tool.

  Progress

   For longer running commands we should provide and overview the progress.
   This is shown best in nix build example:

 $ nix build
     Started building my-project 1.2.3
  Downloaded python3.8-poetry 1.2.3 in 5.3 seconds
  Downloaded python3.8-requests 1.2.3 in 5.3 seconds
 ------------------------------------------------------------------------
       Press `v` to increase logs verbosity
          |> `?` to see other options
 ------------------------------------------------------------------------
       Learn something new with every build...
          |> See last logs of a build with `nix log --last` command.
 ------------------------------------------------------------------------
   Evaluated my-project 1.2.3 in 14.43 seconds
 Downloading [12 / 200]
          |> firefox 1.2.3 [#########>       ] 10Mb/s | 2min left
    Building [2 / 20]
          |> glibc 1.2.3 -> buildPhase: <last log line>
 ------------------------------------------------------------------------

  Search

   Use a fzf like fuzzy search when there are multiple options to choose
   from.

 $ nix init
 Initializing Nix project at `/path/to/here`.
       Select a template for you new project:
           |> py
              template#python-pip
              template#python-poetry
              [ Showing 2 templates from 1345 templates ]

  Prompt

   In some situations we need to prompt the user and inform the user about
   what is going to happen.

 $ nix build --option substitutors https://cache.example.org
 ------------------------------------------------------------------------
   Warning! A security related question needs to be answered.
 ------------------------------------------------------------------------
   The following substitutors will be used to in `my-project`:
     - https://cache.example.org

   Do you allow `my-project` to use above mentioned substitutors?
     [y/N] |> y

Verbosity

   There are many ways that you can control verbosity.

   Verbosity levels are:

     * ERROR (level 0)
     * WARN (level 1)
     * NOTICE (level 2)
     * INFO (level 3)
     * TALKATIVE (level 4)
     * CHATTY (level 5)
     * DEBUG (level 6)
     * VOMIT (level 7)

   The default level that the command starts is ERROR. The simplest way to
   increase the verbosity by stacking -v option (eg: -vvv == level 3 ==
   INFO). There are also two shortcuts, --debug to run in DEBUG verbosity
   level and --quiet to run in ERROR verbosity level.

     ----------------------------------------------------------------------

                     Appendix 1: Commands naming exceptions

   nix init and nix repl are well established
