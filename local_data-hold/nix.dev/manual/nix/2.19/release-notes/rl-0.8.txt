    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix copy
              5. 8.5.5. nix daemon
              6. 8.5.6. nix derivation
              7. 8.5.7. nix derivation add
              8. 8.5.8. nix derivation show
              9. 8.5.9. nix develop
             10. 8.5.10. nix doctor
             11. 8.5.11. nix edit
             12. 8.5.12. nix eval
             13. 8.5.13. nix flake
             14. 8.5.14. nix flake archive
             15. 8.5.15. nix flake check
             16. 8.5.16. nix flake clone
             17. 8.5.17. nix flake info
             18. 8.5.18. nix flake init
             19. 8.5.19. nix flake lock
             20. 8.5.20. nix flake metadata
             21. 8.5.21. nix flake new
             22. 8.5.22. nix flake prefetch
             23. 8.5.23. nix flake show
             24. 8.5.24. nix flake update
             25. 8.5.25. nix fmt
             26. 8.5.26. nix hash
             27. 8.5.27. nix hash file
             28. 8.5.28. nix hash path
             29. 8.5.29. nix hash to-base16
             30. 8.5.30. nix hash to-base32
             31. 8.5.31. nix hash to-base64
             32. 8.5.32. nix hash to-sri
             33. 8.5.33. nix help
             34. 8.5.34. nix help-stores
             35. 8.5.35. nix key
             36. 8.5.36. nix key convert-secret-to-public
             37. 8.5.37. nix key generate-secret
             38. 8.5.38. nix log
             39. 8.5.39. nix nar
             40. 8.5.40. nix nar cat
             41. 8.5.41. nix nar dump-path
             42. 8.5.42. nix nar ls
             43. 8.5.43. nix nar pack
             44. 8.5.44. nix path-info
             45. 8.5.45. nix print-dev-env
             46. 8.5.46. nix profile
             47. 8.5.47. nix profile diff-closures
             48. 8.5.48. nix profile history
             49. 8.5.49. nix profile install
             50. 8.5.50. nix profile list
             51. 8.5.51. nix profile remove
             52. 8.5.52. nix profile rollback
             53. 8.5.53. nix profile upgrade
             54. 8.5.54. nix profile wipe-history
             55. 8.5.55. nix realisation
             56. 8.5.56. nix realisation info
             57. 8.5.57. nix registry
             58. 8.5.58. nix registry add
             59. 8.5.59. nix registry list
             60. 8.5.60. nix registry pin
             61. 8.5.61. nix registry remove
             62. 8.5.62. nix repl
             63. 8.5.63. nix run
             64. 8.5.64. nix search
             65. 8.5.65. nix shell
             66. 8.5.66. nix show-config
             67. 8.5.67. nix store
             68. 8.5.68. nix store add
             69. 8.5.69. nix store add-file
             70. 8.5.70. nix store add-path
             71. 8.5.71. nix store cat
             72. 8.5.72. nix store copy-log
             73. 8.5.73. nix store copy-sigs
             74. 8.5.74. nix store delete
             75. 8.5.75. nix store diff-closures
             76. 8.5.76. nix store dump-path
             77. 8.5.77. nix store gc
             78. 8.5.78. nix store info
             79. 8.5.79. nix store ls
             80. 8.5.80. nix store make-content-addressed
             81. 8.5.81. nix store optimise
             82. 8.5.82. nix store path-from-hash-part
             83. 8.5.83. nix store ping
             84. 8.5.84. nix store prefetch-file
             85. 8.5.85. nix store repair
             86. 8.5.86. nix store sign
             87. 8.5.87. nix store verify
             88. 8.5.88. nix upgrade-nix
             89. 8.5.89. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Protocols
   17.   1. 10.1. Serving Tarball Flakes
         2. 10.2. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.19 (2023-11-17)
         2. 13.2. Release 2.18 (2023-09-20)
         3. 13.3. Release 2.17 (2023-07-24)
         4. 13.4. Release 2.16 (2023-05-31)
         5. 13.5. Release 2.15 (2023-04-11)
         6. 13.6. Release 2.14 (2023-02-28)
         7. 13.7. Release 2.13 (2023-01-17)
         8. 13.8. Release 2.12 (2022-12-06)
         9. 13.9. Release 2.11 (2022-08-25)
        10. 13.10. Release 2.10 (2022-07-11)
        11. 13.11. Release 2.9 (2022-05-30)
        12. 13.12. Release 2.8 (2022-04-19)
        13. 13.13. Release 2.7 (2022-03-07)
        14. 13.14. Release 2.6 (2022-01-24)
        15. 13.15. Release 2.5 (2021-12-13)
        16. 13.16. Release 2.4 (2021-11-01)
        17. 13.17. Release 2.3 (2019-09-04)
        18. 13.18. Release 2.2 (2019-01-11)
        19. 13.19. Release 2.1 (2018-09-02)
        20. 13.20. Release 2.0 (2018-02-22)
        21. 13.21. Release 1.11.10 (2017-06-12)
        22. 13.22. Release 1.11 (2016-01-19)
        23. 13.23. Release 1.10 (2015-09-03)
        24. 13.24. Release 1.9 (2015-06-12)
        25. 13.25. Release 1.8 (2014-12-14)
        26. 13.26. Release 1.7 (2014-04-11)
        27. 13.27. Release 1.6.1 (2013-10-28)
        28. 13.28. Release 1.6 (2013-09-10)
        29. 13.29. Release 1.5.2 (2013-05-13)
        30. 13.30. Release 1.5 (2013-02-27)
        31. 13.31. Release 1.4 (2013-02-26)
        32. 13.32. Release 1.3 (2013-01-04)
        33. 13.33. Release 1.2 (2012-12-06)
        34. 13.34. Release 1.1 (2012-07-18)
        35. 13.35. Release 1.0 (2012-05-11)
        36. 13.36. Release 0.16 (2010-08-17)
        37. 13.37. Release 0.15 (2010-03-17)
        38. 13.38. Release 0.14 (2010-02-04)
        39. 13.39. Release 0.13 (2009-11-05)
        40. 13.40. Release 0.12 (2008-11-20)
        41. 13.41. Release 0.11 (2007-12-31)
        42. 13.42. Release 0.10.1 (2006-10-11)
        43. 13.43. Release 0.10 (2006-10-06)
        44. 13.44. Release 0.9.2 (2005-09-21)
        45. 13.45. Release 0.9.1 (2005-09-20)
        46. 13.46. Release 0.9 (2005-09-16)
        47. 13.47. Release 0.8.1 (2005-04-13)
        48. 13.48. Release 0.8 (2005-04-11)
        49. 13.49. Release 0.7 (2005-01-12)
        50. 13.50. Release 0.6 (2004-11-14)
        51. 13.51. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                            Release 0.8 (2005-04-11)

   NOTE: the hashing scheme in Nix 0.8 changed (as detailed below). As a
   result, nix-pull manifests and channels built for Nix 0.7 and below will
   not work anymore. However, the Nix expression language has not changed, so
   you can still build from source. Also, existing user environments continue
   to work. Nix 0.8 will automatically upgrade the database schema of
   previous installations when it is first run.

   If you get the error message

 you have an old-style manifest `/nix/var/nix/manifests/[...]'; please
 delete it

   you should delete previously downloaded manifests:

 $ rm /nix/var/nix/manifests/*

   If nix-channel gives the error message

 manifest `http://catamaran.labs.cs.uu.nl/dist/nix/channels/[channel]/MANIFEST'
 is too old (i.e., for Nix <= 0.7)

   then you should unsubscribe from the offending channel (nix-channel
   --remove URL; leave out /MANIFEST), and subscribe to the same URL, with
   channels replaced by channels-v3 (e.g.,
   http://catamaran.labs.cs.uu.nl/dist/nix/channels-v3/nixpkgs-unstable).

   Nix 0.8 has the following improvements:

     * The cryptographic hashes used in store paths are now 160 bits long,
       but encoded in base-32 so that they are still only 32 characters long
       (e.g., /nix/store/csw87wag8bqlqk7ipllbwypb14xainap-atk-1.9.0). (This
       is actually a 160 bit truncation of a SHA-256 hash.)

     * Big cleanups and simplifications of the basic store semantics. The
       notion of “closure store expressions” is gone (and so is the notion of
       “successors”); the file system references of a store path are now just
       stored in the database.

       For instance, given any store path, you can query its closure:

 $ nix-store -qR $(which firefox)
 ... lots of paths ...

       Also, Nix now remembers for each store path the derivation that built
       it (the “deriver”):

 $ nix-store -qR $(which firefox)
 /nix/store/4b0jx7vq80l9aqcnkszxhymsf1ffa5jd-firefox-1.0.1.drv

       So to see the build-time dependencies, you can do

 $ nix-store -qR $(nix-store -qd $(which firefox))

       or, in a nicer format:

 $ nix-store -q --tree $(nix-store -qd $(which firefox))

       File system references are also stored in reverse. For instance, you
       can query all paths that directly or indirectly use a certain Glibc:

 $ nix-store -q --referrers-closure \
     /nix/store/8lz9yc6zgmc0vlqmn2ipcpkjlmbi51vv-glibc-2.3.4

     * The concept of fixed-output derivations has been formalised.
       Previously, functions such as fetchurl in Nixpkgs used a hack (namely,
       explicitly specifying a store path hash) to prevent changes to, say,
       the URL of the file from propagating upwards through the dependency
       graph, causing rebuilds of everything. This can now be done cleanly by
       specifying the outputHash and outputHashAlgo attributes. Nix itself
       checks that the content of the output has the specified hash. (This is
       important for maintaining certain invariants necessary for future work
       on secure shared stores.)

     * One-click installation :-) It is now possible to install any top-level
       component in Nixpkgs directly, through the web — see, e.g.,
       http://catamaran.labs.cs.uu.nl/dist/nixpkgs-0.8/. All you have to do
       is associate /nix/bin/nix-install-package with the MIME type
       application/nix-package (or the extension .nixpkg), and clicking on a
       package link will cause it to be installed, with all appropriate
       dependencies. If you just want to install some specific application,
       this is easier than subscribing to a channel.

     * nix-store -r PATHS now builds all the derivations PATHS in parallel.
       Previously it did them sequentially (though exploiting possible
       parallelism between subderivations). This is nice for build farms.

     * nix-channel has new operations --list and --remove.

     * New ways of installing components into user environments:

          * Copy from another user environment:

 $ nix-env -i --from-profile .../other-profile firefox

          * Install a store derivation directly (bypassing the Nix expression
            language entirely):

 $ nix-env -i /nix/store/z58v41v21xd3...-aterm-2.3.1.drv

            (This is used to implement nix-install-package, which is
            therefore immune to evolution in the Nix expression language.)

          * Install an already built store path directly:

 $ nix-env -i /nix/store/hsyj5pbn0d9i...-aterm-2.3.1

          * Install the result of a Nix expression specified as a
            command-line argument:

 $ nix-env -f .../i686-linux.nix -i -E 'x: x.firefoxWrapper'

            The difference with the normal installation mode is that -E does
            not use the name attributes of derivations. Therefore, this can
            be used to disambiguate multiple derivations with the same name.

     * A hash of the contents of a store path is now stored in the database
       after a successful build. This allows you to check whether store paths
       have been tampered with: nix-store --verify --check-contents.

     * Implemented a concurrent garbage collector. It is now always safe to
       run the garbage collector, even if other Nix operations are happening
       simultaneously.

       However, there can still be GC races if you use nix-instantiate and
       nix-store --realise directly to build things. To prevent races, use
       the --add-root flag of those commands.

     * The garbage collector now finally deletes paths in the right order
       (i.e., topologically sorted under the “references” relation), thus
       making it safe to interrupt the collector without risking a store that
       violates the closure invariant.

     * Likewise, the substitute mechanism now downloads files in the right
       order, thus preserving the closure invariant at all times.

     * The result of nix-build is now registered as a root of the garbage
       collector. If the ./result link is deleted, the GC root disappears
       automatically.

     * The behaviour of the garbage collector can be changed globally by
       setting options in /nix/etc/nix/nix.conf.

          * gc-keep-derivations specifies whether deriver links should be
            followed when searching for live paths.

          * gc-keep-outputs specifies whether outputs of derivations should
            be followed when searching for live paths.

          * env-keep-derivations specifies whether user environments should
            store the paths of derivations when they are added (thus keeping
            the derivations alive).

     * New nix-env query flags --drv-path and --out-path.

     * fetchurl allows SHA-1 and SHA-256 in addition to MD5. Just specify the
       attribute sha1 or sha256 instead of md5.

     * Manual updates.
