   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
         4. 4.4. Store Types
         5.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental SSH Store
              3. 4.4.3. Experimental SSH Store with filesytem mounted
              4. 4.4.4. HTTP Binary Cache Store
              5. 4.4.5. Local Binary Cache Store
              6. 4.4.6. Local Daemon Store
              7. 4.4.7. Local Store
              8. 4.4.8. S3 Binary Cache Store
              9. 4.4.9. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix eval
             15. 8.5.15. nix flake
             16. 8.5.16. nix flake archive
             17. 8.5.17. nix flake check
             18. 8.5.18. nix flake clone
             19. 8.5.19. nix flake info
             20. 8.5.20. nix flake init
             21. 8.5.21. nix flake lock
             22. 8.5.22. nix flake metadata
             23. 8.5.23. nix flake new
             24. 8.5.24. nix flake prefetch
             25. 8.5.25. nix flake show
             26. 8.5.26. nix flake update
             27. 8.5.27. nix fmt
             28. 8.5.28. nix hash
             29. 8.5.29. nix hash convert
             30. 8.5.30. nix hash file
             31. 8.5.31. nix hash path
             32. 8.5.32. nix hash to-base16
             33. 8.5.33. nix hash to-base32
             34. 8.5.34. nix hash to-base64
             35. 8.5.35. nix hash to-sri
             36. 8.5.36. nix help
             37. 8.5.37. nix help-stores
             38. 8.5.38. nix key
             39. 8.5.39. nix key convert-secret-to-public
             40. 8.5.40. nix key generate-secret
             41. 8.5.41. nix log
             42. 8.5.42. nix nar
             43. 8.5.43. nix nar cat
             44. 8.5.44. nix nar dump-path
             45. 8.5.45. nix nar ls
             46. 8.5.46. nix nar pack
             47. 8.5.47. nix path-info
             48. 8.5.48. nix print-dev-env
             49. 8.5.49. nix profile
             50. 8.5.50. nix profile diff-closures
             51. 8.5.51. nix profile history
             52. 8.5.52. nix profile install
             53. 8.5.53. nix profile list
             54. 8.5.54. nix profile remove
             55. 8.5.55. nix profile rollback
             56. 8.5.56. nix profile upgrade
             57. 8.5.57. nix profile wipe-history
             58. 8.5.58. nix realisation
             59. 8.5.59. nix realisation info
             60. 8.5.60. nix registry
             61. 8.5.61. nix registry add
             62. 8.5.62. nix registry list
             63. 8.5.63. nix registry pin
             64. 8.5.64. nix registry remove
             65. 8.5.65. nix repl
             66. 8.5.66. nix run
             67. 8.5.67. nix search
             68. 8.5.68. nix shell
             69. 8.5.69. nix store
             70. 8.5.70. nix store add
             71. 8.5.71. nix store add-file
             72. 8.5.72. nix store add-path
             73. 8.5.73. nix store cat
             74. 8.5.74. nix store copy-log
             75. 8.5.75. nix store copy-sigs
             76. 8.5.76. nix store delete
             77. 8.5.77. nix store diff-closures
             78. 8.5.78. nix store dump-path
             79. 8.5.79. nix store gc
             80. 8.5.80. nix store info
             81. 8.5.81. nix store ls
             82. 8.5.82. nix store make-content-addressed
             83. 8.5.83. nix store optimise
             84. 8.5.84. nix store path-from-hash-part
             85. 8.5.85. nix store ping
             86. 8.5.86. nix store prefetch-file
             87. 8.5.87. nix store repair
             88. 8.5.88. nix store sign
             89. 8.5.89. nix store verify
             90. 8.5.90. nix upgrade-nix
             91. 8.5.91. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.21 (2024-03-11)
         2. 13.2. Release 2.20 (2024-01-29)
         3. 13.3. Release 2.19 (2023-11-17)
         4. 13.4. Release 2.18 (2023-09-20)
         5. 13.5. Release 2.17 (2023-07-24)
         6. 13.6. Release 2.16 (2023-05-31)
         7. 13.7. Release 2.15 (2023-04-11)
         8. 13.8. Release 2.14 (2023-02-28)
         9. 13.9. Release 2.13 (2023-01-17)
        10. 13.10. Release 2.12 (2022-12-06)
        11. 13.11. Release 2.11 (2022-08-25)
        12. 13.12. Release 2.10 (2022-07-11)
        13. 13.13. Release 2.9 (2022-05-30)
        14. 13.14. Release 2.8 (2022-04-19)
        15. 13.15. Release 2.7 (2022-03-07)
        16. 13.16. Release 2.6 (2022-01-24)
        17. 13.17. Release 2.5 (2021-12-13)
        18. 13.18. Release 2.4 (2021-11-01)
        19. 13.19. Release 2.3 (2019-09-04)
        20. 13.20. Release 2.2 (2019-01-11)
        21. 13.21. Release 2.1 (2018-09-02)
        22. 13.22. Release 2.0 (2018-02-22)
        23. 13.23. Release 1.11.10 (2017-06-12)
        24. 13.24. Release 1.11 (2016-01-19)
        25. 13.25. Release 1.10 (2015-09-03)
        26. 13.26. Release 1.9 (2015-06-12)
        27. 13.27. Release 1.8 (2014-12-14)
        28. 13.28. Release 1.7 (2014-04-11)
        29. 13.29. Release 1.6.1 (2013-10-28)
        30. 13.30. Release 1.6 (2013-09-10)
        31. 13.31. Release 1.5.2 (2013-05-13)
        32. 13.32. Release 1.5 (2013-02-27)
        33. 13.33. Release 1.4 (2013-02-26)
        34. 13.34. Release 1.3 (2013-01-04)
        35. 13.35. Release 1.2 (2012-12-06)
        36. 13.36. Release 1.1 (2012-07-18)
        37. 13.37. Release 1.0 (2012-05-11)
        38. 13.38. Release 0.16 (2010-08-17)
        39. 13.39. Release 0.15 (2010-03-17)
        40. 13.40. Release 0.14 (2010-02-04)
        41. 13.41. Release 0.13 (2009-11-05)
        42. 13.42. Release 0.12 (2008-11-20)
        43. 13.43. Release 0.11 (2007-12-31)
        44. 13.44. Release 0.10.1 (2006-10-11)
        45. 13.45. Release 0.10 (2006-10-06)
        46. 13.46. Release 0.9.2 (2005-09-21)
        47. 13.47. Release 0.9.1 (2005-09-20)
        48. 13.48. Release 0.9 (2005-09-16)
        49. 13.49. Release 0.8.1 (2005-04-13)
        50. 13.50. Release 0.8 (2005-04-11)
        51. 13.51. Release 0.7 (2005-01-12)
        52. 13.52. Release 0.6 (2004-11-14)
        53. 13.53. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                   Data Types

Primitives

     * String

       Strings can be written in three ways.

       The most common way is to enclose the string between double quotes,
       e.g., "foo bar". Strings can span multiple lines. The special
       characters " and \ and the character sequence ${ must be escaped by
       prefixing them with a backslash (\). Newlines, carriage returns and
       tabs can be written as \n, \r and \t, respectively.

       You can include the results of other expressions into a string by
       enclosing them in ${ }, a feature known as string interpolation.

       The second way to write string literals is as an indented string,
       which is enclosed between pairs of double single-quotes, like so:

 ''
   This is the first line.
   This is the second line.
     This is the third line.
 ''

       This kind of string literal intelligently strips indentation from the
       start of each line. To be precise, it strips from each line a number
       of spaces equal to the minimal indentation of the string as a whole
       (disregarding the indentation of empty lines). For instance, the first
       and second line are indented two spaces, while the third line is
       indented four spaces. Thus, two spaces are stripped from each line, so
       the resulting string is

 "This is the first line.\nThis is the second line.\n  This is the third line.\n"

       Note that the whitespace and newline following the opening '' is
       ignored if there is no non-whitespace text on the initial line.

       Indented strings support string interpolation.

       Since ${ and '' have special meaning in indented strings, you need a
       way to quote them. $ can be escaped by prefixing it with '' (that is,
       two single quotes), i.e., ''$. '' can be escaped by prefixing it with
       ', i.e., '''. $ removes any special meaning from the following $.
       Linefeed, carriage-return and tab characters can be written as ''\n,
       ''\r, ''\t, and ''\ escapes any other character.

       Indented strings are primarily useful in that they allow multi-line
       string literals to follow the indentation of the enclosing Nix
       expression, and that less escaping is typically necessary for strings
       representing languages such as shell scripts and configuration files
       because '' is much less common than ". Example:

 stdenv.mkDerivation {
   ...
   postInstall =
     ''
       mkdir $out/bin $out/etc
       cp foo $out/bin
       echo "Hello World" > $out/etc/foo.conf
       ${if enableBar then "cp bar $out/bin" else ""}
     '';
   ...
 }

       Finally, as a convenience, URIs as defined in appendix B of RFC 2396
       can be written as is, without quotes. For instance, the string
       "http://example.org/foo.tar.bz2" can also be written as
       http://example.org/foo.tar.bz2.

     * Number

       Numbers, which can be integers (like 123) or floating point (like
       123.43 or .27e13).

       See arithmetic and comparison operators for semantics.

     * Path

       Paths, e.g., /bin/sh or ./builder.sh. A path must contain at least one
       slash to be recognised as such. For instance, builder.sh is not a
       path: it's parsed as an expression that selects the attribute sh from
       the variable builder. If the file name is relative, i.e., if it does
       not begin with a slash, it is made absolute at parse time relative to
       the directory of the Nix expression that contained it. For instance,
       if a Nix expression in /foo/bar/bla.nix refers to ../xyzzy/fnord.nix,
       the absolute path is /foo/xyzzy/fnord.nix.

       If the first component of a path is a ~, it is interpreted as if the
       rest of the path were relative to the user's home directory. e.g.
       ~/foo would be equivalent to /home/edolstra/foo for a user whose home
       directory is /home/edolstra.

       For instance, evaluating "${./foo.txt}" will cause foo.txt in the
       current directory to be copied into the Nix store and result in the
       string "/nix/store/<hash>-foo.txt".

       Note that the Nix language assumes that all input files will remain
       unchanged while evaluating a Nix expression. For example, assume you
       used a file path in an interpolated string during a nix repl session.
       Later in the same session, after having changed the file contents,
       evaluating the interpolated string with the file path again might not
       return a new store path, since Nix might not re-read the file
       contents.

       Paths can include string interpolation and can themselves be
       interpolated in other expressions.

       At least one slash (/) must appear before any interpolated expression
       for the result to be recognized as a path.

       a.${foo}/b.${bar} is a syntactically valid division operation.
       ./a.${foo}/b.${bar} is a path.

       Lookup paths such as <nixpkgs> resolve to path values.

     * Boolean

       Booleans with values true and false.

     * Null

       The null value, denoted as null.

List

   Lists are formed by enclosing a whitespace-separated list of values
   between square brackets. For example,

 [ 123 ./foo.nix "abc" (f { x = y; }) ]

   defines a list of four elements, the last being the result of a call to
   the function f. Note that function calls have to be enclosed in
   parentheses. If they had been omitted, e.g.,

 [ 123 ./foo.nix "abc" f { x = y; } ]

   the result would be a list of five elements, the fourth one being a
   function and the fifth being a set.

   Note that lists are only lazy in values, and they are strict in length.

   Elements in a list can be accessed using builtins.elemAt.

Attribute Set

   An attribute set is a collection of name-value-pairs (called attributes)
   enclosed in curly brackets ({ }).

   An attribute name can be an identifier or a string. An identifier must
   start with a letter (a-z, A-Z) or underscore (_), and can otherwise
   contain letters (a-z, A-Z), numbers (0-9), underscores (_), apostrophes
   ('), or dashes (-).

     Syntax

     name = identifier | string
     identifier ~ [a-zA-Z_][a-zA-Z0-9_'-]*

   Names and values are separated by an equal sign (=). Each value is an
   arbitrary expression terminated by a semicolon (;).

     Syntax

     attrset = { [ name = expr ; ]... }

   Attributes can appear in any order. An attribute name may only occur once.

   Example:

 {
   x = 123;
   text = "Hello";
   y = f { bla = 456; };
 }

   This defines a set with attributes named x, text, y.

   Attributes can be accessed with the . operator.

   Example:

 { a = "Foo"; b = "Bar"; }.a

   This evaluates to "Foo".

   It is possible to provide a default value in an attribute selection using
   the or keyword.

   Example:

 { a = "Foo"; b = "Bar"; }.c or "Xyzzy"

 { a = "Foo"; b = "Bar"; }.c.d.e.f.g or "Xyzzy"

   will both evaluate to "Xyzzy" because there is no c attribute in the set.

   You can use arbitrary double-quoted strings as attribute names:

 { "$!@#?" = 123; }."$!@#?"

 let bar = "bar"; in
 { "foo ${bar}" = 123; }."foo ${bar}"

   Both will evaluate to 123.

   Attribute names support string interpolation:

 let bar = "foo"; in
 { foo = 123; }.${bar}

 let bar = "foo"; in
 { ${bar} = 123; }.foo

   Both will evaluate to 123.

   In the special case where an attribute name inside of a set declaration
   evaluates to null (which is normally an error, as null cannot be coerced
   to a string), that attribute is simply not added to the set:

 { ${if foo then "bar" else null} = true; }

   This will evaluate to {} if foo evaluates to false.

   A set that has a __functor attribute whose value is callable (i.e. is
   itself a function or a set with a __functor attribute whose value is
   callable) can be applied as if it were a function, with the set itself
   passed in first , e.g.,

 let add = { __functor = self: x: x + self.x; };
     inc = add // { x = 1; };
 in inc 1

   evaluates to 2. This can be used to attach metadata to a function without
   the caller needing to treat it specially, or to implement a form of
   object-oriented programming, for example.
