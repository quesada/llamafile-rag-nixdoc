   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
         4. 4.4. Store Types
         5.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental SSH Store
              3. 4.4.3. Experimental SSH Store with filesytem mounted
              4. 4.4.4. HTTP Binary Cache Store
              5. 4.4.5. Local Binary Cache Store
              6. 4.4.6. Local Daemon Store
              7. 4.4.7. Local Store
              8. 4.4.8. S3 Binary Cache Store
              9. 4.4.9. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix eval
             15. 8.5.15. nix flake
             16. 8.5.16. nix flake archive
             17. 8.5.17. nix flake check
             18. 8.5.18. nix flake clone
             19. 8.5.19. nix flake info
             20. 8.5.20. nix flake init
             21. 8.5.21. nix flake lock
             22. 8.5.22. nix flake metadata
             23. 8.5.23. nix flake new
             24. 8.5.24. nix flake prefetch
             25. 8.5.25. nix flake show
             26. 8.5.26. nix flake update
             27. 8.5.27. nix fmt
             28. 8.5.28. nix hash
             29. 8.5.29. nix hash convert
             30. 8.5.30. nix hash file
             31. 8.5.31. nix hash path
             32. 8.5.32. nix hash to-base16
             33. 8.5.33. nix hash to-base32
             34. 8.5.34. nix hash to-base64
             35. 8.5.35. nix hash to-sri
             36. 8.5.36. nix help
             37. 8.5.37. nix help-stores
             38. 8.5.38. nix key
             39. 8.5.39. nix key convert-secret-to-public
             40. 8.5.40. nix key generate-secret
             41. 8.5.41. nix log
             42. 8.5.42. nix nar
             43. 8.5.43. nix nar cat
             44. 8.5.44. nix nar dump-path
             45. 8.5.45. nix nar ls
             46. 8.5.46. nix nar pack
             47. 8.5.47. nix path-info
             48. 8.5.48. nix print-dev-env
             49. 8.5.49. nix profile
             50. 8.5.50. nix profile diff-closures
             51. 8.5.51. nix profile history
             52. 8.5.52. nix profile install
             53. 8.5.53. nix profile list
             54. 8.5.54. nix profile remove
             55. 8.5.55. nix profile rollback
             56. 8.5.56. nix profile upgrade
             57. 8.5.57. nix profile wipe-history
             58. 8.5.58. nix realisation
             59. 8.5.59. nix realisation info
             60. 8.5.60. nix registry
             61. 8.5.61. nix registry add
             62. 8.5.62. nix registry list
             63. 8.5.63. nix registry pin
             64. 8.5.64. nix registry remove
             65. 8.5.65. nix repl
             66. 8.5.66. nix run
             67. 8.5.67. nix search
             68. 8.5.68. nix shell
             69. 8.5.69. nix store
             70. 8.5.70. nix store add
             71. 8.5.71. nix store add-file
             72. 8.5.72. nix store add-path
             73. 8.5.73. nix store cat
             74. 8.5.74. nix store copy-log
             75. 8.5.75. nix store copy-sigs
             76. 8.5.76. nix store delete
             77. 8.5.77. nix store diff-closures
             78. 8.5.78. nix store dump-path
             79. 8.5.79. nix store gc
             80. 8.5.80. nix store info
             81. 8.5.81. nix store ls
             82. 8.5.82. nix store make-content-addressed
             83. 8.5.83. nix store optimise
             84. 8.5.84. nix store path-from-hash-part
             85. 8.5.85. nix store ping
             86. 8.5.86. nix store prefetch-file
             87. 8.5.87. nix store repair
             88. 8.5.88. nix store sign
             89. 8.5.89. nix store verify
             90. 8.5.90. nix upgrade-nix
             91. 8.5.91. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Release Notes
   22.   1. 13.1. Release 2.21 (2024-03-11)
         2. 13.2. Release 2.20 (2024-01-29)
         3. 13.3. Release 2.19 (2023-11-17)
         4. 13.4. Release 2.18 (2023-09-20)
         5. 13.5. Release 2.17 (2023-07-24)
         6. 13.6. Release 2.16 (2023-05-31)
         7. 13.7. Release 2.15 (2023-04-11)
         8. 13.8. Release 2.14 (2023-02-28)
         9. 13.9. Release 2.13 (2023-01-17)
        10. 13.10. Release 2.12 (2022-12-06)
        11. 13.11. Release 2.11 (2022-08-25)
        12. 13.12. Release 2.10 (2022-07-11)
        13. 13.13. Release 2.9 (2022-05-30)
        14. 13.14. Release 2.8 (2022-04-19)
        15. 13.15. Release 2.7 (2022-03-07)
        16. 13.16. Release 2.6 (2022-01-24)
        17. 13.17. Release 2.5 (2021-12-13)
        18. 13.18. Release 2.4 (2021-11-01)
        19. 13.19. Release 2.3 (2019-09-04)
        20. 13.20. Release 2.2 (2019-01-11)
        21. 13.21. Release 2.1 (2018-09-02)
        22. 13.22. Release 2.0 (2018-02-22)
        23. 13.23. Release 1.11.10 (2017-06-12)
        24. 13.24. Release 1.11 (2016-01-19)
        25. 13.25. Release 1.10 (2015-09-03)
        26. 13.26. Release 1.9 (2015-06-12)
        27. 13.27. Release 1.8 (2014-12-14)
        28. 13.28. Release 1.7 (2014-04-11)
        29. 13.29. Release 1.6.1 (2013-10-28)
        30. 13.30. Release 1.6 (2013-09-10)
        31. 13.31. Release 1.5.2 (2013-05-13)
        32. 13.32. Release 1.5 (2013-02-27)
        33. 13.33. Release 1.4 (2013-02-26)
        34. 13.34. Release 1.3 (2013-01-04)
        35. 13.35. Release 1.2 (2012-12-06)
        36. 13.36. Release 1.1 (2012-07-18)
        37. 13.37. Release 1.0 (2012-05-11)
        38. 13.38. Release 0.16 (2010-08-17)
        39. 13.39. Release 0.15 (2010-03-17)
        40. 13.40. Release 0.14 (2010-02-04)
        41. 13.41. Release 0.13 (2009-11-05)
        42. 13.42. Release 0.12 (2008-11-20)
        43. 13.43. Release 0.11 (2007-12-31)
        44. 13.44. Release 0.10.1 (2006-10-11)
        45. 13.45. Release 0.10 (2006-10-06)
        46. 13.46. Release 0.9.2 (2005-09-21)
        47. 13.47. Release 0.9.1 (2005-09-20)
        48. 13.48. Release 0.9 (2005-09-16)
        49. 13.49. Release 0.8.1 (2005-04-13)
        50. 13.50. Release 0.8 (2005-04-11)
        51. 13.51. Release 0.7 (2005-01-12)
        52. 13.52. Release 0.6 (2004-11-14)
        53. 13.53. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                           Release 0.11 (2007-12-31)

   Nix 0.11 has many improvements over the previous stable release. The most
   important improvement is secure multi-user support. It also features many
   usability enhancements and language extensions, many of them prompted by
   NixOS, the purely functional Linux distribution based on Nix. Here is an
   (incomplete) list:

     * Secure multi-user support. A single Nix store can now be shared
       between multiple (possible untrusted) users. This is an important
       feature for NixOS, where it allows non-root users to install software.
       The old setuid method for sharing a store between multiple users has
       been removed. Details for setting up a multi-user store can be found
       in the manual.

     * The new command nix-copy-closure gives you an easy and efficient way
       to exchange software between machines. It copies the missing parts of
       the closure of a set of store path to or from a remote machine via
       ssh.

     * A new kind of string literal: strings between double single-quotes
       ('') have indentation “intelligently” removed. This allows large
       strings (such as shell scripts or configuration file fragments in
       NixOS) to cleanly follow the indentation of the surrounding
       expression. It also requires much less escaping, since '' is less
       common in most languages than ".

     * nix-env --set modifies the current generation of a profile so that it
       contains exactly the specified derivation, and nothing else. For
       example, nix-env -p /nix/var/nix/profiles/browser --set firefox lets
       the profile named browser contain just Firefox.

     * nix-env now maintains meta-information about installed packages in
       profiles. The meta-information is the contents of the meta attribute
       of derivations, such as description or homepage. The command nix-env
       -q --xml --meta shows all meta-information.

     * nix-env now uses the meta.priority attribute of derivations to resolve
       filename collisions between packages. Lower priority values denote a
       higher priority. For instance, the GCC wrapper package and the
       Binutils package in Nixpkgs both have a file bin/ld, so previously if
       you tried to install both you would get a collision. Now, on the other
       hand, the GCC wrapper declares a higher priority than Binutils, so the
       former’s bin/ld is symlinked in the user environment.

     * nix-env -i / -u: instead of breaking package ties by version, break
       them by priority and version number. That is, if there are multiple
       packages with the same name, then pick the package with the highest
       priority, and only use the version if there are multiple packages with
       the same priority.

       This makes it possible to mark specific versions/variant in Nixpkgs
       more or less desirable than others. A typical example would be a beta
       version of some package (e.g., gcc-4.2.0rc1) which should not be
       installed even though it is the highest version, except when it is
       explicitly selected (e.g., nix-env -i gcc-4.2.0rc1).

     * nix-env --set-flag allows meta attributes of installed packages to be
       modified. There are several attributes that can be usefully modified,
       because they affect the behaviour of nix-env or the user environment
       build script:

          * meta.priority can be changed to resolve filename clashes (see
            above).

          * meta.keep can be set to true to prevent the package from being
            upgraded or replaced. Useful if you want to hang on to an older
            version of a package.

          * meta.active can be set to false to “disable” the package. That
            is, no symlinks will be generated to the files of the package,
            but it remains part of the profile (so it won’t be
            garbage-collected). Set it back to true to re-enable the package.

     * nix-env -q now has a flag --prebuilt-only (-b) that causes nix-env to
       show only those derivations whose output is already in the Nix store
       or that can be substituted (i.e., downloaded from somewhere). In other
       words, it shows the packages that can be installed “quickly”, i.e.,
       don’t need to be built from source. The -b flag is also available in
       nix-env -i and nix-env -u to filter out derivations for which no
       pre-built binary is available.

     * The new option --argstr (in nix-env, nix-instantiate and nix-build) is
       like --arg, except that the value is a string. For example, --argstr
       system i686-linux is equivalent to --arg system "i686-linux" (note
       that --argstr prevents annoying quoting around shell arguments).

     * nix-store has a new operation --read-log (-l) paths that shows the
       build log of the given paths.

     * Nix now uses Berkeley DB 4.5. The database is upgraded automatically,
       but you should be careful not to use old versions of Nix that still
       use Berkeley DB 4.4.

     * The option --max-silent-time (corresponding to the configuration
       setting build-max-silent-time) allows you to set a timeout on builds —
       if a build produces no output on stdout or stderr for the given number
       of seconds, it is terminated. This is useful for recovering
       automatically from builds that are stuck in an infinite loop.

     * nix-channel: each subscribed channel is its own attribute in the
       top-level expression generated for the channel. This allows
       disambiguation (e.g. nix-env -i -A nixpkgs_unstable.firefox).

     * The substitutes table has been removed from the database. This makes
       operations such as nix-pull and nix-channel --update much, much
       faster.

     * nix-pull now supports bzip2-compressed manifests. This speeds up
       channels.

     * nix-prefetch-url now has a limited form of caching. This is used by
       nix-channel to prevent unnecessary downloads when the channel hasn’t
       changed.

     * nix-prefetch-url now by default computes the SHA-256 hash of the file
       instead of the MD5 hash. In calls to fetchurl you should pass the
       sha256 attribute instead of md5. You can pass either a hexadecimal or
       a base-32 encoding of the hash.

     * Nix can now perform builds in an automatically generated “chroot”.
       This prevents a builder from accessing stuff outside of the Nix store,
       and thus helps ensure purity. This is an experimental feature.

     * The new command nix-store --optimise reduces Nix store disk space
       usage by finding identical files in the store and hard-linking them to
       each other. It typically reduces the size of the store by something
       like 25-35%.

     * ~/.nix-defexpr can now be a directory, in which case the Nix
       expressions in that directory are combined into an attribute set, with
       the file names used as the names of the attributes. The command
       nix-env --import (which set the ~/.nix-defexpr symlink) is removed.

     * Derivations can specify the new special attribute allowedReferences to
       enforce that the references in the output of a derivation are a subset
       of a declared set of paths. For example, if allowedReferences is an
       empty list, then the output must not have any references. This is used
       in NixOS to check that generated files such as initial ramdisks for
       booting Linux don’t have any dependencies.

     * The new attribute exportReferencesGraph allows builders access to the
       references graph of their inputs. This is used in NixOS for tasks such
       as generating ISO-9660 images that contain a Nix store populated with
       the closure of certain paths.

     * Fixed-output derivations (like fetchurl) can define the attribute
       impureEnvVars to allow external environment variables to be passed to
       builders. This is used in Nixpkgs to support proxy configuration,
       among other things.

     * Several new built-in functions: builtins.attrNames,
       builtins.filterSource, builtins.isAttrs, builtins.isFunction,
       builtins.listToAttrs, builtins.stringLength, builtins.sub,
       builtins.substring, throw, builtins.trace, builtins.readFile.
