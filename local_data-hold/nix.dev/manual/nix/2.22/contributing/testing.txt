   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
         4. 4.4. Store Types
         5.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesytem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix eval
             15. 8.5.15. nix flake
             16. 8.5.16. nix flake archive
             17. 8.5.17. nix flake check
             18. 8.5.18. nix flake clone
             19. 8.5.19. nix flake info
             20. 8.5.20. nix flake init
             21. 8.5.21. nix flake lock
             22. 8.5.22. nix flake metadata
             23. 8.5.23. nix flake new
             24. 8.5.24. nix flake prefetch
             25. 8.5.25. nix flake show
             26. 8.5.26. nix flake update
             27. 8.5.27. nix fmt
             28. 8.5.28. nix hash
             29. 8.5.29. nix hash convert
             30. 8.5.30. nix hash file
             31. 8.5.31. nix hash path
             32. 8.5.32. nix hash to-base16
             33. 8.5.33. nix hash to-base32
             34. 8.5.34. nix hash to-base64
             35. 8.5.35. nix hash to-sri
             36. 8.5.36. nix help
             37. 8.5.37. nix help-stores
             38. 8.5.38. nix key
             39. 8.5.39. nix key convert-secret-to-public
             40. 8.5.40. nix key generate-secret
             41. 8.5.41. nix log
             42. 8.5.42. nix nar
             43. 8.5.43. nix nar cat
             44. 8.5.44. nix nar dump-path
             45. 8.5.45. nix nar ls
             46. 8.5.46. nix nar pack
             47. 8.5.47. nix path-info
             48. 8.5.48. nix print-dev-env
             49. 8.5.49. nix profile
             50. 8.5.50. nix profile diff-closures
             51. 8.5.51. nix profile history
             52. 8.5.52. nix profile install
             53. 8.5.53. nix profile list
             54. 8.5.54. nix profile remove
             55. 8.5.55. nix profile rollback
             56. 8.5.56. nix profile upgrade
             57. 8.5.57. nix profile wipe-history
             58. 8.5.58. nix realisation
             59. 8.5.59. nix realisation info
             60. 8.5.60. nix registry
             61. 8.5.61. nix registry add
             62. 8.5.62. nix registry list
             63. 8.5.63. nix registry pin
             64. 8.5.64. nix registry remove
             65. 8.5.65. nix repl
             66. 8.5.66. nix run
             67. 8.5.67. nix search
             68. 8.5.68. nix shell
             69. 8.5.69. nix store
             70. 8.5.70. nix store add
             71. 8.5.71. nix store add-file
             72. 8.5.72. nix store add-path
             73. 8.5.73. nix store cat
             74. 8.5.74. nix store copy-log
             75. 8.5.75. nix store copy-sigs
             76. 8.5.76. nix store delete
             77. 8.5.77. nix store diff-closures
             78. 8.5.78. nix store dump-path
             79. 8.5.79. nix store gc
             80. 8.5.80. nix store info
             81. 8.5.81. nix store ls
             82. 8.5.82. nix store make-content-addressed
             83. 8.5.83. nix store optimise
             84. 8.5.84. nix store path-from-hash-part
             85. 8.5.85. nix store ping
             86. 8.5.86. nix store prefetch-file
             87. 8.5.87. nix store repair
             88. 8.5.88. nix store sign
             89. 8.5.89. nix store verify
             90. 8.5.90. nix upgrade-nix
             91. 8.5.91. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Releases
   22.   1. 13.1. Release 2.22 (2024-04-23)
         2. 13.2. Release 2.21 (2024-03-11)
         3. 13.3. Release 2.20 (2024-01-29)
         4. 13.4. Release 2.19 (2023-11-17)
         5. 13.5. Release 2.18 (2023-09-20)
         6. 13.6. Release 2.17 (2023-07-24)
         7. 13.7. Release 2.16 (2023-05-31)
         8. 13.8. Release 2.15 (2023-04-11)
         9. 13.9. Release 2.14 (2023-02-28)
        10. 13.10. Release 2.13 (2023-01-17)
        11. 13.11. Release 2.12 (2022-12-06)
        12. 13.12. Release 2.11 (2022-08-25)
        13. 13.13. Release 2.10 (2022-07-11)
        14. 13.14. Release 2.9 (2022-05-30)
        15. 13.15. Release 2.8 (2022-04-19)
        16. 13.16. Release 2.7 (2022-03-07)
        17. 13.17. Release 2.6 (2022-01-24)
        18. 13.18. Release 2.5 (2021-12-13)
        19. 13.19. Release 2.4 (2021-11-01)
        20. 13.20. Release 2.3 (2019-09-04)
        21. 13.21. Release 2.2 (2019-01-11)
        22. 13.22. Release 2.1 (2018-09-02)
        23. 13.23. Release 2.0 (2018-02-22)
        24. 13.24. Release 1.11.10 (2017-06-12)
        25. 13.25. Release 1.11 (2016-01-19)
        26. 13.26. Release 1.10 (2015-09-03)
        27. 13.27. Release 1.9 (2015-06-12)
        28. 13.28. Release 1.8 (2014-12-14)
        29. 13.29. Release 1.7 (2014-04-11)
        30. 13.30. Release 1.6.1 (2013-10-28)
        31. 13.31. Release 1.6 (2013-09-10)
        32. 13.32. Release 1.5.2 (2013-05-13)
        33. 13.33. Release 1.5 (2013-02-27)
        34. 13.34. Release 1.4 (2013-02-26)
        35. 13.35. Release 1.3 (2013-01-04)
        36. 13.36. Release 1.2 (2012-12-06)
        37. 13.37. Release 1.1 (2012-07-18)
        38. 13.38. Release 1.0 (2012-05-11)
        39. 13.39. Release 0.16 (2010-08-17)
        40. 13.40. Release 0.15 (2010-03-17)
        41. 13.41. Release 0.14 (2010-02-04)
        42. 13.42. Release 0.13 (2009-11-05)
        43. 13.43. Release 0.12 (2008-11-20)
        44. 13.44. Release 0.11 (2007-12-31)
        45. 13.45. Release 0.10.1 (2006-10-11)
        46. 13.46. Release 0.10 (2006-10-06)
        47. 13.47. Release 0.9.2 (2005-09-21)
        48. 13.48. Release 0.9.1 (2005-09-20)
        49. 13.49. Release 0.9 (2005-09-16)
        50. 13.50. Release 0.8.1 (2005-04-13)
        51. 13.51. Release 0.8 (2005-04-11)
        52. 13.52. Release 0.7 (2005-01-12)
        53. 13.53. Release 0.6 (2004-11-14)
        54. 13.54. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                 Running tests

Coverage analysis

   A coverage analysis report is available online You can build it yourself:

 # nix build .#hydraJobs.coverage
 # xdg-open ./result/coverage/index.html

   Extensive records of build metrics, such as test coverage over time, are
   also available online.

Unit-tests

   The unit tests are defined using the googletest and rapidcheck frameworks.

  Source and header layout

     An example of some files, demonstrating much of what is described below

 src
 ├── libexpr
 │   ├── local.mk
 │   ├── value/context.hh
 │   ├── value/context.cc
 │   …
 │
 ├── tests
 │   │
 │   …
 │   └── unit
 │       ├── libutil
 │       │   ├── local.mk
 │       │   …
 │       │   └── data
 │       │       ├── git/tree.txt
 │       │       …
 │       │
 │       ├── libexpr-support
 │       │   ├── local.mk
 │       │   └── tests
 │       │       ├── value/context.hh
 │       │       ├── value/context.cc
 │       │       …
 │       │
 │       ├── libexpr
 │       …   ├── local.mk
 │           ├── value/context.cc
 │           …
 …

   The tests for each Nix library (libnixexpr, libnixstore, etc..) live
   inside a directory tests/unit/${library_name_without-nix}. Given a
   interface (header) and implementation pair in the original library, say,
   src/libexpr/value/context.{hh,cc}, we write tests for it in
   tests/unit/libexpr/tests/value/context.cc, and (possibly) declare/define
   additional interfaces for testing purposes in
   tests/unit/libexpr-support/tests/value/context.{hh,cc}.

   Data for unit tests is stored in a data subdir of the directory for each
   unit test executable. For example, libnixstore code is in src/libstore,
   and its test data is in tests/unit/libstore/data. The path to the
   tests/unit/data directory is passed to the unit test executable with the
   environment variable _NIX_TEST_UNIT_DATA. Note that each executable only
   gets the data for its tests.

   The unit test libraries are in tests/unit/${library_name_without-nix}-lib.
   All headers are in a tests subdirectory so they are included with #include
   "tests/".

   The use of all these separate directories for the unit tests might seem
   inconvenient, as for example the tests are not "right next to" the part of
   the code they are testing. But organizing the tests this way has one big
   benefit: there is no risk of any build-system wildcards for the library
   accidentally picking up test code that should not built and installed as
   part of the library.

  Running tests

   You can run the whole testsuite with make check, or the tests for a
   specific component with make libfoo-tests_RUN. Finer-grained filtering is
   also possible using the --gtest_filter command-line option, or the
   GTEST_FILTER environment variable, e.g. GTEST_FILTER='ErrorTraceTest.*'
   make check.

  Characterisation testing

   See functional characterisation testing for a broader discussion of
   characterisation testing.

   Like with the functional characterisation, _NIX_TEST_ACCEPT=1 is also
   used. For example:

 $ _NIX_TEST_ACCEPT=1 make libstore-tests_RUN
 ...
 [  SKIPPED ] WorkerProtoTest.string_read
 [  SKIPPED ] WorkerProtoTest.string_write
 [  SKIPPED ] WorkerProtoTest.storePath_read
 [  SKIPPED ] WorkerProtoTest.storePath_write
 ...

   will regenerate the "golden master" expected result for the libnixstore
   characterisation tests. The characterisation tests will mark themselves
   "skipped" since they regenerated the expected result instead of actually
   testing anything.

  Unit test support libraries

   There are headers and code which are not just used to test the library in
   question, but also downstream libraries. For example, we do property
   testing with the rapidcheck library. This requires writing Arbitrary
   "instances", which are used to describe how to generate values of a given
   type for the sake of running property tests. Because types contain other
   types, Arbitrary "instances" for some type are not just useful for testing
   that type, but also any other type that contains it. Downstream types
   frequently contain upstream types, so it is very important that we share
   arbitrary instances so that downstream libraries' property tests can also
   use them.

   It is important that these testing libraries don't contain any actual
   tests themselves. On some platforms they would be run as part of every
   test executable that uses them, which is redundant. On other platforms
   they wouldn't be run at all.

Functional tests

   The functional tests reside under the tests/functional directory and are
   listed in tests/functional/local.mk. Each test is a bash script.

  Running the whole test suite

   The whole test suite can be run with:

 $ make install && make installcheck
 ran test tests/functional/foo.sh... [PASS]
 ran test tests/functional/bar.sh... [PASS]
 ...

  Grouping tests

   Sometimes it is useful to group related tests so they can be easily run
   together without running the entire test suite. Each test group is in a
   subdirectory of tests. For example, tests/functional/ca/local.mk defines a
   ca test group for content-addressed derivation outputs.

   That test group can be run like this:

 $ make ca.test-group -j50
 ran test tests/functional/ca/nix-run.sh... [PASS]
 ran test tests/functional/ca/import-derivation.sh... [PASS]
 ...

   The test group is defined in Make like this:

 $(test-group-name)-tests := \
   $(d)/test0.sh \
   $(d)/test1.sh \
   ...

 install-tests-groups += $(test-group-name)

  Running individual tests

   Individual tests can be run with make:

 $ make tests/functional/${testName}.sh.test
 ran test tests/functional/${testName}.sh... [PASS]

   or without make:

 $ ./mk/run-test.sh tests/functional/${testName}.sh tests/functional/init.sh
 ran test tests/functional/${testName}.sh... [PASS]

   To see the complete output, one can also run:

 $ ./mk/debug-test.sh tests/functional/${testName}.sh tests/functional/init.sh
 +(${testName}.sh:1) foo
 output from foo
 +(${testName}.sh:2) bar
 output from bar
 ...

   The test script will then be traced with set -x and the output displayed
   as it happens, regardless of whether the test succeeds or fails.

  Debugging failing functional tests

   When a functional test fails, it usually does so somewhere in the middle
   of the script.

   To figure out what's wrong, it is convenient to run the test regularly up
   to the failing nix command, and then run that command with a debugger like
   GDB.

   For example, if the script looks like:

 foo
 nix blah blub
 bar

   edit it like so:

  foo
 -nix blah blub
 +gdb --args nix blah blub
  bar

   Then, running the test with ./mk/debug-test.sh will drop you into GDB once
   the script reaches that point:

 $ ./mk/debug-test.sh tests/functional/${testName}.sh tests/functional/init.sh
 ...
 + gdb blash blub
 GNU gdb (GDB) 12.1
 ...
 (gdb)

   One can debug the Nix invocation in all the usual ways. For example, enter
   run to start the Nix invocation.

  Troubleshooting

   Sometimes running tests in the development shell may leave artefacts in
   the local repository. To remove any traces of that:

 git clean -x --force tests

  Characterisation testing

   Occasionally, Nix utilizes a technique called Characterisation Testing as
   part of the functional tests. This technique is to include the exact
   output/behavior of a former version of Nix in a test in order to check
   that Nix continues to produce the same behavior going forward.

   For example, this technique is used for the language tests, to check both
   the printed final value if evaluation was successful, and any errors and
   warnings encountered.

   It is frequently useful to regenerate the expected output. To do that,
   rerun the failed test(s) with _NIX_TEST_ACCEPT=1. For example:

 _NIX_TEST_ACCEPT=1 make tests/functional/lang.sh.test

   This convention is shared with the characterisation unit tests too.

   An interesting situation to document is the case when these tests are
   "overfitted". The language tests are, again, an example of this. The
   expected successful output of evaluation is supposed to be highly stable –
   we do not intend to make breaking changes to (the stable parts of) the Nix
   language. However, the errors and warnings during evaluation (successful
   or not) are not stable in this way. We are free to change how they are
   displayed at any time.

   It may be surprising that we would test non-normative behavior like
   diagnostic outputs. Diagnostic outputs are indeed not a stable interface,
   but they still are important to users. By recording the expected output,
   the test suite guards against accidental changes, and ensure the result
   (not just the code that implements it) of the diagnostic code paths are
   under code review. Regressions are caught, and improvements always show up
   in code review.

   To ensure that characterisation testing doesn't make it harder to
   intentionally change these interfaces, there always must be an easy way to
   regenerate the expected output, as we do with _NIX_TEST_ACCEPT=1.

Integration tests

   The integration tests are defined in the Nix flake under the
   hydraJobs.tests attribute. These tests include everything that needs to
   interact with external services or run Nix in a non-trivial distributed
   setup. Because these tests are expensive and require more than what the
   standard github-actions setup provides, they only run on the master branch
   (on https://hydra.nixos.org/jobset/nix/master).

   You can run them manually with nix build .#hydraJobs.tests.{testName} or
   nix-build -A hydraJobs.tests.{testName}

Installer tests

   After a one-time setup, the Nix repository's GitHub Actions continuous
   integration (CI) workflow can test the installer each time you push to a
   branch.

   Creating a Cachix cache for your installer tests and adding its
   authorisation token to GitHub enables two installer-specific jobs in the
   CI workflow:

     * The installer job generates installers for the platforms below and
       uploads them to your Cachix cache:

          * x86_64-linux
          * armv6l-linux
          * armv7l-linux
          * x86_64-darwin
     * The installer_test job (which runs on ubuntu-latest and macos-latest)
       will try to install Nix with the cached installer and run a trivial
       Nix command.

  One-time setup

    1. Have a GitHub account with a fork of the Nix repository.
    2. At cachix.org:
          * Create or log in to an account.
          * Create a Cachix cache using the format
            <github-username>-nix-install-tests.
          * Navigate to the new cache > Settings > Auth Tokens.
          * Generate a new Cachix auth token and copy the generated value.
    3. At github.com:
          * Navigate to your Nix fork > Settings > Secrets > Actions > New
            repository secret.
          * Name the secret CACHIX_AUTH_TOKEN.
          * Paste the copied value of the Cachix cache auth token.

Working on documentation

  Using the CI-generated installer for manual testing

   After the CI run completes, you can check the output to extract the
   installer URL:

    1. Click into the detailed view of the CI run.

    2. Click into any installer_test run (the URL you're here to extract will
       be the same in all of them).

    3. Click into the Run cachix/install-nix-action@v... step and click the
       detail triangle next to the first log line (it will also be Run
       cachix/install-nix-action@v...)

    4. Copy the value of install_url

    5. To generate an install command, plug this install_url and your GitHub
       username into this template:

 curl -L <install_url> | sh -s -- --tarball-url-prefix https://<github-username>-nix-install-tests.cachix.org/serve
