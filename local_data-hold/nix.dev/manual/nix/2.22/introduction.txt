   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2. 4.2. Store Object
         3. 4.3. Store Path
         4. 4.4. Store Types
         5.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesytem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Copying Closures via SSH
              3. 7.1.3. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix eval
             15. 8.5.15. nix flake
             16. 8.5.16. nix flake archive
             17. 8.5.17. nix flake check
             18. 8.5.18. nix flake clone
             19. 8.5.19. nix flake info
             20. 8.5.20. nix flake init
             21. 8.5.21. nix flake lock
             22. 8.5.22. nix flake metadata
             23. 8.5.23. nix flake new
             24. 8.5.24. nix flake prefetch
             25. 8.5.25. nix flake show
             26. 8.5.26. nix flake update
             27. 8.5.27. nix fmt
             28. 8.5.28. nix hash
             29. 8.5.29. nix hash convert
             30. 8.5.30. nix hash file
             31. 8.5.31. nix hash path
             32. 8.5.32. nix hash to-base16
             33. 8.5.33. nix hash to-base32
             34. 8.5.34. nix hash to-base64
             35. 8.5.35. nix hash to-sri
             36. 8.5.36. nix help
             37. 8.5.37. nix help-stores
             38. 8.5.38. nix key
             39. 8.5.39. nix key convert-secret-to-public
             40. 8.5.40. nix key generate-secret
             41. 8.5.41. nix log
             42. 8.5.42. nix nar
             43. 8.5.43. nix nar cat
             44. 8.5.44. nix nar dump-path
             45. 8.5.45. nix nar ls
             46. 8.5.46. nix nar pack
             47. 8.5.47. nix path-info
             48. 8.5.48. nix print-dev-env
             49. 8.5.49. nix profile
             50. 8.5.50. nix profile diff-closures
             51. 8.5.51. nix profile history
             52. 8.5.52. nix profile install
             53. 8.5.53. nix profile list
             54. 8.5.54. nix profile remove
             55. 8.5.55. nix profile rollback
             56. 8.5.56. nix profile upgrade
             57. 8.5.57. nix profile wipe-history
             58. 8.5.58. nix realisation
             59. 8.5.59. nix realisation info
             60. 8.5.60. nix registry
             61. 8.5.61. nix registry add
             62. 8.5.62. nix registry list
             63. 8.5.63. nix registry pin
             64. 8.5.64. nix registry remove
             65. 8.5.65. nix repl
             66. 8.5.66. nix run
             67. 8.5.67. nix search
             68. 8.5.68. nix shell
             69. 8.5.69. nix store
             70. 8.5.70. nix store add
             71. 8.5.71. nix store add-file
             72. 8.5.72. nix store add-path
             73. 8.5.73. nix store cat
             74. 8.5.74. nix store copy-log
             75. 8.5.75. nix store copy-sigs
             76. 8.5.76. nix store delete
             77. 8.5.77. nix store diff-closures
             78. 8.5.78. nix store dump-path
             79. 8.5.79. nix store gc
             80. 8.5.80. nix store info
             81. 8.5.81. nix store ls
             82. 8.5.82. nix store make-content-addressed
             83. 8.5.83. nix store optimise
             84. 8.5.84. nix store path-from-hash-part
             85. 8.5.85. nix store ping
             86. 8.5.86. nix store prefetch-file
             87. 8.5.87. nix store repair
             88. 8.5.88. nix store sign
             89. 8.5.89. nix store verify
             90. 8.5.90. nix upgrade-nix
             91. 8.5.91. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. Glossary
   19. 12. Contributing
   20.   1. 12.1. Hacking
         2. 12.2. Testing
         3. 12.3. Documentation
         4. 12.4. Experimental Features
         5. 12.5. CLI guideline
         6. 12.6. C++ style guide
   21. 13. Releases
   22.   1. 13.1. Release 2.22 (2024-04-23)
         2. 13.2. Release 2.21 (2024-03-11)
         3. 13.3. Release 2.20 (2024-01-29)
         4. 13.4. Release 2.19 (2023-11-17)
         5. 13.5. Release 2.18 (2023-09-20)
         6. 13.6. Release 2.17 (2023-07-24)
         7. 13.7. Release 2.16 (2023-05-31)
         8. 13.8. Release 2.15 (2023-04-11)
         9. 13.9. Release 2.14 (2023-02-28)
        10. 13.10. Release 2.13 (2023-01-17)
        11. 13.11. Release 2.12 (2022-12-06)
        12. 13.12. Release 2.11 (2022-08-25)
        13. 13.13. Release 2.10 (2022-07-11)
        14. 13.14. Release 2.9 (2022-05-30)
        15. 13.15. Release 2.8 (2022-04-19)
        16. 13.16. Release 2.7 (2022-03-07)
        17. 13.17. Release 2.6 (2022-01-24)
        18. 13.18. Release 2.5 (2021-12-13)
        19. 13.19. Release 2.4 (2021-11-01)
        20. 13.20. Release 2.3 (2019-09-04)
        21. 13.21. Release 2.2 (2019-01-11)
        22. 13.22. Release 2.1 (2018-09-02)
        23. 13.23. Release 2.0 (2018-02-22)
        24. 13.24. Release 1.11.10 (2017-06-12)
        25. 13.25. Release 1.11 (2016-01-19)
        26. 13.26. Release 1.10 (2015-09-03)
        27. 13.27. Release 1.9 (2015-06-12)
        28. 13.28. Release 1.8 (2014-12-14)
        29. 13.29. Release 1.7 (2014-04-11)
        30. 13.30. Release 1.6.1 (2013-10-28)
        31. 13.31. Release 1.6 (2013-09-10)
        32. 13.32. Release 1.5.2 (2013-05-13)
        33. 13.33. Release 1.5 (2013-02-27)
        34. 13.34. Release 1.4 (2013-02-26)
        35. 13.35. Release 1.3 (2013-01-04)
        36. 13.36. Release 1.2 (2012-12-06)
        37. 13.37. Release 1.1 (2012-07-18)
        38. 13.38. Release 1.0 (2012-05-11)
        39. 13.39. Release 0.16 (2010-08-17)
        40. 13.40. Release 0.15 (2010-03-17)
        41. 13.41. Release 0.14 (2010-02-04)
        42. 13.42. Release 0.13 (2009-11-05)
        43. 13.43. Release 0.12 (2008-11-20)
        44. 13.44. Release 0.11 (2007-12-31)
        45. 13.45. Release 0.10.1 (2006-10-11)
        46. 13.46. Release 0.10 (2006-10-06)
        47. 13.47. Release 0.9.2 (2005-09-21)
        48. 13.48. Release 0.9.1 (2005-09-20)
        49. 13.49. Release 0.9 (2005-09-16)
        50. 13.50. Release 0.8.1 (2005-04-13)
        51. 13.51. Release 0.8 (2005-04-11)
        52. 13.52. Release 0.7 (2005-01-12)
        53. 13.53. Release 0.6 (2004-11-14)
        54. 13.54. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                  Introduction

   Nix is a purely functional package manager. This means that it treats
   packages like values in purely functional programming languages such as
   Haskell — they are built by functions that don’t have side-effects, and
   they never change after they have been built. Nix stores packages in the
   Nix store, usually the directory /nix/store, where each package has its
   own unique subdirectory such as

 /nix/store/b6gvzjyb2pg0kjfwrjmg1vfhh54ad73z-firefox-33.1/

   where b6gvzjyb2pg0… is a unique identifier for the package that captures
   all its dependencies (it’s a cryptographic hash of the package’s build
   dependency graph). This enables many powerful features.

Multiple versions

   You can have multiple versions or variants of a package installed at the
   same time. This is especially important when different applications have
   dependencies on different versions of the same package — it prevents the
   “DLL hell”. Because of the hashing scheme, different versions of a package
   end up in different paths in the Nix store, so they don’t interfere with
   each other.

   An important consequence is that operations like upgrading or uninstalling
   an application cannot break other applications, since these operations
   never “destructively” update or delete files that are used by other
   packages.

Complete dependencies

   Nix helps you make sure that package dependency specifications are
   complete. In general, when you’re making a package for a package
   management system like RPM, you have to specify for each package what its
   dependencies are, but there are no guarantees that this specification is
   complete. If you forget a dependency, then the package will build and work
   correctly on your machine if you have the dependency installed, but not on
   the end user's machine if it's not there.

   Since Nix on the other hand doesn’t install packages in “global” locations
   like /usr/bin but in package-specific directories, the risk of incomplete
   dependencies is greatly reduced. This is because tools such as compilers
   don’t search in per-packages directories such as
   /nix/store/5lbfaxb722zp…-openssl-0.9.8d/include, so if a package builds
   correctly on your system, this is because you specified the dependency
   explicitly. This takes care of the build-time dependencies.

   Once a package is built, runtime dependencies are found by scanning
   binaries for the hash parts of Nix store paths (such as r8vvq9kq…). This
   sounds risky, but it works extremely well.

Multi-user support

   Nix has multi-user support. This means that non-privileged users can
   securely install software. Each user can have a different profile, a set
   of packages in the Nix store that appear in the user’s PATH. If a user
   installs a package that another user has already installed previously, the
   package won’t be built or downloaded a second time. At the same time, it
   is not possible for one user to inject a Trojan horse into a package that
   might be used by another user.

Atomic upgrades and rollbacks

   Since package management operations never overwrite packages in the Nix
   store but just add new versions in different paths, they are atomic. So
   during a package upgrade, there is no time window in which the package has
   some files from the old version and some files from the new version —
   which would be bad because a program might well crash if it’s started
   during that period.

   And since packages aren’t overwritten, the old versions are still there
   after an upgrade. This means that you can roll back to the old version:

 $ nix-env --upgrade --attr nixpkgs.some-package
 $ nix-env --rollback

Garbage collection

   When you uninstall a package like this…

 $ nix-env --uninstall firefox

   the package isn’t deleted from the system right away (after all, you might
   want to do a rollback, or it might be in the profiles of other users).
   Instead, unused packages can be deleted safely by running the garbage
   collector:

 $ nix-collect-garbage

   This deletes all packages that aren’t in use by any user profile or by a
   currently running program.

Functional package language

   Packages are built from Nix expressions, which is a simple functional
   language. A Nix expression describes everything that goes into a package
   build task (a “derivation”): other packages, sources, the build script,
   environment variables for the build script, etc. Nix tries very hard to
   ensure that Nix expressions are deterministic: building a Nix expression
   twice should yield the same result.

   Because it’s a functional language, it’s easy to support building variants
   of a package: turn the Nix expression into a function and call it any
   number of times with the appropriate arguments. Due to the hashing scheme,
   variants don’t conflict with each other in the Nix store.

Transparent source/binary deployment

   Nix expressions generally describe how to build a package from source, so
   an installation action like

 $ nix-env --install --attr nixpkgs.firefox

   could cause quite a bit of build activity, as not only Firefox but also
   all its dependencies (all the way up to the C library and the compiler)
   would have to be built, at least if they are not already in the Nix store.
   This is a source deployment model. For most users, building from source is
   not very pleasant as it takes far too long. However, Nix can automatically
   skip building from source and instead use a binary cache, a web server
   that provides pre-built binaries. For instance, when asked to build
   /nix/store/b6gvzjyb2pg0…-firefox-33.1 from source, Nix would first check
   if the file https://cache.nixos.org/b6gvzjyb2pg0….narinfo exists, and if
   so, fetch the pre-built binary referenced from there; otherwise, it would
   fall back to building from source.

Nix Packages collection

   We provide a large set of Nix expressions containing hundreds of existing
   Unix packages, the Nix Packages collection (Nixpkgs).

Managing build environments

   Nix is extremely useful for developers as it makes it easy to
   automatically set up the build environment for a package. Given a Nix
   expression that describes the dependencies of your package, the command
   nix-shell will build or download those dependencies if they’re not already
   in your Nix store, and then start a Bash shell in which all necessary
   environment variables (such as compiler search paths) are set.

   For example, the following command gets all dependencies of the Pan
   newsreader, as described by its Nix expression:

 $ nix-shell '<nixpkgs>' --attr pan

   You’re then dropped into a shell where you can edit, build and test the
   package:

 [nix-shell]$ unpackPhase
 [nix-shell]$ cd pan-*
 [nix-shell]$ configurePhase
 [nix-shell]$ buildPhase
 [nix-shell]$ ./pan/gui/pan

Portability

   Nix runs on Linux and macOS.

NixOS

   NixOS is a Linux distribution based on Nix. It uses Nix not just for
   package management but also to manage the system configuration (e.g., to
   build configuration files in /etc). This means, among other things, that
   it is easy to roll back the entire configuration of the system to an
   earlier state. Also, users can install software without root privileges.
   For more information and downloads, see the NixOS homepage.

License

   Nix is released under the terms of the GNU LGPLv2.1 or (at your option)
   any later version.
