   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2.   1. 4.1.1. Content-Addressing File System Objects
         3. 4.2. Store Object
         4.   1. 4.2.1. Content-Addressing Store Objects
         5. 4.3. Store Path
         6. 4.4. Store Types
         7.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesystem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
              2. 5.2.2. Lookup path
              3. 5.2.3. String context
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
              2. 5.4.2. Import From Derivation
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix env
             15. 8.5.15. nix env shell
             16. 8.5.16. nix eval
             17. 8.5.17. nix flake
             18. 8.5.18. nix flake archive
             19. 8.5.19. nix flake check
             20. 8.5.20. nix flake clone
             21. 8.5.21. nix flake info
             22. 8.5.22. nix flake init
             23. 8.5.23. nix flake lock
             24. 8.5.24. nix flake metadata
             25. 8.5.25. nix flake new
             26. 8.5.26. nix flake prefetch
             27. 8.5.27. nix flake show
             28. 8.5.28. nix flake update
             29. 8.5.29. nix fmt
             30. 8.5.30. nix hash
             31. 8.5.31. nix hash convert
             32. 8.5.32. nix hash file
             33. 8.5.33. nix hash path
             34. 8.5.34. nix hash to-base16
             35. 8.5.35. nix hash to-base32
             36. 8.5.36. nix hash to-base64
             37. 8.5.37. nix hash to-sri
             38. 8.5.38. nix help
             39. 8.5.39. nix help-stores
             40. 8.5.40. nix key
             41. 8.5.41. nix key convert-secret-to-public
             42. 8.5.42. nix key generate-secret
             43. 8.5.43. nix log
             44. 8.5.44. nix nar
             45. 8.5.45. nix nar cat
             46. 8.5.46. nix nar dump-path
             47. 8.5.47. nix nar ls
             48. 8.5.48. nix nar pack
             49. 8.5.49. nix path-info
             50. 8.5.50. nix print-dev-env
             51. 8.5.51. nix profile
             52. 8.5.52. nix profile diff-closures
             53. 8.5.53. nix profile history
             54. 8.5.54. nix profile install
             55. 8.5.55. nix profile list
             56. 8.5.56. nix profile remove
             57. 8.5.57. nix profile rollback
             58. 8.5.58. nix profile upgrade
             59. 8.5.59. nix profile wipe-history
             60. 8.5.60. nix realisation
             61. 8.5.61. nix realisation info
             62. 8.5.62. nix registry
             63. 8.5.63. nix registry add
             64. 8.5.64. nix registry list
             65. 8.5.65. nix registry pin
             66. 8.5.66. nix registry remove
             67. 8.5.67. nix repl
             68. 8.5.68. nix run
             69. 8.5.69. nix search
             70. 8.5.70. nix store
             71. 8.5.71. nix store add
             72. 8.5.72. nix store add-file
             73. 8.5.73. nix store add-path
             74. 8.5.74. nix store cat
             75. 8.5.75. nix store copy-log
             76. 8.5.76. nix store copy-sigs
             77. 8.5.77. nix store delete
             78. 8.5.78. nix store diff-closures
             79. 8.5.79. nix store dump-path
             80. 8.5.80. nix store gc
             81. 8.5.81. nix store info
             82. 8.5.82. nix store ls
             83. 8.5.83. nix store make-content-addressed
             84. 8.5.84. nix store optimise
             85. 8.5.85. nix store path-from-hash-part
             86. 8.5.86. nix store ping
             87. 8.5.87. nix store prefetch-file
             88. 8.5.88. nix store repair
             89. 8.5.89. nix store sign
             90. 8.5.90. nix store verify
             91. 8.5.91. nix upgrade-nix
             92. 8.5.92. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. C API
   19. 12. Glossary
   20. 13. Contributing
   21.   1. 13.1. Hacking
         2. 13.2. Testing
         3. 13.3. Documentation
         4. 13.4. Experimental Features
         5. 13.5. CLI guideline
         6. 13.6. JSON guideline
         7. 13.7. C++ style guide
   22. 14. Releases
   23.   1. 14.1. Release 2.23 (2024-06-03)
         2. 14.2. Release 2.22 (2024-04-23)
         3. 14.3. Release 2.21 (2024-03-11)
         4. 14.4. Release 2.20 (2024-01-29)
         5. 14.5. Release 2.19 (2023-11-17)
         6. 14.6. Release 2.18 (2023-09-20)
         7. 14.7. Release 2.17 (2023-07-24)
         8. 14.8. Release 2.16 (2023-05-31)
         9. 14.9. Release 2.15 (2023-04-11)
        10. 14.10. Release 2.14 (2023-02-28)
        11. 14.11. Release 2.13 (2023-01-17)
        12. 14.12. Release 2.12 (2022-12-06)
        13. 14.13. Release 2.11 (2022-08-25)
        14. 14.14. Release 2.10 (2022-07-11)
        15. 14.15. Release 2.9 (2022-05-30)
        16. 14.16. Release 2.8 (2022-04-19)
        17. 14.17. Release 2.7 (2022-03-07)
        18. 14.18. Release 2.6 (2022-01-24)
        19. 14.19. Release 2.5 (2021-12-13)
        20. 14.20. Release 2.4 (2021-11-01)
        21. 14.21. Release 2.3 (2019-09-04)
        22. 14.22. Release 2.2 (2019-01-11)
        23. 14.23. Release 2.1 (2018-09-02)
        24. 14.24. Release 2.0 (2018-02-22)
        25. 14.25. Release 1.11.10 (2017-06-12)
        26. 14.26. Release 1.11 (2016-01-19)
        27. 14.27. Release 1.10 (2015-09-03)
        28. 14.28. Release 1.9 (2015-06-12)
        29. 14.29. Release 1.8 (2014-12-14)
        30. 14.30. Release 1.7 (2014-04-11)
        31. 14.31. Release 1.6.1 (2013-10-28)
        32. 14.32. Release 1.6 (2013-09-10)
        33. 14.33. Release 1.5.2 (2013-05-13)
        34. 14.34. Release 1.5 (2013-02-27)
        35. 14.35. Release 1.4 (2013-02-26)
        36. 14.36. Release 1.3 (2013-01-04)
        37. 14.37. Release 1.2 (2012-12-06)
        38. 14.38. Release 1.1 (2012-07-18)
        39. 14.39. Release 1.0 (2012-05-11)
        40. 14.40. Release 0.16 (2010-08-17)
        41. 14.41. Release 0.15 (2010-03-17)
        42. 14.42. Release 0.14 (2010-02-04)
        43. 14.43. Release 0.13 (2009-11-05)
        44. 14.44. Release 0.12 (2008-11-20)
        45. 14.45. Release 0.11 (2007-12-31)
        46. 14.46. Release 0.10.1 (2006-10-11)
        47. 14.47. Release 0.10 (2006-10-06)
        48. 14.48. Release 0.9.2 (2005-09-21)
        49. 14.49. Release 0.9.1 (2005-09-20)
        50. 14.50. Release 0.9 (2005-09-16)
        51. 14.51. Release 0.8.1 (2005-04-13)
        52. 14.52. Release 0.8 (2005-04-11)
        53. 14.53. Release 0.7 (2005-01-12)
        54. 14.54. Release 0.6 (2004-11-14)
        55. 14.55. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                              Advanced Attributes

   Derivations can declare some infrequently used optional attributes.

     * allowedReferences
       The optional attribute allowedReferences specifies a list of legal
       references (dependencies) of the output of the builder. For example,

 allowedReferences = [];

       enforces that the output of a derivation cannot have any runtime
       dependencies on its inputs. To allow an output to have a runtime
       dependency on itself, use "out" as a list item. This is used in NixOS
       to check that generated files such as initial ramdisks for booting
       Linux don’t have accidental dependencies on other paths in the Nix
       store.

     * allowedRequisites
       This attribute is similar to allowedReferences, but it specifies the
       legal requisites of the whole closure, so all the dependencies
       recursively. For example,

 allowedRequisites = [ foobar ];

       enforces that the output of a derivation cannot have any other runtime
       dependency than foobar, and in addition it enforces that foobar itself
       doesn't introduce any other dependency itself.

     * disallowedReferences
       The optional attribute disallowedReferences specifies a list of
       illegal references (dependencies) of the output of the builder. For
       example,

 disallowedReferences = [ foo ];

       enforces that the output of a derivation cannot have a direct runtime
       dependencies on the derivation foo.

     * disallowedRequisites
       This attribute is similar to disallowedReferences, but it specifies
       illegal requisites for the whole closure, so all the dependencies
       recursively. For example,

 disallowedRequisites = [ foobar ];

       enforces that the output of a derivation cannot have any runtime
       dependency on foobar or any other derivation depending recursively on
       foobar.

     * exportReferencesGraph
       This attribute allows builders access to the references graph of their
       inputs. The attribute is a list of inputs in the Nix store whose
       references graph the builder needs to know. The value of this
       attribute should be a list of pairs [ name1 path1 name2 path2 ... ].
       The references graph of each pathN will be stored in a text file nameN
       in the temporary build directory. The text files have the format used
       by nix-store --register-validity (with the deriver fields left empty).
       For example, when the following derivation is built:

 derivation {
   ...
   exportReferencesGraph = [ "libfoo-graph" libfoo ];
 };

       the references graph of libfoo is placed in the file libfoo-graph in
       the temporary build directory.

       exportReferencesGraph is useful for builders that want to do something
       with the closure of a store path. Examples include the builders in
       NixOS that generate the initial ramdisk for booting Linux (a cpio
       archive containing the closure of the boot script) and the ISO-9660
       image for the installation CD (which is populated with a Nix store
       containing the closure of a bootable NixOS configuration).

     * impureEnvVars
       This attribute allows you to specify a list of environment variables
       that should be passed from the environment of the calling user to the
       builder. Usually, the environment is cleared completely when the
       builder is executed, but with this attribute you can allow specific
       environment variables to be passed unmodified. For example, fetchurl
       in Nixpkgs has the line

 impureEnvVars = [ "http_proxy" "https_proxy" ... ];

       to make it use the proxy server configuration specified by the user in
       the environment variables http_proxy and friends.

       This attribute is only allowed in fixed-output derivations (see
       below), where impurities such as these are okay since (the hash of)
       the output is known in advance. It is ignored for all other
       derivations.

         Warning

         impureEnvVars implementation takes environment variables from the
         current builder process. When a daemon is building its environmental
         variables are used. Without the daemon, the environmental variables
         come from the environment of the nix-build.

       If the configurable-impure-env experimental feature is enabled, these
       environment variables can also be controlled through the impure-env
       configuration setting.

     * outputHash; outputHashAlgo; outputHashMode
       These attributes declare that the derivation is a so-called
       fixed-output derivation, which means that a cryptographic hash of the
       output is already known in advance. When the build of a fixed-output
       derivation finishes, Nix computes the cryptographic hash of the output
       and compares it to the hash declared with these attributes. If there
       is a mismatch, the build fails.

       The rationale for fixed-output derivations is derivations such as
       those produced by the fetchurl function. This function downloads a
       file from a given URL. To ensure that the downloaded file has not been
       modified, the caller must also specify a cryptographic hash of the
       file. For example,

 fetchurl {
   url = "http://ftp.gnu.org/pub/gnu/hello/hello-2.1.1.tar.gz";
   sha256 = "1md7jsfd8pa45z73bz1kszpp01yw6x5ljkjk2hx7wl800any6465";
 }

       It sometimes happens that the URL of the file changes, e.g., because
       servers are reorganised or no longer available. We then must update
       the call to fetchurl, e.g.,

 fetchurl {
   url = "ftp://ftp.nluug.nl/pub/gnu/hello/hello-2.1.1.tar.gz";
   sha256 = "1md7jsfd8pa45z73bz1kszpp01yw6x5ljkjk2hx7wl800any6465";
 }

       If a fetchurl derivation was treated like a normal derivation, the
       output paths of the derivation and all derivations depending on it
       would change. For instance, if we were to change the URL of the Glibc
       source distribution in Nixpkgs (a package on which almost all other
       packages depend) massive rebuilds would be needed. This is unfortunate
       for a change which we know cannot have a real effect as it propagates
       upwards through the dependency graph.

       For fixed-output derivations, on the other hand, the name of the
       output path only depends on the outputHash* and name attributes, while
       all other attributes are ignored for the purpose of computing the
       output path. (The name attribute is included because it is part of the
       path.)

       As an example, here is the (simplified) Nix expression for fetchurl:

 { stdenv, curl }: # The curl program is used for downloading.

 { url, sha256 }:

 stdenv.mkDerivation {
   name = baseNameOf (toString url);
   builder = ./builder.sh;
   buildInputs = [ curl ];

   # This is a fixed-output derivation; the output must be a regular
   # file with SHA256 hash sha256.
   outputHashMode = "flat";
   outputHashAlgo = "sha256";
   outputHash = sha256;

   inherit url;
 }

       The outputHash attribute must be a string containing the hash in
       either hexadecimal or "nix32" encoding, or following the format for
       integrity metadata as defined by SRI. The "nix32" encoding is an
       adaptation of base-32 encoding. The convertHash function shows how to
       convert between different encodings, and the nix-hash command has
       information about obtaining the hash for some contents, as well as
       converting to and from encodings.

       The outputHashAlgo attribute specifies the hash algorithm used to
       compute the hash. It can currently be "sha1", "sha256", "sha512", or
       null. outputHashAlgo can only be null when outputHash follows the SRI
       format.

       The outputHashMode attribute determines how the hash is computed. It
       must be one of the following values:

          * "flat"

            This is the default.

          * "recursive" or "nar"

              Compatibility

              "recursive" is the traditional way of indicating this, and is
              supported since 2005 (virtually the entire history of Nix).
              "nar" is more clear, and consistent with other parts of Nix
              (such as the CLI), however support for it is only added in Nix
              version 2.21.

          * "text"

              Warning

              The use of this method for derivation outputs is part of the
              dynamic-derivations experimental feature.

          * "git"

              Warning

              This method is part of the git-hashing experimental feature.

     * __contentAddressed

         Warning This attribute is part of an experimental feature.

         To use this attribute, you must enable the ca-derivations
         experimental feature. For example, in nix.conf you could add:

 extra-experimental-features = ca-derivations

       If this attribute is set to true, then the derivation outputs will be
       stored in a content-addressed location rather than the traditional
       input-addressed one.

       Setting this attribute also requires setting outputHashMode and
       outputHashAlgo like for fixed-output derivations (see above).

       It also implicitly requires that the machine to build the derivation
       must have the ca-derivations system feature.

     * passAsFile
       A list of names of attributes that should be passed via files rather
       than environment variables. For example, if you have

 passAsFile = ["big"];
 big = "a very long string";

       then when the builder runs, the environment variable bigPath will
       contain the absolute path to a temporary file containing a very long
       string. That is, for any attribute x listed in passAsFile, Nix will
       pass an environment variable xPath holding the path of the file
       containing the value of attribute x. This is useful when you need to
       pass large strings to a builder, since most operating systems impose a
       limit on the size of the environment (typically, a few hundred
       kilobyte).

     * preferLocalBuild
       If this attribute is set to true and distributed building is enabled,
       then, if possible, the derivation will be built locally instead of
       being forwarded to a remote machine. This is useful for derivations
       that are cheapest to build locally.

     * allowSubstitutes
       If this attribute is set to false, then Nix will always build this
       derivation (locally or remotely); it will not try to substitute its
       outputs. This is useful for derivations that are cheaper to build than
       to substitute.

       This attribute can be ignored by setting always-allow-substitutes to
       true.

         Note

         If set to false, the builder should be able to run on the system
         type specified in the system attribute, since the derivation cannot
         be substituted.

     * __structuredAttrs
       If the special attribute __structuredAttrs is set to true, the other
       derivation attributes are serialised into a file in JSON format. The
       environment variable NIX_ATTRS_JSON_FILE points to the exact location
       of that file both in a build and a nix-shell. This obviates the need
       for passAsFile since JSON files have no size restrictions, unlike
       process environments.

       It also makes it possible to tweak derivation settings in a structured
       way; see outputChecks for example.

       As a convenience to Bash builders, Nix writes a script that
       initialises shell variables corresponding to all attributes that are
       representable in Bash. The environment variable NIX_ATTRS_SH_FILE
       points to the exact location of the script, both in a build and a
       nix-shell. This includes non-nested (associative) arrays. For example,
       the attribute hardening.format = true ends up as the Bash associative
       array element ${hardening[format]}.

     * outputChecks
       When using structured attributes, the outputChecks attribute allows
       defining checks per-output.

       In addition to allowedReferences, allowedRequisites,
       disallowedReferences and disallowedRequisites, the following
       attributes are available:

          * maxSize defines the maximum size of the resulting store object.
          * maxClosureSize defines the maximum size of the output's closure.
          * ignoreSelfRefs controls whether self-references should be
            considered when checking for allowed references/requisites.

       Example:

 __structuredAttrs = true;

 outputChecks.out = {
   # The closure of 'out' must not be larger than 256 MiB.
   maxClosureSize = 256 * 1024 * 1024;

   # It must not refer to the C compiler or to the 'dev' output.
   disallowedRequisites = [ stdenv.cc "dev" ];
 };

 outputChecks.dev = {
   # The 'dev' output must not be larger than 128 KiB.
   maxSize = 128 * 1024;
 };

     * unsafeDiscardReferences

       When using structured attributes, the attribute
       unsafeDiscardReferences is an attribute set with a boolean value for
       each output name. If set to true, it disables scanning the output for
       runtime dependencies.

       Example:

 __structuredAttrs = true;
 unsafeDiscardReferences.out = true;

       This is useful, for example, when generating self-contained filesystem
       images with their own embedded Nix store: hashes found inside such an
       image refer to the embedded store and not to the host's Nix store.

     * requiredSystemFeatures

       If a derivation has the requiredSystemFeatures attribute, then Nix
       will only build it on a machine that has the corresponding features
       set in its system-features configuration.

       For example, setting

 requiredSystemFeatures = [ "kvm" ];

       ensures that the derivation can only be built on a machine with the
       kvm feature.
