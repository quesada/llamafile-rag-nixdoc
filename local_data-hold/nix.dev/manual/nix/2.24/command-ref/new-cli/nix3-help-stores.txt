   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2.   1. 4.1.1. Content-Addressing File System Objects
         3. 4.2. Store Object
         4.   1. 4.2.1. Content-Addressing Store Objects
         5. 4.3. Store Path
         6. 4.4. Store Types
         7.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesystem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2.   1. 5.1.1. String context
         3. 5.2. Syntax and semantics
         4.   1. 5.2.1. Identifiers
              2. 5.2.2. Scoping rules
              3. 5.2.3. String interpolation
              4. 5.2.4. Lookup path
         5. 5.3. Operators
         6. 5.4. Built-ins
         7.   1. 5.4.1. Derivations
              2.   1. 5.4.1.1. Advanced Attributes
                   2. 5.4.1.2. Import From Derivation
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix env
             15. 8.5.15. nix env shell
             16. 8.5.16. nix eval
             17. 8.5.17. nix flake
             18. 8.5.18. nix flake archive
             19. 8.5.19. nix flake check
             20. 8.5.20. nix flake clone
             21. 8.5.21. nix flake info
             22. 8.5.22. nix flake init
             23. 8.5.23. nix flake lock
             24. 8.5.24. nix flake metadata
             25. 8.5.25. nix flake new
             26. 8.5.26. nix flake prefetch
             27. 8.5.27. nix flake show
             28. 8.5.28. nix flake update
             29. 8.5.29. nix fmt
             30. 8.5.30. nix hash
             31. 8.5.31. nix hash convert
             32. 8.5.32. nix hash file
             33. 8.5.33. nix hash path
             34. 8.5.34. nix hash to-base16
             35. 8.5.35. nix hash to-base32
             36. 8.5.36. nix hash to-base64
             37. 8.5.37. nix hash to-sri
             38. 8.5.38. nix help
             39. 8.5.39. nix help-stores
             40. 8.5.40. nix key
             41. 8.5.41. nix key convert-secret-to-public
             42. 8.5.42. nix key generate-secret
             43. 8.5.43. nix log
             44. 8.5.44. nix nar
             45. 8.5.45. nix nar cat
             46. 8.5.46. nix nar dump-path
             47. 8.5.47. nix nar ls
             48. 8.5.48. nix nar pack
             49. 8.5.49. nix path-info
             50. 8.5.50. nix print-dev-env
             51. 8.5.51. nix profile
             52. 8.5.52. nix profile diff-closures
             53. 8.5.53. nix profile history
             54. 8.5.54. nix profile install
             55. 8.5.55. nix profile list
             56. 8.5.56. nix profile remove
             57. 8.5.57. nix profile rollback
             58. 8.5.58. nix profile upgrade
             59. 8.5.59. nix profile wipe-history
             60. 8.5.60. nix realisation
             61. 8.5.61. nix realisation info
             62. 8.5.62. nix registry
             63. 8.5.63. nix registry add
             64. 8.5.64. nix registry list
             65. 8.5.65. nix registry pin
             66. 8.5.66. nix registry remove
             67. 8.5.67. nix repl
             68. 8.5.68. nix run
             69. 8.5.69. nix search
             70. 8.5.70. nix store
             71. 8.5.71. nix store add
             72. 8.5.72. nix store add-file
             73. 8.5.73. nix store add-path
             74. 8.5.74. nix store cat
             75. 8.5.75. nix store copy-log
             76. 8.5.76. nix store copy-sigs
             77. 8.5.77. nix store delete
             78. 8.5.78. nix store diff-closures
             79. 8.5.79. nix store dump-path
             80. 8.5.80. nix store gc
             81. 8.5.81. nix store info
             82. 8.5.82. nix store ls
             83. 8.5.83. nix store make-content-addressed
             84. 8.5.84. nix store optimise
             85. 8.5.85. nix store path-from-hash-part
             86. 8.5.86. nix store ping
             87. 8.5.87. nix store prefetch-file
             88. 8.5.88. nix store repair
             89. 8.5.89. nix store sign
             90. 8.5.90. nix store verify
             91. 8.5.91. nix upgrade-nix
             92. 8.5.92. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. C API
   19. 12. Glossary
   20. 13. Development
   21.   1. 13.1. Building
         2. 13.2. Testing
         3. 13.3. Documentation
         4. 13.4. CLI guideline
         5. 13.5. JSON guideline
         6. 13.6. C++ style guide
         7. 13.7. Experimental Features
         8. 13.8. Contributing
   22. 14. Releases
   23.   1. 14.1. Release 2.24 (2024-07-31)
         2. 14.2. Release 2.23 (2024-06-03)
         3. 14.3. Release 2.22 (2024-04-23)
         4. 14.4. Release 2.21 (2024-03-11)
         5. 14.5. Release 2.20 (2024-01-29)
         6. 14.6. Release 2.19 (2023-11-17)
         7. 14.7. Release 2.18 (2023-09-20)
         8. 14.8. Release 2.17 (2023-07-24)
         9. 14.9. Release 2.16 (2023-05-31)
        10. 14.10. Release 2.15 (2023-04-11)
        11. 14.11. Release 2.14 (2023-02-28)
        12. 14.12. Release 2.13 (2023-01-17)
        13. 14.13. Release 2.12 (2022-12-06)
        14. 14.14. Release 2.11 (2022-08-25)
        15. 14.15. Release 2.10 (2022-07-11)
        16. 14.16. Release 2.9 (2022-05-30)
        17. 14.17. Release 2.8 (2022-04-19)
        18. 14.18. Release 2.7 (2022-03-07)
        19. 14.19. Release 2.6 (2022-01-24)
        20. 14.20. Release 2.5 (2021-12-13)
        21. 14.21. Release 2.4 (2021-11-01)
        22. 14.22. Release 2.3 (2019-09-04)
        23. 14.23. Release 2.2 (2019-01-11)
        24. 14.24. Release 2.1 (2018-09-02)
        25. 14.25. Release 2.0 (2018-02-22)
        26. 14.26. Release 1.11.10 (2017-06-12)
        27. 14.27. Release 1.11 (2016-01-19)
        28. 14.28. Release 1.10 (2015-09-03)
        29. 14.29. Release 1.9 (2015-06-12)
        30. 14.30. Release 1.8 (2014-12-14)
        31. 14.31. Release 1.7 (2014-04-11)
        32. 14.32. Release 1.6.1 (2013-10-28)
        33. 14.33. Release 1.6 (2013-09-10)
        34. 14.34. Release 1.5.2 (2013-05-13)
        35. 14.35. Release 1.5 (2013-02-27)
        36. 14.36. Release 1.4 (2013-02-26)
        37. 14.37. Release 1.3 (2013-01-04)
        38. 14.38. Release 1.2 (2012-12-06)
        39. 14.39. Release 1.1 (2012-07-18)
        40. 14.40. Release 1.0 (2012-05-11)
        41. 14.41. Release 0.16 (2010-08-17)
        42. 14.42. Release 0.15 (2010-03-17)
        43. 14.43. Release 0.14 (2010-02-04)
        44. 14.44. Release 0.13 (2009-11-05)
        45. 14.45. Release 0.12 (2008-11-20)
        46. 14.46. Release 0.11 (2007-12-31)
        47. 14.47. Release 0.10.1 (2006-10-11)
        48. 14.48. Release 0.10 (2006-10-06)
        49. 14.49. Release 0.9.2 (2005-09-21)
        50. 14.50. Release 0.9.1 (2005-09-20)
        51. 14.51. Release 0.9 (2005-09-16)
        52. 14.52. Release 0.8.1 (2005-04-13)
        53. 14.53. Release 0.8 (2005-04-11)
        54. 14.54. Release 0.7 (2005-01-12)
        55. 14.55. Release 0.6 (2004-11-14)
        56. 14.56. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

     Warning
     This program is experimental and its interface is subject to change.

                                      Name

   nix help-stores - show help about store types and their settings

                                    Synopsis

   nix help-stores [option...]

   Nix supports different types of stores:

     * Dummy Store
     * Experimental Local Overlay Store
     * Experimental SSH Store
     * Experimental SSH Store with filesystem mounted
     * HTTP Binary Cache Store
     * Local Binary Cache Store
     * Local Daemon Store
     * Local Store
     * S3 Binary Cache Store
     * SSH Store

Store URL format

   Stores are specified using a URL-like syntax. For example, the command

 # nix path-info --store https://cache.nixos.org/ --json \
   /nix/store/a7gvj343m05j2s32xcnwr35v31ynlypr-coreutils-9.1

   fetches information about a store path in the HTTP binary cache located at
   https://cache.nixos.org/, which is a type of store.

   Store URLs can specify store settings using URL query strings, i.e. by
   appending ?name1=value1&name2=value2&... to the URL. For instance,

 --store ssh://machine.example.org?ssh-key=/path/to/my/key

   tells Nix to access the store on a remote machine via the SSH protocol,
   using /path/to/my/key as the SSH private key. The supported settings for
   each store type are documented below.

   The special store URL auto causes Nix to automatically select a store as
   follows:

     * Use the local store /nix/store if /nix/var/nix is writable by the
       current user.

     * Otherwise, if /nix/var/nix/daemon-socket/socket exists, connect to the
       Nix daemon listening on that socket.

     * Otherwise, on Linux only, use the local chroot store
       ~/.local/share/nix/root, which will be created automatically if it
       does not exist.

     * Otherwise, use the local store /nix/store.

                                  Dummy Store

   Store URL format: dummy://

   This store type represents a store that contains no store paths and cannot
   be written to. It's useful when you want to use the Nix evaluator when no
   actual Nix store exists, e.g.

 # nix eval --store dummy:// --expr '1 + 2'

Settings

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                        Experimental Local Overlay Store

     Warning

     This store is part of an experimental feature.

     To use this store, make sure the local-overlay-store experimental
     feature is enabled. For example, include the following in nix.conf:

 extra-experimental-features = local-overlay-store

   Store URL format: local-overlay

   This store type is a variation of the [local store] designed to leverage
   Linux's Overlay Filesystem (OverlayFS for short). Just as OverlayFS
   combines a lower and upper filesystem by treating the upper one as a patch
   against the lower, the local overlay store combines a lower store with an
   upper almost-[local store]. ("almost" because while the upper fileystems
   for OverlayFS is valid on its own, the upper almost-store is not a valid
   local store on its own because some references will dangle.) To use this
   store, you will first need to configure an OverlayFS mountpoint
   appropriately as Nix will not do this for you (though it will verify the
   mountpoint is configured correctly).

  Conceptual parts of a local overlay store

   This is a more abstract/conceptual description of the parts of a layered
   store, an authoritative reference. For more "practical" instructions, see
   the worked-out example in the next subsection.

   The parts of a local overlay store are as follows:

     * Lower store:

         Specified with the lower-store setting.

       This is any store implementation that includes a store directory as
       part of the native operating system filesystem. For example, this
       could be a [local store], [local daemon store], or even another local
       overlay store.

       The local overlay store never tries to modify the lower store in any
       way. Something else could modify the lower store, but there are
       restrictions on this Nix itself requires that this store only grow,
       and not change in other ways. For example, new store objects can be
       added, but deleting or modifying store objects is not allowed in
       general, because that will confuse and corrupt any local overlay store
       using those objects. (In addition, the underlying filesystem overlay
       mechanism may impose additional restrictions, see below.)

       The lower store must not change while it is mounted as part of an
       overlay store. To ensure it does not, you might want to mount the
       store directory read-only (which then requires the [read-only]
       parameter to be set to true).

          * Lower store directory:

              Specified with lower-store.real setting.

            This is the directory used/exposed by the lower store.

            As specified above, Nix requires the local store can only grow
            not change in other ways. Linux's OverlayFS in addition imposes
            the further requirement that this directory cannot change at all.
            That means that, while any local overlay store exists that is
            using this store as a lower store, this directory must not
            change.

          * Lower metadata source:

              Not directly specified. A consequence of the lower-store
              setting, depending on the type of lower store chosen.

            This is abstract, just some way to read the metadata of lower
            store store objects. For example it could be a SQLite database
            (for the [local store]), or a socket connection (for the [local
            daemon store]).

            This need not be writable. As stated above a local overlay store
            never tries to modify its lower store. The lower store's metadata
            is considered part of the lower store, just as the store's file
            system objects that appear in the store directory are.

     * Upper almost-store:

         Not directly specified. Instead the constituent parts are
         independently specified as described below.

       This is almost but not quite just a [local store]. That is because
       taken in isolation, not as part of a local overlay store, by itself,
       it would appear corrupted. But combined with everything else as part
       of an overlay local store, it is valid.

          * Upper layer directory:

              Specified with upper-layer setting.

            This contains additional store objects (or, strictly speaking,
            their file system objects that the local overlay store will
            extend the lower store with).

          * Upper store directory:

              Specified with the real setting. This the same as the base
              local store setting, and can also be indirectly specified with
              the root setting.

            This contains all the store objects from each of the two
            directories.

            The lower store directory and upper layer directory are combined
            via OverlayFS to create this directory. Nix doesn't do this
            itself, because it typically wouldn't have the permissions to do
            so, so it is the responsibility of the user to set this up first.
            Nix can, however, optionally check that that the OverlayFS mount
            settings appear as expected, matching Nix's own settings.

          * Upper SQLite database:

              Not directly specified. The location of the database instead
              depends on the state setting. It is is always ${state}/db.

            This contains the metadata of all of the upper layer store
            objects (everything beyond their file system objects), and also
            duplicate copies of some lower layer store object's metadta. The
            duplication is so the metadata for the closure of upper layer
            store objects can be found entirely within the upper layer. (This
            allows us to use the same SQL Schema as the [local store]'s
            SQLite database, as foreign keys in that schema enforce closure
            metadata to be self-contained in this way.)

  Example filesystem layout

   Here is a worked out example of usage, following the concepts in the
   previous section.

   Say we have the following paths:

     * /mnt/example/merged-store/nix/store

     * /mnt/example/store-a/nix/store

     * /mnt/example/store-b

   Then the following store URI can be used to access a local-overlay store
   at /mnt/example/merged-store:

 local-overlay://?root=/mnt/example/merged-store&lower-store=/mnt/example/store-a&upper-layer=/mnt/example/store-b

   The lower store directory is located at /mnt/example/store-a/nix/store,
   while the upper layer is at /mnt/example/store-b.

   Before accessing the overlay store you will need to ensure the OverlayFS
   mount is set up correctly:

 mount -t overlay overlay \
   -o lowerdir="/mnt/example/store-a/nix/store" \
   -o upperdir="/mnt/example/store-b" \
   -o workdir="/mnt/example/workdir" \
   "/mnt/example/merged-store/nix/store"

   Note that OverlayFS requires /mnt/example/workdir to be on the same volume
   as the upperdir.

   By default, Nix will check that the mountpoint as been set up correctly
   and fail with an error if it has not. You can override this behaviour by
   passing check-mount=false if you need to.

Settings

     * check-mount

       Check that the overlay filesystem is correctly mounted.

       Nix does not manage the overlayfs mount point itself, but the correct
       functioning of the overlay store does depend on this mount point being
       set up correctly. Rather than just assume this is the case, check that
       the lowerdir and upperdir options are what we expect them to be. This
       check is on by default, but can be disabled if needed.

       Default: true

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * lower-store

       Store URL for the lower store. The default is auto (i.e. use the Nix
       daemon or /nix/store directly).

       Must be a store with a store dir on the file system. Must be used as
       OverlayFS lower layer for this store's store dir.

       Default: empty

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * read-only

       Allow this store to be opened when its database is on a read-only
       filesystem.

       Normally Nix will attempt to open the store database in read-write
       mode, even for querying (when write access is not needed), causing it
       to fail if the database is on a read-only filesystem.

       Enable read-only mode to disable locking and open the SQLite database
       with the immutable parameter set.

         Warning Do not use this unless the filesystem is read-only.

         Using it when the filesystem is writable can cause incorrect query
         results or corruption errors if the database is changed by another
         process. While the filesystem the database resides on might appear
         to be read-only, consider whether another user or system might have
         write access to it.

       Default: false

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * remount-hook

       Script or other executable to run when overlay filesystem needs
       remounting.

       This is occasionally necessary when deleting a store path that exists
       in both upper and lower layers. In such a situation, bypassing
       OverlayFS and deleting the path in the upper layer directly is the
       only way to perform the deletion without creating a "whiteout".
       However this causes the OverlayFS kernel data structures to get
       out-of-sync, and can lead to 'stale file handle' errors; remounting
       solves the problem.

       The store directory is passed as an argument to the invoked
       executable.

       Default: empty

     * require-sigs

       Whether store paths copied into this store should have a trusted
       signature.

       Default: true

     * root

       Directory prefixed to all other paths.

       Default: ``

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * upper-layer

       Directory containing the OverlayFS upper layer for this store's store
       dir.

       Default: empty

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                 Experimental SSH Store with filesystem mounted

     Warning

     This store is part of an experimental feature.

     To use this store, make sure the mounted-ssh-store experimental feature
     is enabled. For example, include the following in nix.conf:

 extra-experimental-features = mounted-ssh-store

   Store URL format: mounted-ssh-ng://[username@]hostname

   Experimental store type that allows full access to a Nix store on a remote
   machine, and additionally requires that store be mounted in the local file
   system.

   The mounting of that store is not managed by Nix, and must by managed
   manually. It could be accomplished with SSHFS or NFS, for example.

   The local file system is used to optimize certain operations. For example,
   rather than serializing Nix archives and sending over the Nix channel, we
   can directly access the file system data via the mount-point.

   The local file system is also used to make certain operations possible
   that wouldn't otherwise be. For example, persistent GC roots can be
   created if they reside on the same file system as the remote store: the
   remote side will create the symlinks necessary to avoid race conditions.

Settings

     * base64-ssh-public-host-key

       The public host key of the remote machine.

       Default: empty

     * compress

       Whether to enable SSH compression.

       Default: false

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * max-connection-age

       Maximum age of a connection before it is closed.

       Default: 4294967295

     * max-connections

       Maximum number of concurrent connections to the Nix daemon.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * remote-program

       Path to the nix-daemon executable on the remote machine.

       Default: nix-daemon

     * remote-store

       Store URL to be used on the remote machine. The default is auto (i.e.
       use the Nix daemon or /nix/store directly).

       Default: empty

     * root

       Directory prefixed to all other paths.

       Default: ``

     * ssh-key

       Path to the SSH private key used to authenticate to the remote
       machine.

       Default: empty

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                             Experimental SSH Store

   Store URL format: ssh-ng://[username@]hostname

   Experimental store type that allows full access to a Nix store on a remote
   machine.

Settings

     * base64-ssh-public-host-key

       The public host key of the remote machine.

       Default: empty

     * compress

       Whether to enable SSH compression.

       Default: false

     * max-connection-age

       Maximum age of a connection before it is closed.

       Default: 4294967295

     * max-connections

       Maximum number of concurrent connections to the Nix daemon.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * remote-program

       Path to the nix-daemon executable on the remote machine.

       Default: nix-daemon

     * remote-store

       Store URL to be used on the remote machine. The default is auto (i.e.
       use the Nix daemon or /nix/store directly).

       Default: empty

     * ssh-key

       Path to the SSH private key used to authenticate to the remote
       machine.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                            HTTP Binary Cache Store

   Store URL format: http://..., https://...

   This store allows a binary cache to be accessed via the HTTP protocol.

Settings

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

                            Local Binary Cache Store

   Store URL format: file://path

   This store allows reading and writing a binary cache stored in path in the
   local filesystem. If path does not exist, it will be created.

   For example, the following builds or downloads nixpkgs#hello into the
   local store and then copies it to the binary cache in /tmp/binary-cache:

 # nix copy --to file:///tmp/binary-cache nixpkgs#hello

Settings

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

                               Local Daemon Store

   Store URL format: daemon, unix://path

   This store type accesses a Nix store by talking to a Nix daemon listening
   on the Unix domain socket path. The store pseudo-URL daemon is equivalent
   to unix:///nix/var/nix/daemon-socket/socket.

Settings

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * max-connection-age

       Maximum age of a connection before it is closed.

       Default: 4294967295

     * max-connections

       Maximum number of concurrent connections to the Nix daemon.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * root

       Directory prefixed to all other paths.

       Default: ``

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                                  Local Store

   Store URL format: local, root

   This store type accesses a Nix store in the local filesystem directly
   (i.e. not via the Nix daemon). root is an absolute path that is prefixed
   to other directories such as the Nix store directory. The store pseudo-URL
   local denotes a store that uses / as its root directory.

   A store that uses a root other than / is called a chroot store. With such
   stores, the store directory is "logically" still /nix/store, so programs
   stored in them can only be built and executed by chroot-ing into root.
   Chroot stores only support building and running on Linux when mount
   namespaces and user namespaces are enabled.

   For example, the following uses /tmp/root as the chroot environment to
   build or download nixpkgs#hello and then execute it:

 # nix run --store /tmp/root nixpkgs#hello
 Hello, world!

   Here, the "physical" store location is /tmp/root/nix/store, and Nix's
   store metadata is in /tmp/root/nix/var/nix/db.

   It is also possible, but not recommended, to change the "logical" location
   of the Nix store from its default of /nix/store. This makes it impossible
   to use default substituters such as https://cache.nixos.org/, and thus you
   may have to build everything locally. Here is an example:

 # nix build --store 'local?store=/tmp/my-nix/store&state=/tmp/my-nix/state&log=/tmp/my-nix/log' nixpkgs#hello

Settings

     * log

       directory where Nix will store log files.

       Default: /nix/var/log/nix

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * read-only

       Allow this store to be opened when its database is on a read-only
       filesystem.

       Normally Nix will attempt to open the store database in read-write
       mode, even for querying (when write access is not needed), causing it
       to fail if the database is on a read-only filesystem.

       Enable read-only mode to disable locking and open the SQLite database
       with the immutable parameter set.

         Warning Do not use this unless the filesystem is read-only.

         Using it when the filesystem is writable can cause incorrect query
         results or corruption errors if the database is changed by another
         process. While the filesystem the database resides on might appear
         to be read-only, consider whether another user or system might have
         write access to it.

       Default: false

     * real

       Physical path of the Nix store.

       Default: /nix/store

     * require-sigs

       Whether store paths copied into this store should have a trusted
       signature.

       Default: true

     * root

       Directory prefixed to all other paths.

       Default: ``

     * state

       Directory where Nix will store state.

       Default: /dummy

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                             S3 Binary Cache Store

   Store URL format: s3://bucket-name

   This store allows reading and writing a binary cache stored in an AWS S3
   (or S3-compatible service) bucket. This store shares many idioms with the
   HTTP Binary Cache Store.

   For AWS S3, the binary cache URL for a bucket named example-nix-cache will
   be exactly s3://example-nix-cache. For S3 compatible binary caches,
   consult that cache's documentation.

  Anonymous reads to your S3-compatible binary cache

     If your binary cache is publicly accessible and does not require
     authentication, it is simplest to use the [HTTP Binary Cache Store]
     rather than S3 Binary Cache Store with
     https://example-nix-cache.s3.amazonaws.com instead of
     s3://example-nix-cache.

   Your bucket will need a bucket policy like the following to be accessible:

 {
     "Id": "DirectReads",
     "Version": "2012-10-17",
     "Statement": [
         {
             "Sid": "AllowDirectReads",
             "Action": [
                 "s3:GetObject",
                 "s3:GetBucketLocation"
             ],
             "Effect": "Allow",
             "Resource": [
                 "arn:aws:s3:::example-nix-cache",
                 "arn:aws:s3:::example-nix-cache/*"
             ],
             "Principal": "*"
         }
     ]
 }

  Authentication

   Nix will use the default credential provider chain for authenticating
   requests to Amazon S3.

   Note that this means Nix will read environment variables and files with
   different idioms than with Nix's own settings, as implemented by the AWS
   SDK. Consult the documentation linked above for further details.

  Authenticated reads to your S3 binary cache

   Your bucket will need a bucket policy allowing the desired users to
   perform the s3:GetObject and s3:GetBucketLocation action on all objects in
   the bucket. The anonymous policy given above can be updated to have a
   restricted Principal to support this.

  Authenticated writes to your S3-compatible binary cache

   Your account will need an IAM policy to support uploading to the bucket:

 {
   "Version": "2012-10-17",
   "Statement": [
     {
       "Sid": "UploadToCache",
       "Effect": "Allow",
       "Action": [
         "s3:AbortMultipartUpload",
         "s3:GetBucketLocation",
         "s3:GetObject",
         "s3:ListBucket",
         "s3:ListBucketMultipartUploads",
         "s3:ListMultipartUploadParts",
         "s3:PutObject"
       ],
       "Resource": [
         "arn:aws:s3:::example-nix-cache",
         "arn:aws:s3:::example-nix-cache/*"
       ]
     }
   ]
 }

  Examples

   With bucket policies and authentication set up as described above,
   uploading works via nix copy (experimental).

     * To upload with a specific credential profile for Amazon S3:

 $ nix copy nixpkgs.hello \
   --to 's3://example-nix-cache?profile=cache-upload&region=eu-west-2'

     * To upload to an S3-compatible binary cache:

 $ nix copy nixpkgs.hello --to \
   's3://example-nix-cache?profile=cache-upload&scheme=https&endpoint=minio.example.com'

Settings

     * buffer-size

       Size (in bytes) of each part in multi-part uploads.

       Default: 5242880

     * compression

       NAR compression method (xz, bzip2, gzip, zstd, or none).

       Default: xz

     * compression-level

       The preset level to be used when compressing NARs. The meaning and
       accepted values depend on the compression method selected. -1
       specifies that the default compression level should be used.

       Default: -1

     * endpoint

       The URL of the endpoint of an S3-compatible service such as MinIO. Do
       not specify this setting if you're using Amazon S3.

         Note

         This endpoint must support HTTPS and will use path-based addressing
         instead of virtual host based addressing.

       Default: empty

     * index-debug-info

       Whether to index DWARF debug info files by build ID. This allows
       dwarffs to fetch debug info on demand

       Default: false

     * local-nar-cache

       Path to a local cache of NARs fetched from this binary cache, used by
       commands such as nix store cat.

       Default: empty

     * log-compression

       Compression method for log/* files. It is recommended to use a
       compression method supported by most web browsers (e.g. brotli).

       Default: empty

     * ls-compression

       Compression method for .ls files.

       Default: empty

     * multipart-upload

       Whether to use multi-part uploads.

       Default: false

     * narinfo-compression

       Compression method for .narinfo files.

       Default: empty

     * parallel-compression

       Enable multi-threaded compression of NARs. This is currently only
       available for xz and zstd.

       Default: false

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * profile

       The name of the AWS configuration profile to use. By default Nix will
       use the default profile.

       Default: empty

     * region

       The region of the S3 bucket. If your bucket is not in us–east-1, you
       should always explicitly specify the region parameter.

       Default: us-east-1

     * scheme

       The scheme used for S3 requests, https (default) or http. This option
       allows you to disable HTTPS for binary caches which don't support it.

         Note

         HTTPS should be used if the cache might contain sensitive
         information.

       Default: empty

     * secret-key

       Path to the secret key used to sign the binary cache.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

     * write-nar-listing

       Whether to write a JSON file that lists the files in each NAR.

       Default: false

                                   SSH Store

   Store URL format: ssh://[username@]hostname

   This store type allows limited access to a remote store on another machine
   via SSH.

Settings

     * base64-ssh-public-host-key

       The public host key of the remote machine.

       Default: empty

     * compress

       Whether to enable SSH compression.

       Default: false

     * max-connections

       Maximum number of concurrent SSH connections.

       Default: 1

     * path-info-cache-size

       Size of the in-memory store path metadata cache.

       Default: 65536

     * priority

       Priority of this store when used as a substituter. A lower value means
       a higher priority.

       Default: 0

     * remote-program

       Path to the nix-store executable on the remote machine.

       Default: nix-store

     * remote-store

       Store URL to be used on the remote machine. The default is auto (i.e.
       use the Nix daemon or /nix/store directly).

       Default: empty

     * ssh-key

       Path to the SSH private key used to authenticate to the remote
       machine.

       Default: empty

     * store

       Logical location of the Nix store, usually /nix/store. Note that you
       can only copy store paths between stores if they have the same store
       setting.

       Default: /nix/store

     * system-features

       Optional system features available on the system this store uses to
       build derivations.

       Example: "kvm"

       Default: machine-specific

     * trusted

       Whether paths from this store can be used as substitutes even if they
       are not signed by a key listed in the trusted-public-keys setting.

       Default: false

     * want-mass-query

       Whether this store can be queried efficiently for path validity when
       used as a substituter.

       Default: false

                                    Options

Logging-related options

     * --debug

       Set the logging verbosity level to 'debug'.

     * --log-format format

       Set the format of log output; one of raw, internal-json, bar or
       bar-with-logs.

     * --print-build-logs / -L

       Print full build logs on standard error.

     * --quiet

       Decrease the logging verbosity level.

     * --verbose / -v

       Increase the logging verbosity level.

Miscellaneous global options

     * --help

       Show usage information.

     * --offline

       Disable substituters and consider all previously downloaded files
       up-to-date.

     * --option name value

       Set the Nix configuration setting name to value (overriding nix.conf).

     * --refresh

       Consider all previously downloaded files out-of-date.

     * --version

       Show version information.

     Note

     See man nix.conf for overriding configuration settings with command line
     flags.
