   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2.   1. 4.1.1. Content-Addressing File System Objects
         3. 4.2. Store Object
         4.   1. 4.2.1. Content-Addressing Store Objects
         5. 4.3. Store Path
         6. 4.4. Store Types
         7.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesystem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2.   1. 5.1.1. String context
         3. 5.2. Syntax and semantics
         4.   1. 5.2.1. Identifiers
              2. 5.2.2. Scoping rules
              3. 5.2.3. String interpolation
              4. 5.2.4. Lookup path
         5. 5.3. Operators
         6. 5.4. Built-ins
         7.   1. 5.4.1. Derivations
              2.   1. 5.4.1.1. Advanced Attributes
                   2. 5.4.1.2. Import From Derivation
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix env
             15. 8.5.15. nix env shell
             16. 8.5.16. nix eval
             17. 8.5.17. nix flake
             18. 8.5.18. nix flake archive
             19. 8.5.19. nix flake check
             20. 8.5.20. nix flake clone
             21. 8.5.21. nix flake info
             22. 8.5.22. nix flake init
             23. 8.5.23. nix flake lock
             24. 8.5.24. nix flake metadata
             25. 8.5.25. nix flake new
             26. 8.5.26. nix flake prefetch
             27. 8.5.27. nix flake show
             28. 8.5.28. nix flake update
             29. 8.5.29. nix fmt
             30. 8.5.30. nix hash
             31. 8.5.31. nix hash convert
             32. 8.5.32. nix hash file
             33. 8.5.33. nix hash path
             34. 8.5.34. nix hash to-base16
             35. 8.5.35. nix hash to-base32
             36. 8.5.36. nix hash to-base64
             37. 8.5.37. nix hash to-sri
             38. 8.5.38. nix help
             39. 8.5.39. nix help-stores
             40. 8.5.40. nix key
             41. 8.5.41. nix key convert-secret-to-public
             42. 8.5.42. nix key generate-secret
             43. 8.5.43. nix log
             44. 8.5.44. nix nar
             45. 8.5.45. nix nar cat
             46. 8.5.46. nix nar dump-path
             47. 8.5.47. nix nar ls
             48. 8.5.48. nix nar pack
             49. 8.5.49. nix path-info
             50. 8.5.50. nix print-dev-env
             51. 8.5.51. nix profile
             52. 8.5.52. nix profile diff-closures
             53. 8.5.53. nix profile history
             54. 8.5.54. nix profile install
             55. 8.5.55. nix profile list
             56. 8.5.56. nix profile remove
             57. 8.5.57. nix profile rollback
             58. 8.5.58. nix profile upgrade
             59. 8.5.59. nix profile wipe-history
             60. 8.5.60. nix realisation
             61. 8.5.61. nix realisation info
             62. 8.5.62. nix registry
             63. 8.5.63. nix registry add
             64. 8.5.64. nix registry list
             65. 8.5.65. nix registry pin
             66. 8.5.66. nix registry remove
             67. 8.5.67. nix repl
             68. 8.5.68. nix run
             69. 8.5.69. nix search
             70. 8.5.70. nix store
             71. 8.5.71. nix store add
             72. 8.5.72. nix store add-file
             73. 8.5.73. nix store add-path
             74. 8.5.74. nix store cat
             75. 8.5.75. nix store copy-log
             76. 8.5.76. nix store copy-sigs
             77. 8.5.77. nix store delete
             78. 8.5.78. nix store diff-closures
             79. 8.5.79. nix store dump-path
             80. 8.5.80. nix store gc
             81. 8.5.81. nix store info
             82. 8.5.82. nix store ls
             83. 8.5.83. nix store make-content-addressed
             84. 8.5.84. nix store optimise
             85. 8.5.85. nix store path-from-hash-part
             86. 8.5.86. nix store ping
             87. 8.5.87. nix store prefetch-file
             88. 8.5.88. nix store repair
             89. 8.5.89. nix store sign
             90. 8.5.90. nix store verify
             91. 8.5.91. nix upgrade-nix
             92. 8.5.92. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. C API
   19. 12. Glossary
   20. 13. Development
   21.   1. 13.1. Building
         2. 13.2. Testing
         3. 13.3. Documentation
         4. 13.4. CLI guideline
         5. 13.5. JSON guideline
         6. 13.6. C++ style guide
         7. 13.7. Experimental Features
         8. 13.8. Contributing
   22. 14. Releases
   23.   1. 14.1. Release 2.24 (2024-07-31)
         2. 14.2. Release 2.23 (2024-06-03)
         3. 14.3. Release 2.22 (2024-04-23)
         4. 14.4. Release 2.21 (2024-03-11)
         5. 14.5. Release 2.20 (2024-01-29)
         6. 14.6. Release 2.19 (2023-11-17)
         7. 14.7. Release 2.18 (2023-09-20)
         8. 14.8. Release 2.17 (2023-07-24)
         9. 14.9. Release 2.16 (2023-05-31)
        10. 14.10. Release 2.15 (2023-04-11)
        11. 14.11. Release 2.14 (2023-02-28)
        12. 14.12. Release 2.13 (2023-01-17)
        13. 14.13. Release 2.12 (2022-12-06)
        14. 14.14. Release 2.11 (2022-08-25)
        15. 14.15. Release 2.10 (2022-07-11)
        16. 14.16. Release 2.9 (2022-05-30)
        17. 14.17. Release 2.8 (2022-04-19)
        18. 14.18. Release 2.7 (2022-03-07)
        19. 14.19. Release 2.6 (2022-01-24)
        20. 14.20. Release 2.5 (2021-12-13)
        21. 14.21. Release 2.4 (2021-11-01)
        22. 14.22. Release 2.3 (2019-09-04)
        23. 14.23. Release 2.2 (2019-01-11)
        24. 14.24. Release 2.1 (2018-09-02)
        25. 14.25. Release 2.0 (2018-02-22)
        26. 14.26. Release 1.11.10 (2017-06-12)
        27. 14.27. Release 1.11 (2016-01-19)
        28. 14.28. Release 1.10 (2015-09-03)
        29. 14.29. Release 1.9 (2015-06-12)
        30. 14.30. Release 1.8 (2014-12-14)
        31. 14.31. Release 1.7 (2014-04-11)
        32. 14.32. Release 1.6.1 (2013-10-28)
        33. 14.33. Release 1.6 (2013-09-10)
        34. 14.34. Release 1.5.2 (2013-05-13)
        35. 14.35. Release 1.5 (2013-02-27)
        36. 14.36. Release 1.4 (2013-02-26)
        37. 14.37. Release 1.3 (2013-01-04)
        38. 14.38. Release 1.2 (2012-12-06)
        39. 14.39. Release 1.1 (2012-07-18)
        40. 14.40. Release 1.0 (2012-05-11)
        41. 14.41. Release 0.16 (2010-08-17)
        42. 14.42. Release 0.15 (2010-03-17)
        43. 14.43. Release 0.14 (2010-02-04)
        44. 14.44. Release 0.13 (2009-11-05)
        45. 14.45. Release 0.12 (2008-11-20)
        46. 14.46. Release 0.11 (2007-12-31)
        47. 14.47. Release 0.10.1 (2006-10-11)
        48. 14.48. Release 0.10 (2006-10-06)
        49. 14.49. Release 0.9.2 (2005-09-21)
        50. 14.50. Release 0.9.1 (2005-09-20)
        51. 14.51. Release 0.9 (2005-09-16)
        52. 14.52. Release 0.8.1 (2005-04-13)
        53. 14.53. Release 0.8 (2005-04-11)
        54. 14.54. Release 0.7 (2005-01-12)
        55. 14.55. Release 0.6 (2004-11-14)
        56. 14.56. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

     Warning
     This program is experimental and its interface is subject to change.

                                      Name

   nix why-depends - show why a package has another package in its closure

                                    Synopsis

   nix why-depends [option...] package dependency

                                    Examples

     * Show one path through the dependency graph leading from Hello to
       Glibc:

 # nix why-depends nixpkgs#hello nixpkgs#glibc
 /nix/store/v5sv61sszx301i0x6xysaqzla09nksnd-hello-2.10
 └───bin/hello: …...................../nix/store/9l06v7fc38c1x3r2iydl15ksgz0ysb82-glibc-2.32/lib/ld-linux-x86-64.…
     → /nix/store/9l06v7fc38c1x3r2iydl15ksgz0ysb82-glibc-2.32

     * Show all files and paths in the dependency graph leading from
       Thunderbird to libX11:

 # nix why-depends --all nixpkgs#thunderbird nixpkgs#xorg.libX11
 /nix/store/qfc8729nzpdln1h0hvi1ziclsl3m84sr-thunderbird-78.5.1
 ├───lib/thunderbird/libxul.so: …6wrw-libxcb-1.14/lib:/nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0/lib:/nix/store/ssf…
 │   → /nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0
 ├───lib/thunderbird/libxul.so: …pxyc-libXt-1.2.0/lib:/nix/store/1qj29ipxl2fyi2b13l39hdircq17gnk0-libXdamage-1.1.5/lib:/nix/store…
 │   → /nix/store/1qj29ipxl2fyi2b13l39hdircq17gnk0-libXdamage-1.1.5
 │   ├───lib/libXdamage.so.1.1.0: …-libXfixes-5.0.3/lib:/nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0/lib:/nix/store/9l0…
 │   │   → /nix/store/adzfjjh8w25vdr0xdx9x16ah4f5rqrw5-libX11-1.7.0
 …

     * Show why Glibc depends on itself:

 # nix why-depends nixpkgs#glibc nixpkgs#glibc
 /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31
 └───lib/ld-2.31.so: …che       Do not use /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31/etc/ld.so.cache.  --…
     → /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31

     * Show why Geeqie has a build-time dependency on systemd:

 # nix why-depends --derivation nixpkgs#geeqie nixpkgs#systemd
 /nix/store/drrpq2fqlrbj98bmazrnww7hm1in3wgj-geeqie-1.4.drv
 └───/: …atch.drv",["out"]),("/nix/store/qzh8dyq3lfbk3i1acbp7x9wh3il2imiv-gtk+3-3.24.21.drv",["dev"]),("/…
     → /nix/store/qzh8dyq3lfbk3i1acbp7x9wh3il2imiv-gtk+3-3.24.21.drv
     └───/: …16.0.drv",["dev"]),("/nix/store/8kp79fyslf3z4m3dpvlh6w46iaadz5c2-cups-2.3.3.drv",["dev"]),("/nix…
         → /nix/store/8kp79fyslf3z4m3dpvlh6w46iaadz5c2-cups-2.3.3.drv
         └───/: ….3.1.drv",["out"]),("/nix/store/yd3ihapyi5wbz1kjacq9dbkaq5v5hqjg-systemd-246.4.drv",["dev"]),("/…
             → /nix/store/yd3ihapyi5wbz1kjacq9dbkaq5v5hqjg-systemd-246.4.drv

                                  Description

   Nix automatically determines potential runtime dependencies between store
   paths by scanning for the hash parts of store paths. For instance, if
   there exists a store path
   /nix/store/9df65igwjmf2wbw0gbrrgair6piqjgmi-glibc-2.31, and a file inside
   another store path contains the string 9df65igw…, then the latter store
   path refers to the former, and thus might need it at runtime. Nix always
   maintains the existence of the transitive closure of a store path under
   the references relationship; it is therefore not possible to install a
   store path without having all of its references present.

   Sometimes Nix packages end up with unexpected runtime dependencies; for
   instance, a reference to a compiler might accidentally end up in a binary,
   causing the former to be in the latter's closure. This kind of closure
   size bloat is undesirable.

   nix why-depends allows you to diagnose the cause of such issues. It shows
   why the store path package depends on the store path dependency, by
   showing a shortest sequence in the references graph from the former to the
   latter. Also, for each node along this path, it shows a file fragment
   containing a reference to the next store path in the sequence.

   To show why derivation package has a build-time rather than runtime
   dependency on derivation dependency, use --derivation.

                                    Options

     * --all / -a

       Show all edges in the dependency graph leading from package to
       dependency, rather than just a shortest path.

     * --precise

       For each edge in the dependency graph, show the files in the parent
       that cause the dependency.

Common evaluation options

     * --arg name expr

       Pass the value expr as the argument name to Nix functions.

     * --arg-from-file name path

       Pass the contents of file path as the argument name to Nix functions.

     * --arg-from-stdin name

       Pass the contents of stdin as the argument name to Nix functions.

     * --argstr name string

       Pass the string string as the argument name to Nix functions.

     * --debugger

       Start an interactive environment if evaluation fails.

     * --eval-store store-url

       The URL of the Nix store to use for evaluation, i.e. to store
       derivations (.drv files) and inputs referenced by them.

     * --impure

       Allow access to mutable paths and repositories.

     * --include / -I path

       Add path to search path entries used to resolve lookup paths

       This option may be given multiple times.

       Paths added through -I take precedence over the nix-path configuration
       setting and the NIX_PATH environment variable.

     * --override-flake original-ref resolved-ref

       Override the flake registries, redirecting original-ref to
       resolved-ref.

Common flake-related options

     * --commit-lock-file

       Commit changes to the flake's lock file.

     * --inputs-from flake-url

       Use the inputs of the specified flake as registry entries.

     * --no-registries

       Don't allow lookups in the flake registries.

         DEPRECATED

         Use --no-use-registries instead.

     * --no-update-lock-file

       Do not allow any updates to the flake's lock file.

     * --no-write-lock-file

       Do not write the flake's newly generated lock file.

     * --output-lock-file flake-lock-path

       Write the given lock file instead of flake.lock within the top-level
       flake.

     * --override-input input-path flake-url

       Override a specific flake input (e.g. dwarffs/nixpkgs). This implies
       --no-write-lock-file.

     * --recreate-lock-file

       Recreate the flake's lock file from scratch.

         DEPRECATED

         Use nix flake update instead.

     * --reference-lock-file flake-lock-path

       Read the given lock file instead of flake.lock within the top-level
       flake.

     * --update-input input-path

       Update a specific flake input (ignoring its previous entry in the lock
       file).

         DEPRECATED

         Use nix flake update instead.

Logging-related options

     * --debug

       Set the logging verbosity level to 'debug'.

     * --log-format format

       Set the format of log output; one of raw, internal-json, bar or
       bar-with-logs.

     * --print-build-logs / -L

       Print full build logs on standard error.

     * --quiet

       Decrease the logging verbosity level.

     * --verbose / -v

       Increase the logging verbosity level.

Miscellaneous global options

     * --help

       Show usage information.

     * --offline

       Disable substituters and consider all previously downloaded files
       up-to-date.

     * --option name value

       Set the Nix configuration setting name to value (overriding nix.conf).

     * --refresh

       Consider all previously downloaded files out-of-date.

     * --repair

       During evaluation, rewrite missing or corrupted files in the Nix
       store. During building, rebuild missing or corrupted store paths.

     * --version

       Show version information.

Options that change the interpretation of installables

     * --derivation

       Operate on the store derivation rather than its outputs.

     * --expr expr

       Interpret installables as attribute paths relative to the Nix
       expression expr.

     * --file / -f file

       Interpret installables as attribute paths relative to the Nix
       expression stored in file. If file is the character -, then a Nix
       expression will be read from standard input. Implies --impure.

     Note

     See man nix.conf for overriding configuration settings with command line
     flags.
