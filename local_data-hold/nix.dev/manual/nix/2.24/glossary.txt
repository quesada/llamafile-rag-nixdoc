   [ ]
    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Nix Store
    6.   1. 4.1. File System Object
         2.   1. 4.1.1. Content-Addressing File System Objects
         3. 4.2. Store Object
         4.   1. 4.2.1. Content-Addressing Store Objects
         5. 4.3. Store Path
         6. 4.4. Store Types
         7.   1. 4.4.1. Dummy Store
              2. 4.4.2. Experimental Local Overlay Store
              3. 4.4.3. Experimental SSH Store
              4. 4.4.4. Experimental SSH Store with filesystem mounted
              5. 4.4.5. HTTP Binary Cache Store
              6. 4.4.6. Local Binary Cache Store
              7. 4.4.7. Local Daemon Store
              8. 4.4.8. Local Store
              9. 4.4.9. S3 Binary Cache Store
             10. 4.4.10. SSH Store
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2.   1. 5.1.1. String context
         3. 5.2. Syntax and semantics
         4.   1. 5.2.1. Identifiers
              2. 5.2.2. Scoping rules
              3. 5.2.3. String interpolation
              4. 5.2.4. Lookup path
         5. 5.3. Operators
         6. 5.4. Built-ins
         7.   1. 5.4.1. Derivations
              2.   1. 5.4.1.1. Advanced Attributes
                   2. 5.4.1.2. Import From Derivation
    9. 6. Package Management
   10.   1. 6.1. Profiles
         2. 6.2. Garbage Collection
         3.   1. 6.2.1. Garbage Collector Roots
   11. 7. Advanced Topics
   12.   1. 7.1. Sharing Packages Between Machines
         2.   1. 7.1.1. Serving a Nix store via HTTP
              2. 7.1.2. Serving a Nix store via SSH
         3. 7.2. Remote Builds
         4. 7.3. Tuning Cores and Jobs
         5. 7.4. Verifying Build Reproducibility
         6. 7.5. Using the post-build-hook
   13. 8. Command Reference
   14.   1. 8.1. Common Options
         2. 8.2. Common Environment Variables
         3. 8.3. Main Commands
         4.   1. 8.3.1. nix-build
              2. 8.3.2. nix-shell
              3. 8.3.3. nix-store
              4.   1. 8.3.3.1. nix-store --add-fixed
                   2. 8.3.3.2. nix-store --add
                   3. 8.3.3.3. nix-store --delete
                   4. 8.3.3.4. nix-store --dump-db
                   5. 8.3.3.5. nix-store --dump
                   6. 8.3.3.6. nix-store --export
                   7. 8.3.3.7. nix-store --gc
                   8. 8.3.3.8. nix-store --generate-binary-cache-key
                   9. 8.3.3.9. nix-store --import
                  10. 8.3.3.10. nix-store --load-db
                  11. 8.3.3.11. nix-store --optimise
                  12. 8.3.3.12. nix-store --print-env
                  13. 8.3.3.13. nix-store --query
                  14. 8.3.3.14. nix-store --read-log
                  15. 8.3.3.15. nix-store --realise
                  16. 8.3.3.16. nix-store --repair-path
                  17. 8.3.3.17. nix-store --restore
                  18. 8.3.3.18. nix-store --serve
                  19. 8.3.3.19. nix-store --verify-path
                  20. 8.3.3.20. nix-store --verify
              5. 8.3.4. nix-env
              6.   1. 8.3.4.1. nix-env --delete-generations
                   2. 8.3.4.2. nix-env --install
                   3. 8.3.4.3. nix-env --list-generations
                   4. 8.3.4.4. nix-env --query
                   5. 8.3.4.5. nix-env --rollback
                   6. 8.3.4.6. nix-env --set-flag
                   7. 8.3.4.7. nix-env --set
                   8. 8.3.4.8. nix-env --switch-generation
                   9. 8.3.4.9. nix-env --switch-profile
                  10. 8.3.4.10. nix-env --uninstall
                  11. 8.3.4.11. nix-env --upgrade
         5. 8.4. Utilities
         6.   1. 8.4.1. nix-channel
              2. 8.4.2. nix-collect-garbage
              3. 8.4.3. nix-copy-closure
              4. 8.4.4. nix-daemon
              5. 8.4.5. nix-hash
              6. 8.4.6. nix-instantiate
              7. 8.4.7. nix-prefetch-url
         7. 8.5. Experimental Commands
         8.   1. 8.5.1. nix
              2. 8.5.2. nix build
              3. 8.5.3. nix bundle
              4. 8.5.4. nix config
              5. 8.5.5. nix config check
              6. 8.5.6. nix config show
              7. 8.5.7. nix copy
              8. 8.5.8. nix daemon
              9. 8.5.9. nix derivation
             10. 8.5.10. nix derivation add
             11. 8.5.11. nix derivation show
             12. 8.5.12. nix develop
             13. 8.5.13. nix edit
             14. 8.5.14. nix env
             15. 8.5.15. nix env shell
             16. 8.5.16. nix eval
             17. 8.5.17. nix flake
             18. 8.5.18. nix flake archive
             19. 8.5.19. nix flake check
             20. 8.5.20. nix flake clone
             21. 8.5.21. nix flake info
             22. 8.5.22. nix flake init
             23. 8.5.23. nix flake lock
             24. 8.5.24. nix flake metadata
             25. 8.5.25. nix flake new
             26. 8.5.26. nix flake prefetch
             27. 8.5.27. nix flake show
             28. 8.5.28. nix flake update
             29. 8.5.29. nix fmt
             30. 8.5.30. nix hash
             31. 8.5.31. nix hash convert
             32. 8.5.32. nix hash file
             33. 8.5.33. nix hash path
             34. 8.5.34. nix hash to-base16
             35. 8.5.35. nix hash to-base32
             36. 8.5.36. nix hash to-base64
             37. 8.5.37. nix hash to-sri
             38. 8.5.38. nix help
             39. 8.5.39. nix help-stores
             40. 8.5.40. nix key
             41. 8.5.41. nix key convert-secret-to-public
             42. 8.5.42. nix key generate-secret
             43. 8.5.43. nix log
             44. 8.5.44. nix nar
             45. 8.5.45. nix nar cat
             46. 8.5.46. nix nar dump-path
             47. 8.5.47. nix nar ls
             48. 8.5.48. nix nar pack
             49. 8.5.49. nix path-info
             50. 8.5.50. nix print-dev-env
             51. 8.5.51. nix profile
             52. 8.5.52. nix profile diff-closures
             53. 8.5.53. nix profile history
             54. 8.5.54. nix profile install
             55. 8.5.55. nix profile list
             56. 8.5.56. nix profile remove
             57. 8.5.57. nix profile rollback
             58. 8.5.58. nix profile upgrade
             59. 8.5.59. nix profile wipe-history
             60. 8.5.60. nix realisation
             61. 8.5.61. nix realisation info
             62. 8.5.62. nix registry
             63. 8.5.63. nix registry add
             64. 8.5.64. nix registry list
             65. 8.5.65. nix registry pin
             66. 8.5.66. nix registry remove
             67. 8.5.67. nix repl
             68. 8.5.68. nix run
             69. 8.5.69. nix search
             70. 8.5.70. nix store
             71. 8.5.71. nix store add
             72. 8.5.72. nix store add-file
             73. 8.5.73. nix store add-path
             74. 8.5.74. nix store cat
             75. 8.5.75. nix store copy-log
             76. 8.5.76. nix store copy-sigs
             77. 8.5.77. nix store delete
             78. 8.5.78. nix store diff-closures
             79. 8.5.79. nix store dump-path
             80. 8.5.80. nix store gc
             81. 8.5.81. nix store info
             82. 8.5.82. nix store ls
             83. 8.5.83. nix store make-content-addressed
             84. 8.5.84. nix store optimise
             85. 8.5.85. nix store path-from-hash-part
             86. 8.5.86. nix store ping
             87. 8.5.87. nix store prefetch-file
             88. 8.5.88. nix store repair
             89. 8.5.89. nix store sign
             90. 8.5.90. nix store verify
             91. 8.5.91. nix upgrade-nix
             92. 8.5.92. nix why-depends
         9. 8.6. Files
        10.   1. 8.6.1. nix.conf
              2. 8.6.2. Profiles
              3.   1. 8.6.2.1. manifest.nix
                   2. 8.6.2.2. manifest.json
              4. 8.6.3. Channels
              5. 8.6.4. Default Nix expression
   15. 9. Architecture and Design
   16. 10. Formats and Protocols
   17.   1. 10.1. JSON Formats
         2.   1. 10.1.1. Store Object Info
              2. 10.1.2. Derivation
         3. 10.2. Serving Tarball Flakes
         4. 10.3. Store Path Specification
         5. 10.4. Nix Archive (NAR) Format
         6. 10.5. Derivation "ATerm" file format
   18. 11. C API
   19. 12. Glossary
   20. 13. Development
   21.   1. 13.1. Building
         2. 13.2. Testing
         3. 13.3. Documentation
         4. 13.4. CLI guideline
         5. 13.5. JSON guideline
         6. 13.6. C++ style guide
         7. 13.7. Experimental Features
         8. 13.8. Contributing
   22. 14. Releases
   23.   1. 14.1. Release 2.24 (2024-07-31)
         2. 14.2. Release 2.23 (2024-06-03)
         3. 14.3. Release 2.22 (2024-04-23)
         4. 14.4. Release 2.21 (2024-03-11)
         5. 14.5. Release 2.20 (2024-01-29)
         6. 14.6. Release 2.19 (2023-11-17)
         7. 14.7. Release 2.18 (2023-09-20)
         8. 14.8. Release 2.17 (2023-07-24)
         9. 14.9. Release 2.16 (2023-05-31)
        10. 14.10. Release 2.15 (2023-04-11)
        11. 14.11. Release 2.14 (2023-02-28)
        12. 14.12. Release 2.13 (2023-01-17)
        13. 14.13. Release 2.12 (2022-12-06)
        14. 14.14. Release 2.11 (2022-08-25)
        15. 14.15. Release 2.10 (2022-07-11)
        16. 14.16. Release 2.9 (2022-05-30)
        17. 14.17. Release 2.8 (2022-04-19)
        18. 14.18. Release 2.7 (2022-03-07)
        19. 14.19. Release 2.6 (2022-01-24)
        20. 14.20. Release 2.5 (2021-12-13)
        21. 14.21. Release 2.4 (2021-11-01)
        22. 14.22. Release 2.3 (2019-09-04)
        23. 14.23. Release 2.2 (2019-01-11)
        24. 14.24. Release 2.1 (2018-09-02)
        25. 14.25. Release 2.0 (2018-02-22)
        26. 14.26. Release 1.11.10 (2017-06-12)
        27. 14.27. Release 1.11 (2016-01-19)
        28. 14.28. Release 1.10 (2015-09-03)
        29. 14.29. Release 1.9 (2015-06-12)
        30. 14.30. Release 1.8 (2014-12-14)
        31. 14.31. Release 1.7 (2014-04-11)
        32. 14.32. Release 1.6.1 (2013-10-28)
        33. 14.33. Release 1.6 (2013-09-10)
        34. 14.34. Release 1.5.2 (2013-05-13)
        35. 14.35. Release 1.5 (2013-02-27)
        36. 14.36. Release 1.4 (2013-02-26)
        37. 14.37. Release 1.3 (2013-01-04)
        38. 14.38. Release 1.2 (2012-12-06)
        39. 14.39. Release 1.1 (2012-07-18)
        40. 14.40. Release 1.0 (2012-05-11)
        41. 14.41. Release 0.16 (2010-08-17)
        42. 14.42. Release 0.15 (2010-03-17)
        43. 14.43. Release 0.14 (2010-02-04)
        44. 14.44. Release 0.13 (2009-11-05)
        45. 14.45. Release 0.12 (2008-11-20)
        46. 14.46. Release 0.11 (2007-12-31)
        47. 14.47. Release 0.10.1 (2006-10-11)
        48. 14.48. Release 0.10 (2006-10-06)
        49. 14.49. Release 0.9.2 (2005-09-21)
        50. 14.50. Release 0.9.1 (2005-09-20)
        51. 14.51. Release 0.9 (2005-09-16)
        52. 14.52. Release 0.8.1 (2005-04-13)
        53. 14.53. Release 0.8 (2005-04-11)
        54. 14.54. Release 0.7 (2005-01-12)
        55. 14.55. Release 0.6 (2004-11-14)
        56. 14.56. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                    Glossary

     * content address

       A content address is a secure way to reference immutable data. The
       reference is calculated directly from the content of the data being
       referenced, which means the reference is tamper proof --- variations
       of the data should always calculate to distinct content addresses.

       For how Nix uses content addresses, see:

          * Content-Addressing File System Objects
          * Content-Addressing Store Objects
          * content-addressed derivation

       Software Heritage's writing on Intrinsic and Extrinsic identifiers is
       also a good introduction to the value of content-addressing over other
       referencing schemes.

       Besides content addressing, the Nix store also uses input addressing.

     * derivation

       A description of a build task. The result of a derivation is a store
       object. Derivations declared in Nix expressions are specified using
       the derivation primitive. These are translated into low-level store
       derivations (implicitly by nix-build, or explicitly by
       nix-instantiate).

     * store derivation

       A derivation represented as a .drv file in the store. It has a store
       path, like any store object. It is the instantiated form of a
       derivation.

       Example: /nix/store/g946hcz4c8mdvq2g8vxx42z51qb71rvp-git-2.38.1.drv

       See nix derivation show (experimental) for displaying the contents of
       store derivations.

     * instantiate, instantiation

       Save an evaluated derivation as a store derivation in the Nix store.

       See nix-instantiate, which produces a store derivation from a Nix
       expression that evaluates to a derivation.

     * realise, realisation

       Ensure a store path is valid.

       This can be achieved by:

          * Fetching a pre-built store object from a substituter
          * Running the builder executable as specified in the corresponding
            derivation
          * Delegating to a remote machine and retrieving the outputs

       See nix-store --realise for a detailed description of the algorithm.

       See also nix-build and nix build (experimental).

     * content-addressed derivation

       A derivation which has the __contentAddressed attribute set to true.

     * fixed-output derivation (FOD)

       A derivation where a cryptographic hash of the output is determined in
       advance using the outputHash attribute, and where the builder
       executable has access to the network.

     * store

       A collection of store objects, with operations to manipulate that
       collection. See Nix Store for details.

       There are many types of stores, see Store Types for details.

     * binary cache

       A binary cache is a Nix store which uses a different format: its
       metadata and signatures are kept in .narinfo files rather than in a
       Nix database. This different format simplifies serving store objects
       over the network, but cannot host builds. Examples of binary caches
       include S3 buckets and the NixOS binary cache.

     * store path

       The location of a store object in the file system, i.e., an immediate
       child of the Nix store directory.

         Example

         /nix/store/a040m110amc4h71lds2jmr8qrkj2jhxd-git-2.38.1

       See Store Path for details.

     * file system object

       The Nix data model for representing simplified file system data.

       See File System Object for details.

     * store object

       Part of the contents of a store.

       A store object consists of a file system object, references to other
       store objects, and other metadata. It can be referred to by a store
       path.

       See Store Object for details.

     * IFD

       Import From Derivation

     * input-addressed store object

       A store object produced by building a non-content-addressed,
       non-fixed-output derivation.

     * content-addressed store object

       A store object which is content-addressed, i.e. whose store path is
       determined by its contents. This includes derivations, the outputs of
       content-addressed derivations, and the outputs of fixed-output
       derivations.

       See Content-Addressing Store Objects for details.

     * substitute

       A substitute is a command invocation stored in the Nix database that
       describes how to build a store object, bypassing the normal build
       mechanism (i.e., derivations). Typically, the substitute builds the
       store object by downloading a pre-built version of the store object
       from some server.

     * substituter

       An additional store from which Nix can obtain store objects instead of
       building them. Often the substituter is a binary cache, but any store
       can serve as substituter.

       See the substituters configuration option for details.

     * purity

       The assumption that equal Nix derivations when run always produce the
       same output. This cannot be guaranteed in general (e.g., a builder can
       rely on external inputs such as the network or the system time) but
       the Nix model assumes it.

     * impure derivation

       An experimental feature that allows derivations to be explicitly
       marked as impure, so that they are always rebuilt, and their outputs
       not reused by subsequent calls to realise them.

     * Nix database

       An SQlite database to track references between store objects. This is
       an implementation detail of the local store.

       Default location: /nix/var/nix/db.

     * Nix expression

         1. Commonly, a high-level description of software packages and
            compositions thereof. Deploying software using Nix entails
            writing Nix expressions for your packages. Nix expressions
            specify derivations, which are instantiated into the Nix store as
            store derivations. These derivations can then be realised to
            produce outputs.

         2. A syntactically valid use of the Nix language. For example, the
            contents of a .nix file form an expression.

     * reference

       A store object O is said to have a reference to a store object P if a
       store path to P appears in the contents of O.

       Store objects can refer to both other store objects and themselves.
       References from a store object to itself are called self-references.
       References other than a self-reference must not form a cycle.

     * reachable

       A store path Q is reachable from another store path P if Q is in the
       closure of the references relation.

     * closure

       The closure of a store path is the set of store paths that are
       directly or indirectly “reachable” from that store path; that is, it’s
       the closure of the path under the references relation. For a package,
       the closure of its derivation is equivalent to the build-time
       dependencies, while the closure of its output path is equivalent to
       its runtime dependencies. For correct deployment it is necessary to
       deploy whole closures, since otherwise at runtime files could be
       missing. The command nix-store --query --requisites prints out
       closures of store paths.

       As an example, if the store object at path P contains a reference to a
       store object at path Q, then Q is in the closure of P. Further, if Q
       references R then R is also in the closure of P.

     * output

       A store object produced by a derivation. See the outputs argument to
       the derivation function for details.

     * output path

       The store path to the output of a derivation.

     * output closure
       The closure of an output path. It only contains what is [reachable]
       from the output.

     * deriving path

       Deriving paths are a way to refer to store objects that ar not yet
       realised. This is necessary because, in general and particularly for
       [content-addressed derivations][content-addressed derivation], the
       output path of an output is not known in advance. There are two forms:

          * constant: just a store path It can be made valid by copying it
            into the store: from the evaluator, command line interface or
            another store.

          * output: a pair of a store path to a derivation and an output
            name.

     * deriver

       The store derivation that produced an output path.

       The deriver for an output path can be queried with the --deriver
       option to nix-store --query.

     * validity

       A store path is valid if all store objects in its closure can be read
       from the store.

       For a local store, this means:

          * The store path leads to an existing store object in that store.
          * The store path is listed in the Nix database as being valid.
          * All paths in the store path's closure are valid.
     * user environment

       An automatically generated store object that consists of a set of
       symlinks to “active” applications, i.e., other store paths. These are
       generated automatically by nix-env. See profiles.

     * profile

       A symlink to the current user environment of a user, e.g.,
       /nix/var/nix/profiles/default.

     * installable

       Something that can be realised in the Nix store.

       See installables for nix commands (experimental) for details.

     * Nix Archive (NAR)

       A Nix ARchive. This is a serialisation of a path in the Nix store. It
       can contain regular files, directories and symbolic links. NARs are
       generated and unpacked using nix-store --dump and nix-store --restore.

       See Nix Archive for details.

     * ∅

       The empty set symbol. In the context of profile history, this denotes
       a package is not present in a particular version of the profile.

     * ε

       The epsilon symbol. In the context of a package, this means the
       version is empty. More precisely, the derivation does not have a
       version attribute.

     * package

         1. A software package; a collection of files and other data.

         2. A package attribute set.

     * package attribute set

       An attribute set containing the attribute type = "derivation";
       (derivation for historical reasons), as well as other attributes, such
       as

          * attributes that refer to the files of a [package], typically in
            the form of derivation outputs,
          * attributes that declare something about how the package is
            supposed to be installed or used,
          * other metadata or arbitrary attributes.
     * string interpolation

       Expanding expressions enclosed in ${ } within a string, path, or
       attribute name.

       See String interpolation for details.

     * base directory

       The location from which relative paths are resolved.

          * For expressions in a file, the base directory is the directory
            containing that file. This is analogous to the directory of a
            base URL.
          * For expressions written in command line arguments with --expr,
            the base directory is the current working directory.
     * experimental feature

       Not yet stabilized functionality guarded by named experimental feature
       flags. These flags are enabled or disabled with the
       experimental-features setting.

       See the contribution guide on the purpose and lifecycle of
       experimental feaures.
