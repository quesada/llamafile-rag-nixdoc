   Link: canonical
   Link: index: Index
   Link: search: Search
   Link: next: Nix language basics
   Link: prev: Declarative shell environments with shell.nix
   Skip to main content [ ] [ ]
   _____________________ Ctrl+K
   [IMG] nix.dev
   IFrame

   Official documentation for getting things done with Nix.

   _____________________ Ctrl+K
     * Install Nix
     * Tutorials [ ]
          * First steps [ ]
               * Ad hoc shell environments
               * Reproducible interpreted scripts
               * Declarative shell environments
               * Towards reproducibility: pinning Nixpkgs
          * Nix language basics
          * Packaging existing software
          * Package parameters and overrides with callPackage
          * Working with local files
          * Cross compilation
          * Module system [ ]
               * 1. A basic module
               * 2. Module system deep dive
          * NixOS [ ]
               * NixOS virtual machines
               * Building a bootable ISO image
               * Building and running Docker images
               * Integration testing with NixOS virtual machines
               * Provisioning remote machines via SSH
               * Installing NixOS on a Raspberry Pi
               * Deploying NixOS using Terraform
               * Setting up an HTTP binary cache
               * Setting up distributed builds
     * Guides [ ]
          * Recipes [ ]
               * Configure Nix to use a custom binary cache
               * Automatic environments
               * Dependencies in the development shell
               * Managing remote sources
               * Python development environment
               * Setting up post-build hooks
               * Continuous integration with GitHub Actions
          * Best practices
          * Troubleshooting
          * Frequently Asked Questions
     * Reference [ ]
          * Glossary
          * Nix reference manual [ ]
               * Nix pre-release (development)
               * Nix 2.24 (latest)
               * Nix 2.18 (in Nixpkgs rolling)
               * Nix 2.18 (in Nixpkgs 24.05)
               * Nix 2.18 (in Nixpkgs 23.11)
          * Nixpkgs manual
          * NixOS manual
          * Community projects
          * Support tools
          * Further reading
          * Pinning Nixpkgs
     * Concepts [ ]
          * Flakes
          * Frequently Asked Questions
     * Contributing [ ]
          * How to contribute
          * How to get help
          * Contributing documentation [ ]
               * Documentation resources
               * Documentation framework
               * Style guide
               * How to write a tutorial
     * Acknowledgements [ ]
          * Sponsors
     * Repository
     * Suggest edit
     * Open issue
     * .md
     * .pdf
   [ Submit ]

                    Towards reproducibility: pinning Nixpkgs

Contents

     * Pinning packages with URLs inside a Nix expression
     * Next steps

                   Towards reproducibility: pinning Nixpkgs#

   In various Nix examples, you’ll often see the following:

 1{ pkgs ? import <nixpkgs> {} }:
 2
 3...

   Note

   <nixpkgs> points to the file system path of some revision of Nixpkgs. Find
   more information on lookup paths in Nix language basics.

   This is a convenient way to quickly demonstrate a Nix expression and get
   it working by importing Nix packages.

   However, the resulting Nix expression is not fully reproducible.

Pinning packages with URLs inside a Nix expression#

   To create fully reproducible Nix expressions, we can pin an exact version
   of Nixpkgs.

   The simplest way to do this is to fetch the required Nixpkgs version as a
   tarball specified via the relevant Git commit hash:

 1{ pkgs ? import (fetchTarball "https://github.com/NixOS/nixpkgs/archive/06278c77b5d162e62df170fec307e83f1812d94b.tar.gz") {}
 2}:
 3
 4...

   Picking the commit can be done via status.nixos.org, which lists all the
   releases and the latest commit that has passed all tests.

   When choosing a commit, it is recommended to follow either

     * the latest stable NixOS release by using a specific version, such as
       nixos-21.05, or

     * the latest unstable release via nixos-unstable.

Next steps#

     * For more examples and details of the different ways to pin nixpkgs,
       see Pinning Nixpkgs.

     * Automatically managing remote sources with npins

   previous

   Declarative shell environments with shell.nix

   next

   Nix language basics

   Contents
     * Pinning packages with URLs inside a Nix expression
     * Next steps

   By the Nix documentation team and contributors.

   © Copyright 2016-2024, NixOS Foundation.
