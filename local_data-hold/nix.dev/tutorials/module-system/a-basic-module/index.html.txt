   Link: canonical
   Link: index: Index
   Link: search: Search
   Link: next: 2. Module system deep dive
   Link: prev: Module system
   Skip to main content [ ] [ ]
   _____________________ Ctrl+K
   [IMG] nix.dev
   IFrame

   Official documentation for getting things done with Nix.

   _____________________ Ctrl+K
     * Install Nix
     * Tutorials [ ]
          * First steps [ ]
               * Ad hoc shell environments
               * Reproducible interpreted scripts
               * Declarative shell environments
               * Towards reproducibility: pinning Nixpkgs
          * Nix language basics
          * Packaging existing software
          * Package parameters and overrides with callPackage
          * Working with local files
          * Cross compilation
          * Module system [ ]
               * 1. A basic module
               * 2. Module system deep dive
          * NixOS [ ]
               * NixOS virtual machines
               * Building a bootable ISO image
               * Building and running Docker images
               * Integration testing with NixOS virtual machines
               * Provisioning remote machines via SSH
               * Installing NixOS on a Raspberry Pi
               * Deploying NixOS using Terraform
               * Setting up an HTTP binary cache
               * Setting up distributed builds
     * Guides [ ]
          * Recipes [ ]
               * Configure Nix to use a custom binary cache
               * Automatic environments
               * Dependencies in the development shell
               * Managing remote sources
               * Python development environment
               * Setting up post-build hooks
               * Continuous integration with GitHub Actions
          * Best practices
          * Troubleshooting
          * Frequently Asked Questions
     * Reference [ ]
          * Glossary
          * Nix reference manual [ ]
               * Nix pre-release (development)
               * Nix 2.24 (latest)
               * Nix 2.18 (in Nixpkgs rolling)
               * Nix 2.18 (in Nixpkgs 24.05)
               * Nix 2.18 (in Nixpkgs 23.11)
          * Nixpkgs manual
          * NixOS manual
          * Community projects
          * Support tools
          * Further reading
          * Pinning Nixpkgs
     * Concepts [ ]
          * Flakes
          * Frequently Asked Questions
     * Contributing [ ]
          * How to contribute
          * How to get help
          * Contributing documentation [ ]
               * Documentation resources
               * Documentation framework
               * Style guide
               * How to write a tutorial
     * Acknowledgements [ ]
          * Sponsors
     * Repository
     * Suggest edit
     * Open issue
     * .md
     * .pdf
   [ Submit ]

                                 A basic module

Contents

     * 1.1. Declaring options
     * 1.2. Defining values
     * 1.3. Evaluating modules

                               1. A basic module#

   What is a module?

     * A module is a function that takes an attribute set and returns an
       attribute set.

     * It may declare options, telling which attributes are allowed in the
       final outcome.

     * It may define values, for options declared by itself or other modules.

     * When evaluated by the module system, it produces an attribute set
       based on the declarations and definitions.

   The simplest possible module is a function that takes any attributes and
   returns an empty attribute set:

   options.nix#

 { ... }:
 {
 }

   To define any values, the module system first has to know which ones are
   allowed. This is done by declaring options that specify which attributes
   can be set and used elsewhere.

1.1. Declaring options#

   Options are declared under the top-level options attribute with
   lib.mkOption.

   options.nix#

 { lib, ... }:
 {
   options = {
     name = lib.mkOption { type = lib.types.str; };
   };
 }

   Note

   The lib argument is passed automatically by the module system. This makes
   Nixpkgs library functions available in each module’s function body.

   The ellipsis ... is necessary because the module system can pass arbitrary
   arguments to modules.

   The attribute type in the argument to lib.mkOption specifies which values
   are valid for an option. There are several types available under
   lib.types.

   Here we have declared an option name of type str: The module system will
   expect a string when a value is defined.

   Now that we have declared an option, we would naturally want to give it a
   value.

1.2. Defining values#

   Options are set or defined under the top-level config attribute:

   config.nix#

 { ... }:
 {
   config = {
     name = "Boaty McBoatface";
   };
 }

   In our option declaration, we created an option name with a string type.
   Here, in our option definition, we have set that same option to a string.

   Option declarations and option definitions don’t need to be in the same
   file. Which modules will contribute to the resulting attribute set is
   specified when setting up module system evaluation.

1.3. Evaluating modules#

   Modules are evaluated by lib.evalModules from the Nixpkgs library. It
   takes an attribute set as an argument, where the modules attribute is a
   list of modules to merge and evaluate.

   The output of evalModules contains information about all evaluated
   modules, and the final values appear in the attribute config.

   default.nix#

 let
   pkgs = import <nixpkgs> {};
   result = pkgs.lib.evalModules {
     modules = [
       ./options.nix
       ./config.nix
     ];
   };
 in
 result.config

   Here’s a helper script to parse and evaluate our default.nix file with
   nix-instantiate --eval and print the output as JSON:

   eval.bash#

 nix-shell -p jq --run "nix-instantiate --eval --json --strict | jq"

   As long as every definition has a corresponding declaration, evaluation
   will be successful. If there is an option definition that has not been
   declared, or the defined value has the wrong type, the module system will
   throw an error.

   Running the script (./eval.bash) should show an output that matches what
   we have configured:

 {
   "name": "Boaty McBoatface"
 }

   previous

   Module system

   next

   2. Module system deep dive

   Contents
     * 1.1. Declaring options
     * 1.2. Defining values
     * 1.3. Evaluating modules

   By the Nix documentation team and contributors.

   © Copyright 2016-2024, NixOS Foundation.
