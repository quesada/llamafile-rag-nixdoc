   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                       Accelerating Dotfiles Debugging ​

   When managing our Dotfiles with Home Manager, a common challenge arises –
   each modification to our Dotfiles requires executing sudo nixos-rebuild
   switch(or home-manager switch if you use don't integrate home-manager into
   NixOS) to take effect. However, running this command recalculates the
   entire system state each time, even though Nix internally employs various
   caching mechanisms to expedite the process, it can still be cumbersome.

   Take my Neovim/Emacs configurations as an example; I frequently make
   high-frequency modifications to them, sometimes dozens or hundreds of
   times a day. If each modification necessitates waiting for nixos-rebuild
   to run for several seconds, it becomes a significant time drain.

   Fortunately, with the solution outlined in Simplifying NixOS Commands
   using Justfile, we can expedite testing and verification of frequently
   modified Dotfiles by adding specific configurations to the Justfile.

   For instance, I've added the following content to my Justfile:

     The latest Justfile I'm using: ryan4yin/nix-config/Justfile

   [ Submit ]Makefile

 ###############################################################
 # Quick Test - Neovim
 ###############################################################
 nvim-clean:
   rm -rf ${HOME}.config/astronvim/lua/user
 nvim-test: nvim-clean
   rsync -avz --copy-links --chmod=D2755,F744 home/base/desktop/editors/neovim/astronvim_user/ ${HOME}/.config/astronvim/lua/user

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10

   Now, when I need to quickly test my Neovim configuration after making
   changes, I simply run just nvim-test. Once testing is complete, I execute
   just nvim-clean, followed by redeploying the configuration using
   nixos-rebuild. This allows for swift testing and seamless restoration of
   the configuration.

   This method is effective under the condition that your Dotfiles content is
   not generated by Nix. For instance, my Emacs/Neovim configurations are
   native and are linked to the appropriate locations solely through Nix
   Home-Manager's home.file or xdg.configFile.

   Edit this page

   Last updated:

   Pager
   Previous pageSimplify NixOS-related Commands
   Next pageCustom NIX_PATH and Flake Registry

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
