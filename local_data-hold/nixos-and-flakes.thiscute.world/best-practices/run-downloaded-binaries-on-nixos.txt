   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                     Running Downloaded Binaries on NixOS ​

   Since NixOS does not strictly adhere to the Filesystem Hierarchy Standard
   (FHS), binaries downloaded from the internet may not work directly on
   NixOS. However, there are various methods available to make them function
   properly.

   For a comprehensive guide that presents ten different approaches to run
   downloaded binaries on NixOS, I recommend reading the article Different
   methods to run a non-nixos executable on Nixos and take a look at
   nix-alien. Or if you are familiar with Docker, running the binary in a
   Docker container is also a good choice.

   Among these methods, I personally prefer creating an FHS environment to
   run the binary, as it proves to be both convenient and easy to use. To set
   up such an environment, you can add the following code to one of your Nix
   modules:

   [ Submit ]nix

 { config, pkgs, lib, ... }:
 {
   # ......omit many configurations
   environment.systemPackages = with pkgs; [
     # ......omit many packages
     # Create an FHS environment using the command `fhs`, enabling the execution of non-NixOS packages in NixOS!
     (let base = pkgs.appimageTools.defaultFhsEnvArgs; in
       pkgs.buildFHSUserEnv (base // {
       name = "fhs";
       targetPkgs = pkgs: (
         # pkgs.buildFHSUserEnv provides only a minimal FHS environment,
         # lacking many basic packages needed by most software.
         # Therefore, we need to add them manually.
         #
         # pkgs.appimageTools provides basic packages required by most software.
         (base.targetPkgs pkgs) ++ with pkgs; [
           pkg-config
           ncurses
           # Feel free to add more packages here if needed.
         ]
       );
       profile = "export FHS=1";
       runScript = "bash";
       extraOutputsToInstall = ["dev"];
     }))
   ];
   # ......omit many configurations
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32

   After applying the updated configuration, you can use the fhs command to
   enter the FHS environment, and then execute the binary you downloaded, for
   example:

   [ Submit ]shell

 # Activating FHS drops me into a shell that resembles a "normal" Linux environment.
 $ fhs
 # Check what we have in /usr/bin.
 (fhs) $ ls /usr/bin
 # Try running a non-NixOS binary downloaded from the Internet.
 (fhs) $ ./bin/code

   1
   2
   3
   4
   5
   6

References ​

     * Tips&Tricks for NixOS Desktop - NixOS Discourse: This resource
       provides a collection of useful tips and tricks for NixOS desktop
       users.
     * nix-alien: Run unpatched binaries on Nix/NixOS
     * nix-ld: Run unpatched dynamic binaries on NixOS.
     * NixOS: Packaging Closed Source Software (& Binary Distributed Ones) -
       Lan Tian @ Blog
   Edit this page

   Last updated:

   Pager
   Previous pageIntroduction
   Next pageSimplify NixOS-related Commands

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
