   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                      Simplifying NixOS-Related Commands ​

   To simplify NixOS-related commands, I utilize just, which proves to be
   very convenient.

   Alternatively, you can also use similar tools like Makefile or cargo-make
   for this purpose. Here, I will provide my approach as a reference.

   Below is an example of how my Justfile looks:

     The latest Justfile I'm using: ryan4yin/nix-config/Justfile

   [ Submit ]Makefile

 # just is a command runner, Justfile is very similar to Makefile, but simpler.
 ############################################################################
 #
 #  Nix commands related to the local machine
 #
 ############################################################################
 deploy:
   nixos-rebuild switch --flake . --use-remote-sudo
 debug:
   nixos-rebuild switch --flake . --use-remote-sudo --show-trace --verbose
 up:
   nix flake update
 # Update specific input
 # usage: make upp i=home-manager
 upp:
   nix flake update $(i)
 history:
   nix profile history --profile /nix/var/nix/profiles/system
 repl:
   nix repl -f flake:nixpkgs
 clean:
   # remove all generations older than 7 days
   sudo nix profile wipe-history --profile /nix/var/nix/profiles/system  --older-than 7d
 gc:
   # garbage collect all unused nix store entries
   sudo nix-collect-garbage --delete-old
 ############################################################################
 #
 #  Idols, Commands related to my remote distributed building cluster
 #
 ############################################################################
 add-idols-ssh-key:
   ssh-add ~/.ssh/ai-idols
 aqua: add-idols-ssh-key
   nixos-rebuild --flake .#aquamarine --target-host aquamarine --build-host aquamarine switch --use-remote-sudo
 aqua-debug: add-idols-ssh-key
   nixos-rebuild --flake .#aquamarine --target-host aquamarine --build-host aquamarine switch --use-remote-sudo --show-trace --verbose
 ruby: add-idols-ssh-key
   nixos-rebuild --flake .#ruby --target-host ruby --build-host ruby switch --use-remote-sudo
 ruby-debug: add-idols-ssh-key
   nixos-rebuild --flake .#ruby --target-host ruby --build-host ruby switch --use-remote-sudo --show-trace --verbose
 kana: add-idols-ssh-key
   nixos-rebuild --flake .#kana --target-host kana --build-host kana switch --use-remote-sudo
 kana-debug: add-idols-ssh-key
   nixos-rebuild --flake .#kana --target-host kana --build-host kana switch --use-remote-sudo --show-trace --verbose
 idols: aqua ruby kana
 idols-debug: aqua-debug ruby-debug kana-debug

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66

   By Save this Justfile to the root directory of your Nix flake. Then, I can
   use just deploy to deploy the configuration to my local machine, and just
   idols to deploy the configuration to all my remote servers.

   This approach simplifies the execution of NixOS commands by abstracting
   them behind target names in the Justfile, providing a more user-friendly
   and convenient experience.

   Edit this page

   Last updated:

   Pager
   Previous pageRun downloaded binaries on NixOS
   Next pageAccelerating Dotfiles Debugging

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
