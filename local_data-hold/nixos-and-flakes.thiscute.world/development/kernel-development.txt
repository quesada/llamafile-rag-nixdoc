   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                              Kernel Development ​

     WIP work in progress

   An example of kernel development with flake.nix.

   [ Submit ]nix

 {
   description = "NixOS running on LicheePi 4A";
   inputs = {
     nixpkgs.url = "github:nixos/nixpkgs/nixos-23.11-small";
     # custom kernel's source
     thead-kernel = {
       url = "github:revyos/thead-kernel/lpi4a";
       flake = false;
     };
   };
   outputs = inputs@{
     self
     ,nixpkgs
     ,thead-kernel
     ,... }:
   let
     pkgsKernel = import nixpkgs {
       localSystem = "x86_64-linux";
       crossSystem = {
         config = "riscv64-unknown-linux-gnu";
       };
       overlays = [
         (self: super: {
           # use gcc 13 to compile this custom kernel
           linuxPackages_thead = super.linuxPackagesFor (super.callPackage ./pkgs/kernel {
             src = thead-kernel;
             stdenv = super.gcc13Stdenv;
             kernelPatches = with super.kernelPatches; [
               bridge_stp_helper
               request_key_helper
             ];
           });
         })
       ];
     };
   in
   {
     nixosConfigurations.lp4a = nixpkgs.lib.nixosSystem {
       system = "x86_64-linux";
       specialArgs = {
         inherit nixpkgs pkgsKernel;
       };
       modules = [
         {
           # cross-compile this flake.
           nixpkgs.crossSystem = {
             system = "riscv64-linux";
           };
         }
         ./modules/licheepi4a.nix
         ./modules/sd-image-lp4a.nix
       ];
     };
     # use `nix develop .#kernel` to enter the environment with the custom kernel build environment available.
     # and then use `unpackPhase` to unpack the kernel source code and cd into it.
     # then you can use `make menuconfig` to configure the kernel.
     #
     # problem
     #   - using `make menuconfig` - Unable to find the ncurses package.
     devShells.x86_64-linux.kernel = pkgsKernel.linuxPackages_thead.kernel.dev;
     # use `nix develop .#fhs` to enter the fhs test environment defined here.
     devShells.x86_64-linux.fhs = let
       pkgs = import nixpkgs {
         system = "x86_64-linux";
       };
     in
       # the code here is mainly copied from:
       #   https://wiki.nixos.org/wiki/Linux_kernel#Embedded_Linux_Cross-compile_xconfig_and_menuconfig
       (pkgs.buildFHSUserEnv {
         name = "kernel-build-env";
         targetPkgs = pkgs_: (with pkgs_;
           [
             # we need theses packages to run `make menuconfig` successfully.
             pkgconfig
             ncurses
             pkgsKernel.gcc13Stdenv.cc
             gcc
           ]
           ++ pkgs.linux.nativeBuildInputs);
         runScript = pkgs.writeScript "init.sh" ''
           # set the cross-compilation environment variables.
           export CROSS_COMPILE=riscv64-unknown-linux-gnu-
           export ARCH=riscv
           export PKG_CONFIG_PATH="${pkgs.ncurses.dev}/lib/pkgconfig:"
           exec bash
         '';
       }).env;
   };
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   79
   80
   81
   82
   83
   84
   85
   86
   87
   88
   89
   90
   91
   92
   93
   94
   95
   96
   97
   98

   With the above flake.nix, I can enter the kernel build environment with
   nix develop .#kernel, and then use unpackPhase to unpack the kernel source
   code and cd into it. But I can't use make menuconfig to configure the
   kernel, because the ncurses package is missing in this environment.

   To solve this problem, I add a fhs environment to install the ncurses
   package and other necessary packages, and then I can use nix develop .#fhs
   to enter this environment and use make menuconfig to configure the kernel.

References ​

     * Linux kernel - NixOS Wiki
     * https://github.com/jordanisaacs/kernel-module-flake
   Edit this page

   Last updated:

   Pager
   Previous pageDistributed Building
   Next pageAdvanced Topics

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
