   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                            Get Started with NixOS ​

   Now that we have learned the basics of the Nix language, we can start
   using it to configure our NixOS system. The default configuration file for
   NixOS is located at /etc/nixos/configuration.nix. This file contains all
   the declarative configuration for the system, including settings for the
   time zone, language, keyboard layout, network, users, file system, and
   boot options.

   To modify the system state in a reproducible manner (which is highly
   recommended), we need to manually edit the /etc/nixos/configuration.nix
   file and then execute sudo nixos-rebuild switch to apply the modified
   configuration. This command generates a new system environment based on
   the modified configuration file, sets the new environment as the default
   one, and preserves the previous environment in the boot options of
   grub/systemd-boot. This ensures that we can always roll back to the old
   environment even if the new one fails to start.

   While /etc/nixos/configuration.nix is the classic method for configuring
   NixOS, it relies on data sources configured by nix-channel and lacks a
   version-locking mechanism, making it challenging to ensure the
   reproducibility of the system. A better approach is to use Flakes, which
   provides reproducibility and facilitates configuration management.

   In this section, we will first learn how to manage NixOS using the classic
   method (/etc/nixos/configuration.nix), and then we will explore the more
   advanced Flakes.

Configuring the System using /etc/nixos/configuration.nix ​

   The /etc/nixos/configuration.nix file is the default and classic method
   for configuring NixOS. While it lacks some of the advanced features of
   Flakes, it is still widely used and provides flexibility in system
   configuration.

   To illustrate how to use /etc/nixos/configuration.nix, let's consider an
   example where we enable SSH and add a user named ryan to the system. We
   can achieve this by adding the following content to
   /etc/nixos/configuration.nix:

   [ Submit ]nix

 # Edit this configuration file to define what should be installed on
 # your system.  Help is available in the configuration.nix(5) man page
 # and in the NixOS manual (accessible by running ‘nixos-help’).
 { config, pkgs, ... }:
 {
   imports =
     [ # Include the results of the hardware scan.
       ./hardware-configuration.nix
     ];
   # Omit previous configuration settings...
   # Add user 'ryan'
   users.users.ryan = {
     isNormalUser = true;
     description = "ryan";
     extraGroups = [ "networkmanager" "wheel" ];
     openssh.authorizedKeys.keys = [
         # Replace with your own public key
         "ssh-ed25519 <some-public-key> ryan@ryan-pc"
     ];
     packages = with pkgs; [
       firefox
     #  thunderbird
     ];
   };
   # Enable the OpenSSH daemon.
   services.openssh = {
     enable = true;
     settings = {
       X11Forwarding = true;
       PermitRootLogin = "no"; # disable root login
       PasswordAuthentication = false; # disable password login
     };
     openFirewall = true;
   };
   # Omit the rest of the configuration...
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41

   In this configuration, we declare our intention to enable the openssh
   service, add an SSH public key for the user 'ryan', and disable password
   login.

   To deploy the modified configuration, run sudo nixos-rebuild switch. This
   command will apply the changes, generate a new system environment, and set
   it as the default. You can now log in to the system using SSH with the
   configured SSH keys.

     You can always try to add --show-trace --print-build-logs --verbose to
     the nixos-rebuild command to get the detailed error message if you
     encounter any errors during the deployment.

   Remember that any reproducible changes to the system can be made by
   modifying the /etc/nixos/configuration.nix file and deploying the changes
   with sudo nixos-rebuild switch.

   To find configuration options and documentation:

     * Use search engines like Google, e.g., search for Chrome NixOS to find
       NixOS-related information about Chrome. The NixOS Wiki and the source
       code of Nixpkgs are usually among the top results.
     * Utilize the NixOS Options Search to search for keywords.
     * Refer to the Configuration section in the NixOS Manual for
       system-level configuration documentation.
     * Search for keywords directly in the source code of nixpkgs on GitHub.

References ​

     * Overview of the NixOS Linux distribution
   Edit this page

   Last updated:

   Pager
   Previous pageBasics
   Next pageIntroduction to Flakes

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
