    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Package Management
    6.   1. 4.1. Basic Package Management
         2. 4.2. Profiles
         3. 4.3. Garbage Collection
         4.   1. 4.3.1. Garbage Collector Roots
         5. 4.4. Sharing Packages Between Machines
         6.   1. 4.4.1. Serving a Nix store via HTTP
              2. 4.4.2. Copying Closures via SSH
              3. 4.4.3. Serving a Nix store via SSH
              4. 4.4.4. Serving a Nix store via S3
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Advanced Topics
   10.   1. 6.1. Remote Builds
         2. 6.2. Tuning Cores and Jobs
         3. 6.3. Verifying Build Reproducibility
         4. 6.4. Using the post-build-hook
   11. 7. Command Reference
   12.   1. 7.1. Common Options
         2. 7.2. Common Environment Variables
         3. 7.3. Main Commands
         4.   1. 7.3.1. nix-build
              2. 7.3.2. nix-shell
              3. 7.3.3. nix-store
              4.   1. 7.3.3.1. nix-store --add-fixed
                   2. 7.3.3.2. nix-store --add
                   3. 7.3.3.3. nix-store --delete
                   4. 7.3.3.4. nix-store --dump-db
                   5. 7.3.3.5. nix-store --dump
                   6. 7.3.3.6. nix-store --export
                   7. 7.3.3.7. nix-store --gc
                   8. 7.3.3.8. nix-store --generate-binary-cache-key
                   9. 7.3.3.9. nix-store --import
                  10. 7.3.3.10. nix-store --load-db
                  11. 7.3.3.11. nix-store --optimise
                  12. 7.3.3.12. nix-store --print-env
                  13. 7.3.3.13. nix-store --query
                  14. 7.3.3.14. nix-store --read-log
                  15. 7.3.3.15. nix-store --realise
                  16. 7.3.3.16. nix-store --repair-path
                  17. 7.3.3.17. nix-store --restore
                  18. 7.3.3.18. nix-store --serve
                  19. 7.3.3.19. nix-store --verify-path
                  20. 7.3.3.20. nix-store --verify
              5. 7.3.4. nix-env
              6.   1. 7.3.4.1. nix-env --delete-generations
                   2. 7.3.4.2. nix-env --install
                   3. 7.3.4.3. nix-env --list-generations
                   4. 7.3.4.4. nix-env --query
                   5. 7.3.4.5. nix-env --rollback
                   6. 7.3.4.6. nix-env --set-flag
                   7. 7.3.4.7. nix-env --set
                   8. 7.3.4.8. nix-env --switch-generation
                   9. 7.3.4.9. nix-env --switch-profile
                  10. 7.3.4.10. nix-env --uninstall
                  11. 7.3.4.11. nix-env --upgrade
         5. 7.4. Utilities
         6.   1. 7.4.1. nix-channel
              2. 7.4.2. nix-collect-garbage
              3. 7.4.3. nix-copy-closure
              4. 7.4.4. nix-daemon
              5. 7.4.5. nix-hash
              6. 7.4.6. nix-instantiate
              7. 7.4.7. nix-prefetch-url
         7. 7.5. Experimental Commands
         8.   1. 7.5.1. nix
              2. 7.5.2. nix build
              3. 7.5.3. nix bundle
              4. 7.5.4. nix copy
              5. 7.5.5. nix daemon
              6. 7.5.6. nix derivation
              7. 7.5.7. nix derivation add
              8. 7.5.8. nix derivation show
              9. 7.5.9. nix develop
             10. 7.5.10. nix doctor
             11. 7.5.11. nix edit
             12. 7.5.12. nix eval
             13. 7.5.13. nix flake
             14. 7.5.14. nix flake archive
             15. 7.5.15. nix flake check
             16. 7.5.16. nix flake clone
             17. 7.5.17. nix flake info
             18. 7.5.18. nix flake init
             19. 7.5.19. nix flake lock
             20. 7.5.20. nix flake metadata
             21. 7.5.21. nix flake new
             22. 7.5.22. nix flake prefetch
             23. 7.5.23. nix flake show
             24. 7.5.24. nix flake update
             25. 7.5.25. nix fmt
             26. 7.5.26. nix hash
             27. 7.5.27. nix hash file
             28. 7.5.28. nix hash path
             29. 7.5.29. nix hash to-base16
             30. 7.5.30. nix hash to-base32
             31. 7.5.31. nix hash to-base64
             32. 7.5.32. nix hash to-sri
             33. 7.5.33. nix help
             34. 7.5.34. nix help-stores
             35. 7.5.35. nix key
             36. 7.5.36. nix key convert-secret-to-public
             37. 7.5.37. nix key generate-secret
             38. 7.5.38. nix log
             39. 7.5.39. nix nar
             40. 7.5.40. nix nar cat
             41. 7.5.41. nix nar dump-path
             42. 7.5.42. nix nar ls
             43. 7.5.43. nix path-info
             44. 7.5.44. nix print-dev-env
             45. 7.5.45. nix profile
             46. 7.5.46. nix profile diff-closures
             47. 7.5.47. nix profile history
             48. 7.5.48. nix profile install
             49. 7.5.49. nix profile list
             50. 7.5.50. nix profile remove
             51. 7.5.51. nix profile rollback
             52. 7.5.52. nix profile upgrade
             53. 7.5.53. nix profile wipe-history
             54. 7.5.54. nix realisation
             55. 7.5.55. nix realisation info
             56. 7.5.56. nix registry
             57. 7.5.57. nix registry add
             58. 7.5.58. nix registry list
             59. 7.5.59. nix registry pin
             60. 7.5.60. nix registry remove
             61. 7.5.61. nix repl
             62. 7.5.62. nix run
             63. 7.5.63. nix search
             64. 7.5.64. nix shell
             65. 7.5.65. nix show-config
             66. 7.5.66. nix store
             67. 7.5.67. nix store add-file
             68. 7.5.68. nix store add-path
             69. 7.5.69. nix store cat
             70. 7.5.70. nix store copy-log
             71. 7.5.71. nix store copy-sigs
             72. 7.5.72. nix store delete
             73. 7.5.73. nix store diff-closures
             74. 7.5.74. nix store dump-path
             75. 7.5.75. nix store gc
             76. 7.5.76. nix store ls
             77. 7.5.77. nix store make-content-addressed
             78. 7.5.78. nix store optimise
             79. 7.5.79. nix store path-from-hash-part
             80. 7.5.80. nix store ping
             81. 7.5.81. nix store prefetch-file
             82. 7.5.82. nix store repair
             83. 7.5.83. nix store sign
             84. 7.5.84. nix store verify
             85. 7.5.85. nix upgrade-nix
             86. 7.5.86. nix why-depends
         9. 7.6. Files
        10.   1. 7.6.1. nix.conf
              2. 7.6.2. Profiles
              3.   1. 7.6.2.1. manifest.nix
                   2. 7.6.2.2. manifest.json
              4. 7.6.3. Channels
              5. 7.6.4. Default Nix expression
   13. 8. Architecture and Design
   14.   1. 8.1. File System Object
   15. 9. Protocols
   16.   1. 9.1. Serving Tarball Flakes
         2. 9.2. Derivation "ATerm" file format
   17. 10. Glossary
   18. 11. Contributing
   19.   1. 11.1. Hacking
         2. 11.2. Testing
         3. 11.3. Experimental Features
         4. 11.4. CLI guideline
         5. 11.5. C++ style guide
   20. 12. Release Notes
   21.   1. 12.1. Release 2.18 (2023-09-20)
         2. 12.2. Release 2.17 (2023-07-24)
         3. 12.3. Release 2.16 (2023-05-31)
         4. 12.4. Release 2.15 (2023-04-11)
         5. 12.5. Release 2.14 (2023-02-28)
         6. 12.6. Release 2.13 (2023-01-17)
         7. 12.7. Release 2.12 (2022-12-06)
         8. 12.8. Release 2.11 (2022-08-25)
         9. 12.9. Release 2.10 (2022-07-11)
        10. 12.10. Release 2.9 (2022-05-30)
        11. 12.11. Release 2.8 (2022-04-19)
        12. 12.12. Release 2.7 (2022-03-07)
        13. 12.13. Release 2.6 (2022-01-24)
        14. 12.14. Release 2.5 (2021-12-13)
        15. 12.15. Release 2.4 (2021-11-01)
        16. 12.16. Release 2.3 (2019-09-04)
        17. 12.17. Release 2.2 (2019-01-11)
        18. 12.18. Release 2.1 (2018-09-02)
        19. 12.19. Release 2.0 (2018-02-22)
        20. 12.20. Release 1.11.10 (2017-06-12)
        21. 12.21. Release 1.11 (2016-01-19)
        22. 12.22. Release 1.10 (2015-09-03)
        23. 12.23. Release 1.9 (2015-06-12)
        24. 12.24. Release 1.8 (2014-12-14)
        25. 12.25. Release 1.7 (2014-04-11)
        26. 12.26. Release 1.6.1 (2013-10-28)
        27. 12.27. Release 1.6 (2013-09-10)
        28. 12.28. Release 1.5.2 (2013-05-13)
        29. 12.29. Release 1.5 (2013-02-27)
        30. 12.30. Release 1.4 (2013-02-26)
        31. 12.31. Release 1.3 (2013-01-04)
        32. 12.32. Release 1.2 (2012-12-06)
        33. 12.33. Release 1.1 (2012-07-18)
        34. 12.34. Release 1.0 (2012-05-11)
        35. 12.35. Release 0.16 (2010-08-17)
        36. 12.36. Release 0.15 (2010-03-17)
        37. 12.37. Release 0.14 (2010-02-04)
        38. 12.38. Release 0.13 (2009-11-05)
        39. 12.39. Release 0.12 (2008-11-20)
        40. 12.40. Release 0.11 (2007-12-31)
        41. 12.41. Release 0.10.1 (2006-10-11)
        42. 12.42. Release 0.10 (2006-10-06)
        43. 12.43. Release 0.9.2 (2005-09-21)
        44. 12.44. Release 0.9.1 (2005-09-20)
        45. 12.45. Release 0.9 (2005-09-16)
        46. 12.46. Release 0.8.1 (2005-04-13)
        47. 12.47. Release 0.8 (2005-04-11)
        48. 12.48. Release 0.7 (2005-01-12)
        49. 12.49. Release 0.6 (2004-11-14)
        50. 12.50. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                                    Glossary

     * derivation

       A description of a build task. The result of a derivation is a store
       object. Derivations are typically specified in Nix expressions using
       the derivation primitive. These are translated into low-level store
       derivations (implicitly by nix-env and nix-build, or explicitly by
       nix-instantiate).

     * store derivation

       A derivation represented as a .drv file in the store. It has a store
       path, like any store object.

       Example: /nix/store/g946hcz4c8mdvq2g8vxx42z51qb71rvp-git-2.38.1.drv

       See nix derivation show (experimental) for displaying the contents of
       store derivations.

     * instantiate, instantiation

       Translate a derivation into a store derivation.

       See nix-instantiate.

     * realise, realisation

       Ensure a store path is valid.

       This means either running the builder executable as specified in the
       corresponding derivation, or fetching a pre-built store object from a
       substituter, or delegating to a remote builder and retrieving the
       outputs.

       See nix-build and nix-store --realise.

       See nix build (experimental).

     * content-addressed derivation

       A derivation which has the __contentAddressed attribute set to true.

     * fixed-output derivation

       A derivation which includes the outputHash attribute.

     * store

       The location in the file system where store objects live. Typically
       /nix/store.

       From the perspective of the location where Nix is invoked, the Nix
       store can be referred to as a "local" or a "remote" one:

          * A local store exists on the filesystem of the machine where Nix
            is invoked. You can use other local stores by passing the --store
            flag to the nix command. Local stores can be used for building
            derivations.

          * A remote store exists anywhere other than the local filesystem.
            One example is the /nix/store directory on another machine,
            accessed via ssh or served by the nix-serve Perl script.

     * chroot store

       A local store whose canonical path is anything other than /nix/store.

     * binary cache

       A binary cache is a Nix store which uses a different format: its
       metadata and signatures are kept in .narinfo files rather than in a
       Nix database. This different format simplifies serving store objects
       over the network, but cannot host builds. Examples of binary caches
       include S3 buckets and the NixOS binary cache.

     * store path

       The location of a store object in the file system, i.e., an immediate
       child of the Nix store directory.

       Example: /nix/store/a040m110amc4h71lds2jmr8qrkj2jhxd-git-2.38.1

     * file system object

       The Nix data model for representing simplified file system data.

       See File System Object for details.

     * store object

       A store object consists of a file system object, references to other
       store objects, and other metadata. It can be referred to by a store
       path.

     * input-addressed store object

       A store object produced by building a non-content-addressed,
       non-fixed-output derivation.

     * output-addressed store object

       A store object whose store path is determined by its contents. This
       includes derivations, the outputs of content-addressed derivations,
       and the outputs of fixed-output derivations.

     * substitute

       A substitute is a command invocation stored in the Nix database that
       describes how to build a store object, bypassing the normal build
       mechanism (i.e., derivations). Typically, the substitute builds the
       store object by downloading a pre-built version of the store object
       from some server.

     * substituter

       An additional store from which Nix can obtain store objects instead of
       building them. Often the substituter is a binary cache, but any store
       can serve as substituter.

       See the substituters configuration option for details.

     * purity

       The assumption that equal Nix derivations when run always produce the
       same output. This cannot be guaranteed in general (e.g., a builder can
       rely on external inputs such as the network or the system time) but
       the Nix model assumes it.

     * Nix database

       An SQlite database to track references between store objects. This is
       an implementation detail of the local store.

       Default location: /nix/var/nix/db.

     * Nix expression

       A high-level description of software packages and compositions
       thereof. Deploying software using Nix entails writing Nix expressions
       for your packages. Nix expressions are translated to derivations that
       are stored in the Nix store. These derivations can then be built.

     * reference

       A store object O is said to have a reference to a store object P if a
       store path to P appears in the contents of O.

       Store objects can refer to both other store objects and themselves.
       References from a store object to itself are called self-references.
       References other than a self-reference must not form a cycle.

     * reachable

       A store path Q is reachable from another store path P if Q is in the
       closure of the references relation.

     * closure

       The closure of a store path is the set of store paths that are
       directly or indirectly “reachable” from that store path; that is, it’s
       the closure of the path under the references relation. For a package,
       the closure of its derivation is equivalent to the build-time
       dependencies, while the closure of its output path is equivalent to
       its runtime dependencies. For correct deployment it is necessary to
       deploy whole closures, since otherwise at runtime files could be
       missing. The command nix-store --query --requisites prints out
       closures of store paths.

       As an example, if the store object at path P contains a reference to a
       store object at path Q, then Q is in the closure of P. Further, if Q
       references R then R is also in the closure of P.

     * output

       A store object produced by a derivation.

     * output path

       The store path to the output of a derivation.

     * deriver

       The store derivation that produced an output path.

     * validity

       A store path is valid if all store objects in its closure can be read
       from the store.

       For a local store, this means:

          * The store path leads to an existing store object in that store.
          * The store path is listed in the Nix database as being valid.
          * All paths in the store path's closure are valid.
     * user environment

       An automatically generated store object that consists of a set of
       symlinks to “active” applications, i.e., other store paths. These are
       generated automatically by nix-env. See profiles.

     * profile

       A symlink to the current user environment of a user, e.g.,
       /nix/var/nix/profiles/default.

     * installable

       Something that can be realised in the Nix store.

       See installables for nix commands (experimental) for details.

     * NAR

       A Nix ARchive. This is a serialisation of a path in the Nix store. It
       can contain regular files, directories and symbolic links. NARs are
       generated and unpacked using nix-store --dump and nix-store --restore.

     * ∅

       The empty set symbol. In the context of profile history, this denotes
       a package is not present in a particular version of the profile.

     * ε

       The epsilon symbol. In the context of a package, this means the
       version is empty. More precisely, the derivation does not have a
       version attribute.

     * string interpolation

       Expanding expressions enclosed in ${ } within a string, path, or
       attribute name.

       See String interpolation for details.

     * experimental feature

       Not yet stabilized functionality guarded by named experimental feature
       flags. These flags are enabled or disabled with the
       experimental-features setting.

       See the contribution guide on the purpose and lifecycle of
       experimental feaures.
