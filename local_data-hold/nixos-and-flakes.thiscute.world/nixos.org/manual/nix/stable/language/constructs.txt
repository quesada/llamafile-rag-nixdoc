    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Package Management
    6.   1. 4.1. Basic Package Management
         2. 4.2. Profiles
         3. 4.3. Garbage Collection
         4.   1. 4.3.1. Garbage Collector Roots
         5. 4.4. Sharing Packages Between Machines
         6.   1. 4.4.1. Serving a Nix store via HTTP
              2. 4.4.2. Copying Closures via SSH
              3. 4.4.3. Serving a Nix store via SSH
              4. 4.4.4. Serving a Nix store via S3
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Advanced Topics
   10.   1. 6.1. Remote Builds
         2. 6.2. Tuning Cores and Jobs
         3. 6.3. Verifying Build Reproducibility
         4. 6.4. Using the post-build-hook
   11. 7. Command Reference
   12.   1. 7.1. Common Options
         2. 7.2. Common Environment Variables
         3. 7.3. Main Commands
         4.   1. 7.3.1. nix-build
              2. 7.3.2. nix-shell
              3. 7.3.3. nix-store
              4.   1. 7.3.3.1. nix-store --add-fixed
                   2. 7.3.3.2. nix-store --add
                   3. 7.3.3.3. nix-store --delete
                   4. 7.3.3.4. nix-store --dump-db
                   5. 7.3.3.5. nix-store --dump
                   6. 7.3.3.6. nix-store --export
                   7. 7.3.3.7. nix-store --gc
                   8. 7.3.3.8. nix-store --generate-binary-cache-key
                   9. 7.3.3.9. nix-store --import
                  10. 7.3.3.10. nix-store --load-db
                  11. 7.3.3.11. nix-store --optimise
                  12. 7.3.3.12. nix-store --print-env
                  13. 7.3.3.13. nix-store --query
                  14. 7.3.3.14. nix-store --read-log
                  15. 7.3.3.15. nix-store --realise
                  16. 7.3.3.16. nix-store --repair-path
                  17. 7.3.3.17. nix-store --restore
                  18. 7.3.3.18. nix-store --serve
                  19. 7.3.3.19. nix-store --verify-path
                  20. 7.3.3.20. nix-store --verify
              5. 7.3.4. nix-env
              6.   1. 7.3.4.1. nix-env --delete-generations
                   2. 7.3.4.2. nix-env --install
                   3. 7.3.4.3. nix-env --list-generations
                   4. 7.3.4.4. nix-env --query
                   5. 7.3.4.5. nix-env --rollback
                   6. 7.3.4.6. nix-env --set-flag
                   7. 7.3.4.7. nix-env --set
                   8. 7.3.4.8. nix-env --switch-generation
                   9. 7.3.4.9. nix-env --switch-profile
                  10. 7.3.4.10. nix-env --uninstall
                  11. 7.3.4.11. nix-env --upgrade
         5. 7.4. Utilities
         6.   1. 7.4.1. nix-channel
              2. 7.4.2. nix-collect-garbage
              3. 7.4.3. nix-copy-closure
              4. 7.4.4. nix-daemon
              5. 7.4.5. nix-hash
              6. 7.4.6. nix-instantiate
              7. 7.4.7. nix-prefetch-url
         7. 7.5. Experimental Commands
         8.   1. 7.5.1. nix
              2. 7.5.2. nix build
              3. 7.5.3. nix bundle
              4. 7.5.4. nix copy
              5. 7.5.5. nix daemon
              6. 7.5.6. nix derivation
              7. 7.5.7. nix derivation add
              8. 7.5.8. nix derivation show
              9. 7.5.9. nix develop
             10. 7.5.10. nix doctor
             11. 7.5.11. nix edit
             12. 7.5.12. nix eval
             13. 7.5.13. nix flake
             14. 7.5.14. nix flake archive
             15. 7.5.15. nix flake check
             16. 7.5.16. nix flake clone
             17. 7.5.17. nix flake info
             18. 7.5.18. nix flake init
             19. 7.5.19. nix flake lock
             20. 7.5.20. nix flake metadata
             21. 7.5.21. nix flake new
             22. 7.5.22. nix flake prefetch
             23. 7.5.23. nix flake show
             24. 7.5.24. nix flake update
             25. 7.5.25. nix fmt
             26. 7.5.26. nix hash
             27. 7.5.27. nix hash file
             28. 7.5.28. nix hash path
             29. 7.5.29. nix hash to-base16
             30. 7.5.30. nix hash to-base32
             31. 7.5.31. nix hash to-base64
             32. 7.5.32. nix hash to-sri
             33. 7.5.33. nix help
             34. 7.5.34. nix help-stores
             35. 7.5.35. nix key
             36. 7.5.36. nix key convert-secret-to-public
             37. 7.5.37. nix key generate-secret
             38. 7.5.38. nix log
             39. 7.5.39. nix nar
             40. 7.5.40. nix nar cat
             41. 7.5.41. nix nar dump-path
             42. 7.5.42. nix nar ls
             43. 7.5.43. nix path-info
             44. 7.5.44. nix print-dev-env
             45. 7.5.45. nix profile
             46. 7.5.46. nix profile diff-closures
             47. 7.5.47. nix profile history
             48. 7.5.48. nix profile install
             49. 7.5.49. nix profile list
             50. 7.5.50. nix profile remove
             51. 7.5.51. nix profile rollback
             52. 7.5.52. nix profile upgrade
             53. 7.5.53. nix profile wipe-history
             54. 7.5.54. nix realisation
             55. 7.5.55. nix realisation info
             56. 7.5.56. nix registry
             57. 7.5.57. nix registry add
             58. 7.5.58. nix registry list
             59. 7.5.59. nix registry pin
             60. 7.5.60. nix registry remove
             61. 7.5.61. nix repl
             62. 7.5.62. nix run
             63. 7.5.63. nix search
             64. 7.5.64. nix shell
             65. 7.5.65. nix show-config
             66. 7.5.66. nix store
             67. 7.5.67. nix store add-file
             68. 7.5.68. nix store add-path
             69. 7.5.69. nix store cat
             70. 7.5.70. nix store copy-log
             71. 7.5.71. nix store copy-sigs
             72. 7.5.72. nix store delete
             73. 7.5.73. nix store diff-closures
             74. 7.5.74. nix store dump-path
             75. 7.5.75. nix store gc
             76. 7.5.76. nix store ls
             77. 7.5.77. nix store make-content-addressed
             78. 7.5.78. nix store optimise
             79. 7.5.79. nix store path-from-hash-part
             80. 7.5.80. nix store ping
             81. 7.5.81. nix store prefetch-file
             82. 7.5.82. nix store repair
             83. 7.5.83. nix store sign
             84. 7.5.84. nix store verify
             85. 7.5.85. nix upgrade-nix
             86. 7.5.86. nix why-depends
         9. 7.6. Files
        10.   1. 7.6.1. nix.conf
              2. 7.6.2. Profiles
              3.   1. 7.6.2.1. manifest.nix
                   2. 7.6.2.2. manifest.json
              4. 7.6.3. Channels
              5. 7.6.4. Default Nix expression
   13. 8. Architecture and Design
   14.   1. 8.1. File System Object
   15. 9. Protocols
   16.   1. 9.1. Serving Tarball Flakes
         2. 9.2. Derivation "ATerm" file format
   17. 10. Glossary
   18. 11. Contributing
   19.   1. 11.1. Hacking
         2. 11.2. Testing
         3. 11.3. Experimental Features
         4. 11.4. CLI guideline
         5. 11.5. C++ style guide
   20. 12. Release Notes
   21.   1. 12.1. Release 2.18 (2023-09-20)
         2. 12.2. Release 2.17 (2023-07-24)
         3. 12.3. Release 2.16 (2023-05-31)
         4. 12.4. Release 2.15 (2023-04-11)
         5. 12.5. Release 2.14 (2023-02-28)
         6. 12.6. Release 2.13 (2023-01-17)
         7. 12.7. Release 2.12 (2022-12-06)
         8. 12.8. Release 2.11 (2022-08-25)
         9. 12.9. Release 2.10 (2022-07-11)
        10. 12.10. Release 2.9 (2022-05-30)
        11. 12.11. Release 2.8 (2022-04-19)
        12. 12.12. Release 2.7 (2022-03-07)
        13. 12.13. Release 2.6 (2022-01-24)
        14. 12.14. Release 2.5 (2021-12-13)
        15. 12.15. Release 2.4 (2021-11-01)
        16. 12.16. Release 2.3 (2019-09-04)
        17. 12.17. Release 2.2 (2019-01-11)
        18. 12.18. Release 2.1 (2018-09-02)
        19. 12.19. Release 2.0 (2018-02-22)
        20. 12.20. Release 1.11.10 (2017-06-12)
        21. 12.21. Release 1.11 (2016-01-19)
        22. 12.22. Release 1.10 (2015-09-03)
        23. 12.23. Release 1.9 (2015-06-12)
        24. 12.24. Release 1.8 (2014-12-14)
        25. 12.25. Release 1.7 (2014-04-11)
        26. 12.26. Release 1.6.1 (2013-10-28)
        27. 12.27. Release 1.6 (2013-09-10)
        28. 12.28. Release 1.5.2 (2013-05-13)
        29. 12.29. Release 1.5 (2013-02-27)
        30. 12.30. Release 1.4 (2013-02-26)
        31. 12.31. Release 1.3 (2013-01-04)
        32. 12.32. Release 1.2 (2012-12-06)
        33. 12.33. Release 1.1 (2012-07-18)
        34. 12.34. Release 1.0 (2012-05-11)
        35. 12.35. Release 0.16 (2010-08-17)
        36. 12.36. Release 0.15 (2010-03-17)
        37. 12.37. Release 0.14 (2010-02-04)
        38. 12.38. Release 0.13 (2009-11-05)
        39. 12.39. Release 0.12 (2008-11-20)
        40. 12.40. Release 0.11 (2007-12-31)
        41. 12.41. Release 0.10.1 (2006-10-11)
        42. 12.42. Release 0.10 (2006-10-06)
        43. 12.43. Release 0.9.2 (2005-09-21)
        44. 12.44. Release 0.9.1 (2005-09-20)
        45. 12.45. Release 0.9 (2005-09-16)
        46. 12.46. Release 0.8.1 (2005-04-13)
        47. 12.47. Release 0.8 (2005-04-11)
        48. 12.48. Release 0.7 (2005-01-12)
        49. 12.49. Release 0.6 (2004-11-14)
        50. 12.50. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                              Language Constructs

Recursive sets

   Recursive sets are like normal attribute sets, but the attributes can
   refer to each other.

     rec-attrset = rec { [ name = expr ; ]... }

   Example:

 rec {
   x = y;
   y = 123;
 }.x

   This evaluates to 123.

   Note that without rec the binding x = y; would refer to the variable y in
   the surrounding scope, if one exists, and would be invalid if no such
   variable exists. That is, in a normal (non-recursive) set, attributes are
   not added to the lexical scope; in a recursive set, they are.

   Recursive sets of course introduce the danger of infinite recursion. For
   example, the expression

 rec {
   x = y;
   y = x;
 }.x

   will crash with an infinite recursion encountered error message.

Let-expressions

   A let-expression allows you to define local variables for an expression.

     let-in = let [ identifier = expr ]... in expr

   Example:

 let
   x = "foo";
   y = "bar";
 in x + y

   This evaluates to "foobar".

Inheriting attributes

   When defining an attribute set or in a let-expression it is often
   convenient to copy variables from the surrounding lexical scope (e.g.,
   when you want to propagate attributes). This can be shortened using the
   inherit keyword.

   Example:

 let x = 123; in
 {
   inherit x;
   y = 456;
 }

   is equivalent to

 let x = 123; in
 {
   x = x;
   y = 456;
 }

   and both evaluate to { x = 123; y = 456; }.

     Note

     This works because x is added to the lexical scope by the let construct.

   It is also possible to inherit attributes from another attribute set.

   Example:

   In this fragment from all-packages.nix,

 graphviz = (import ../tools/graphics/graphviz) {
   inherit fetchurl stdenv libpng libjpeg expat x11 yacc;
   inherit (xorg) libXaw;
 };

 xorg = {
   libX11 = ...;
   libXaw = ...;
   ...
 }

 libpng = ...;
 libjpg = ...;
 ...

   the set used in the function call to the function defined in
   ../tools/graphics/graphviz inherits a number of variables from the
   surrounding scope (fetchurl ... yacc), but also inherits libXaw (the X
   Athena Widgets) from the xorg set.

   Summarizing the fragment

 ...
 inherit x y z;
 inherit (src-set) a b c;
 ...

   is equivalent to

 ...
 x = x; y = y; z = z;
 a = src-set.a; b = src-set.b; c = src-set.c;
 ...

   when used while defining local variables in a let-expression or while
   defining a set.

Functions

   Functions have the following form:

 pattern: body

   The pattern specifies what the argument of the function must look like,
   and binds variables in the body to (parts of) the argument. There are
   three kinds of patterns:

     * If a pattern is a single identifier, then the function matches any
       argument. Example:

 let negate = x: !x;
     concat = x: y: x + y;
 in if negate true then concat "foo" "bar" else ""

       Note that concat is a function that takes one argument and returns a
       function that takes another argument. This allows partial
       parameterisation (i.e., only filling some of the arguments of a
       function); e.g.,

 map (concat "foo") [ "bar" "bla" "abc" ]

       evaluates to [ "foobar" "foobla" "fooabc" ].

     * A set pattern of the form { name1, name2, …, nameN } matches a set
       containing the listed attributes, and binds the values of those
       attributes to variables in the function body. For example, the
       function

 { x, y, z }: z + y + x

       can only be called with a set containing exactly the attributes x, y
       and z. No other attributes are allowed. If you want to allow
       additional arguments, you can use an ellipsis (...):

 { x, y, z, ... }: z + y + x

       This works on any set that contains at least the three named
       attributes.

       It is possible to provide default values for attributes, in which case
       they are allowed to be missing. A default value is specified by
       writing name ? e, where e is an arbitrary expression. For example,

 { x, y ? "foo", z ? "bar" }: z + y + x

       specifies a function that only requires an attribute named x, but
       optionally accepts y and z.

     * An @-pattern provides a means of referring to the whole value being
       matched:

 args@{ x, y, z, ... }: z + y + x + args.a

       but can also be written as:

 { x, y, z, ... } @ args: z + y + x + args.a

       Here args is bound to the argument as passed, which is further matched
       against the pattern { x, y, z, ... }. The @-pattern makes mainly sense
       with an ellipsis(...) as you can access attribute names as a, using
       args.a, which was given as an additional attribute to the function.

         Warning

         args@ binds the name args to the attribute set that is passed to the
         function. In particular, args does not include any default values
         specified with ? in the function's set pattern.

         For instance

 let
   f = args@{ a ? 23, ... }: [ a args ];
 in
   f {}

         is equivalent to

 let
   f = args @ { ... }: [ (args.a or 23) args ];
 in
   f {}

         and both expressions will evaluate to:

 [ 23 {} ]

   Note that functions do not have names. If you want to give them a name,
   you can bind them to an attribute, e.g.,

 let concat = { x, y }: x + y;
 in concat { x = "foo"; y = "bar"; }

Conditionals

   Conditionals look like this:

 if e1 then e2 else e3

   where e1 is an expression that should evaluate to a Boolean value (true or
   false).

Assertions

   Assertions are generally used to check that certain requirements on or
   between features and dependencies hold. They look like this:

 assert e1; e2

   where e1 is an expression that should evaluate to a Boolean value. If it
   evaluates to true, e2 is returned; otherwise expression evaluation is
   aborted and a backtrace is printed.

   Here is a Nix expression for the Subversion package that shows how
   assertions can be used:.

 { localServer ? false
 , httpServer ? false
 , sslSupport ? false
 , pythonBindings ? false
 , javaSwigBindings ? false
 , javahlBindings ? false
 , stdenv, fetchurl
 , openssl ? null, httpd ? null, db4 ? null, expat, swig ? null, j2sdk ? null
 }:

 assert localServer -> db4 != null; ①
 assert httpServer -> httpd != null && httpd.expat == expat; ②
 assert sslSupport -> openssl != null && (httpServer -> httpd.openssl == openssl); ③
 assert pythonBindings -> swig != null && swig.pythonSupport;
 assert javaSwigBindings -> swig != null && swig.javaSupport;
 assert javahlBindings -> j2sdk != null;

 stdenv.mkDerivation {
   name = "subversion-1.1.1";
   ...
   openssl = if sslSupport then openssl else null; ④
   ...
 }

   The points of interest are:

    1. This assertion states that if Subversion is to have support for local
       repositories, then Berkeley DB is needed. So if the Subversion
       function is called with the localServer argument set to true but the
       db4 argument set to null, then the evaluation fails.

       Note that -> is the logical implication Boolean operation.

    2. This is a more subtle condition: if Subversion is built with Apache
       (httpServer) support, then the Expat library (an XML library) used by
       Subversion should be same as the one used by Apache. This is because
       in this configuration Subversion code ends up being linked with Apache
       code, and if the Expat libraries do not match, a build- or runtime
       link error or incompatibility might occur.

    3. This assertion says that in order for Subversion to have SSL support
       (so that it can access https URLs), an OpenSSL library must be passed.
       Additionally, it says that if Apache support is enabled, then Apache's
       OpenSSL should match Subversion's. (Note that if Apache support is not
       enabled, we don't care about Apache's OpenSSL.)

    4. The conditional here is not really related to assertions, but is worth
       pointing out: it ensures that if SSL support is disabled, then the
       Subversion derivation is not dependent on OpenSSL, even if a non-null
       value was passed. This prevents an unnecessary rebuild of Subversion
       if OpenSSL changes.

With-expressions

   A with-expression,

 with e1; e2

   introduces the set e1 into the lexical scope of the expression e2. For
   instance,

 let as = { x = "foo"; y = "bar"; };
 in with as; x + y

   evaluates to "foobar" since the with adds the x and y attributes of as to
   the lexical scope in the expression x + y. The most common use of with is
   in conjunction with the import function. E.g.,

 with (import ./definitions.nix); ...

   makes all attributes defined in the file definitions.nix available as if
   they were defined locally in a let-expression.

   The bindings introduced by with do not shadow bindings introduced by other
   means, e.g.

 let a = 3; in with { a = 1; }; let a = 4; in with { a = 2; }; ...

   establishes the same scope as

 let a = 1; in let a = 2; in let a = 3; in let a = 4; in ...

Comments

   Comments can be single-line, started with a # character, or
   inline/multi-line, enclosed within /* ... */.
