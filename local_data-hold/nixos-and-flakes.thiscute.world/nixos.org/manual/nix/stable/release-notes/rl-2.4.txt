    1. 1. Introduction
    2. 2. Quick Start
    3. 3. Installation
    4.   1. 3.1. Supported Platforms
         2. 3.2. Installing a Binary Distribution
         3. 3.3. Installing Nix from Source
         4.   1. 3.3.1. Prerequisites
              2. 3.3.2. Obtaining a Source Distribution
              3. 3.3.3. Building Nix from Source
         5. 3.4. Using Nix within Docker
         6. 3.5. Security
         7.   1. 3.5.1. Single-User Mode
              2. 3.5.2. Multi-User Mode
         8. 3.6. Environment Variables
         9. 3.7. Upgrading Nix
        10. 3.8. Uninstalling Nix
    5. 4. Package Management
    6.   1. 4.1. Basic Package Management
         2. 4.2. Profiles
         3. 4.3. Garbage Collection
         4.   1. 4.3.1. Garbage Collector Roots
         5. 4.4. Sharing Packages Between Machines
         6.   1. 4.4.1. Serving a Nix store via HTTP
              2. 4.4.2. Copying Closures via SSH
              3. 4.4.3. Serving a Nix store via SSH
              4. 4.4.4. Serving a Nix store via S3
    7. 5. Nix Language
    8.   1. 5.1. Data Types
         2. 5.2. Language Constructs
         3.   1. 5.2.1. String interpolation
         4. 5.3. Operators
         5. 5.4. Derivations
         6.   1. 5.4.1. Advanced Attributes
         7. 5.5. Built-in Constants
         8. 5.6. Built-in Functions
    9. 6. Advanced Topics
   10.   1. 6.1. Remote Builds
         2. 6.2. Tuning Cores and Jobs
         3. 6.3. Verifying Build Reproducibility
         4. 6.4. Using the post-build-hook
   11. 7. Command Reference
   12.   1. 7.1. Common Options
         2. 7.2. Common Environment Variables
         3. 7.3. Main Commands
         4.   1. 7.3.1. nix-build
              2. 7.3.2. nix-shell
              3. 7.3.3. nix-store
              4.   1. 7.3.3.1. nix-store --add-fixed
                   2. 7.3.3.2. nix-store --add
                   3. 7.3.3.3. nix-store --delete
                   4. 7.3.3.4. nix-store --dump-db
                   5. 7.3.3.5. nix-store --dump
                   6. 7.3.3.6. nix-store --export
                   7. 7.3.3.7. nix-store --gc
                   8. 7.3.3.8. nix-store --generate-binary-cache-key
                   9. 7.3.3.9. nix-store --import
                  10. 7.3.3.10. nix-store --load-db
                  11. 7.3.3.11. nix-store --optimise
                  12. 7.3.3.12. nix-store --print-env
                  13. 7.3.3.13. nix-store --query
                  14. 7.3.3.14. nix-store --read-log
                  15. 7.3.3.15. nix-store --realise
                  16. 7.3.3.16. nix-store --repair-path
                  17. 7.3.3.17. nix-store --restore
                  18. 7.3.3.18. nix-store --serve
                  19. 7.3.3.19. nix-store --verify-path
                  20. 7.3.3.20. nix-store --verify
              5. 7.3.4. nix-env
              6.   1. 7.3.4.1. nix-env --delete-generations
                   2. 7.3.4.2. nix-env --install
                   3. 7.3.4.3. nix-env --list-generations
                   4. 7.3.4.4. nix-env --query
                   5. 7.3.4.5. nix-env --rollback
                   6. 7.3.4.6. nix-env --set-flag
                   7. 7.3.4.7. nix-env --set
                   8. 7.3.4.8. nix-env --switch-generation
                   9. 7.3.4.9. nix-env --switch-profile
                  10. 7.3.4.10. nix-env --uninstall
                  11. 7.3.4.11. nix-env --upgrade
         5. 7.4. Utilities
         6.   1. 7.4.1. nix-channel
              2. 7.4.2. nix-collect-garbage
              3. 7.4.3. nix-copy-closure
              4. 7.4.4. nix-daemon
              5. 7.4.5. nix-hash
              6. 7.4.6. nix-instantiate
              7. 7.4.7. nix-prefetch-url
         7. 7.5. Experimental Commands
         8.   1. 7.5.1. nix
              2. 7.5.2. nix build
              3. 7.5.3. nix bundle
              4. 7.5.4. nix copy
              5. 7.5.5. nix daemon
              6. 7.5.6. nix derivation
              7. 7.5.7. nix derivation add
              8. 7.5.8. nix derivation show
              9. 7.5.9. nix develop
             10. 7.5.10. nix doctor
             11. 7.5.11. nix edit
             12. 7.5.12. nix eval
             13. 7.5.13. nix flake
             14. 7.5.14. nix flake archive
             15. 7.5.15. nix flake check
             16. 7.5.16. nix flake clone
             17. 7.5.17. nix flake info
             18. 7.5.18. nix flake init
             19. 7.5.19. nix flake lock
             20. 7.5.20. nix flake metadata
             21. 7.5.21. nix flake new
             22. 7.5.22. nix flake prefetch
             23. 7.5.23. nix flake show
             24. 7.5.24. nix flake update
             25. 7.5.25. nix fmt
             26. 7.5.26. nix hash
             27. 7.5.27. nix hash file
             28. 7.5.28. nix hash path
             29. 7.5.29. nix hash to-base16
             30. 7.5.30. nix hash to-base32
             31. 7.5.31. nix hash to-base64
             32. 7.5.32. nix hash to-sri
             33. 7.5.33. nix help
             34. 7.5.34. nix help-stores
             35. 7.5.35. nix key
             36. 7.5.36. nix key convert-secret-to-public
             37. 7.5.37. nix key generate-secret
             38. 7.5.38. nix log
             39. 7.5.39. nix nar
             40. 7.5.40. nix nar cat
             41. 7.5.41. nix nar dump-path
             42. 7.5.42. nix nar ls
             43. 7.5.43. nix path-info
             44. 7.5.44. nix print-dev-env
             45. 7.5.45. nix profile
             46. 7.5.46. nix profile diff-closures
             47. 7.5.47. nix profile history
             48. 7.5.48. nix profile install
             49. 7.5.49. nix profile list
             50. 7.5.50. nix profile remove
             51. 7.5.51. nix profile rollback
             52. 7.5.52. nix profile upgrade
             53. 7.5.53. nix profile wipe-history
             54. 7.5.54. nix realisation
             55. 7.5.55. nix realisation info
             56. 7.5.56. nix registry
             57. 7.5.57. nix registry add
             58. 7.5.58. nix registry list
             59. 7.5.59. nix registry pin
             60. 7.5.60. nix registry remove
             61. 7.5.61. nix repl
             62. 7.5.62. nix run
             63. 7.5.63. nix search
             64. 7.5.64. nix shell
             65. 7.5.65. nix show-config
             66. 7.5.66. nix store
             67. 7.5.67. nix store add-file
             68. 7.5.68. nix store add-path
             69. 7.5.69. nix store cat
             70. 7.5.70. nix store copy-log
             71. 7.5.71. nix store copy-sigs
             72. 7.5.72. nix store delete
             73. 7.5.73. nix store diff-closures
             74. 7.5.74. nix store dump-path
             75. 7.5.75. nix store gc
             76. 7.5.76. nix store ls
             77. 7.5.77. nix store make-content-addressed
             78. 7.5.78. nix store optimise
             79. 7.5.79. nix store path-from-hash-part
             80. 7.5.80. nix store ping
             81. 7.5.81. nix store prefetch-file
             82. 7.5.82. nix store repair
             83. 7.5.83. nix store sign
             84. 7.5.84. nix store verify
             85. 7.5.85. nix upgrade-nix
             86. 7.5.86. nix why-depends
         9. 7.6. Files
        10.   1. 7.6.1. nix.conf
              2. 7.6.2. Profiles
              3.   1. 7.6.2.1. manifest.nix
                   2. 7.6.2.2. manifest.json
              4. 7.6.3. Channels
              5. 7.6.4. Default Nix expression
   13. 8. Architecture and Design
   14.   1. 8.1. File System Object
   15. 9. Protocols
   16.   1. 9.1. Serving Tarball Flakes
         2. 9.2. Derivation "ATerm" file format
   17. 10. Glossary
   18. 11. Contributing
   19.   1. 11.1. Hacking
         2. 11.2. Testing
         3. 11.3. Experimental Features
         4. 11.4. CLI guideline
         5. 11.5. C++ style guide
   20. 12. Release Notes
   21.   1. 12.1. Release 2.18 (2023-09-20)
         2. 12.2. Release 2.17 (2023-07-24)
         3. 12.3. Release 2.16 (2023-05-31)
         4. 12.4. Release 2.15 (2023-04-11)
         5. 12.5. Release 2.14 (2023-02-28)
         6. 12.6. Release 2.13 (2023-01-17)
         7. 12.7. Release 2.12 (2022-12-06)
         8. 12.8. Release 2.11 (2022-08-25)
         9. 12.9. Release 2.10 (2022-07-11)
        10. 12.10. Release 2.9 (2022-05-30)
        11. 12.11. Release 2.8 (2022-04-19)
        12. 12.12. Release 2.7 (2022-03-07)
        13. 12.13. Release 2.6 (2022-01-24)
        14. 12.14. Release 2.5 (2021-12-13)
        15. 12.15. Release 2.4 (2021-11-01)
        16. 12.16. Release 2.3 (2019-09-04)
        17. 12.17. Release 2.2 (2019-01-11)
        18. 12.18. Release 2.1 (2018-09-02)
        19. 12.19. Release 2.0 (2018-02-22)
        20. 12.20. Release 1.11.10 (2017-06-12)
        21. 12.21. Release 1.11 (2016-01-19)
        22. 12.22. Release 1.10 (2015-09-03)
        23. 12.23. Release 1.9 (2015-06-12)
        24. 12.24. Release 1.8 (2014-12-14)
        25. 12.25. Release 1.7 (2014-04-11)
        26. 12.26. Release 1.6.1 (2013-10-28)
        27. 12.27. Release 1.6 (2013-09-10)
        28. 12.28. Release 1.5.2 (2013-05-13)
        29. 12.29. Release 1.5 (2013-02-27)
        30. 12.30. Release 1.4 (2013-02-26)
        31. 12.31. Release 1.3 (2013-01-04)
        32. 12.32. Release 1.2 (2012-12-06)
        33. 12.33. Release 1.1 (2012-07-18)
        34. 12.34. Release 1.0 (2012-05-11)
        35. 12.35. Release 0.16 (2010-08-17)
        36. 12.36. Release 0.15 (2010-03-17)
        37. 12.37. Release 0.14 (2010-02-04)
        38. 12.38. Release 0.13 (2009-11-05)
        39. 12.39. Release 0.12 (2008-11-20)
        40. 12.40. Release 0.11 (2007-12-31)
        41. 12.41. Release 0.10.1 (2006-10-11)
        42. 12.42. Release 0.10 (2006-10-06)
        43. 12.43. Release 0.9.2 (2005-09-21)
        44. 12.44. Release 0.9.1 (2005-09-20)
        45. 12.45. Release 0.9 (2005-09-16)
        46. 12.46. Release 0.8.1 (2005-04-13)
        47. 12.47. Release 0.8 (2005-04-11)
        48. 12.48. Release 0.7 (2005-01-12)
        49. 12.49. Release 0.6 (2004-11-14)
        50. 12.50. Release 0.5 and earlier
     * Light
     * Rust
     * Coal
     * Navy
     * Ayu

                              Nix Reference Manual

   _____________________

                            Release 2.4 (2021-11-01)

   This is the first release in more than two years and is the result of more
   than 2800 commits from 195 contributors since release 2.3.

Highlights

     * Nix's error messages have been improved a lot. For instance,
       evaluation errors now point out the location of the error:

 $ nix build
 error: undefined variable 'bzip3'

        at /nix/store/449lv242z0zsgwv95a8124xi11sp419f-source/flake.nix:88:13:

            87|           [ curl
            88|             bzip3 xz brotli editline
              |             ^
            89|             openssl sqlite

     * The nix command has seen a lot of work and is now almost at feature
       parity with the old command-line interface (the nix-* commands). It
       aims to be more modern, consistent and pleasant to use than the old
       CLI. It is still marked as experimental but its interface should not
       change much anymore in future releases.

     * Flakes are a new format to package Nix-based projects in a more
       discoverable, composable, consistent and reproducible way. A flake is
       just a repository or tarball containing a file named flake.nix that
       specifies dependencies on other flakes and returns any Nix assets such
       as packages, Nixpkgs overlays, NixOS modules or CI tests. The new nix
       CLI is primarily based around flakes; for example, a command like nix
       run nixpkgs#hello runs the hello application from the nixpkgs flake.

       Flakes are currently marked as experimental. For an introduction, see
       this blog post. For detailed information about flake syntax and
       semantics, see the nix flake manual page.

     * Nix's store can now be content-addressed, meaning that the hash
       component of a store path is the hash of the path's contents.
       Previously Nix could only build input-addressed store paths, where the
       hash is computed from the derivation dependency graph.
       Content-addressing allows deduplication, early cutoff in build
       systems, and unprivileged closure copying. This is still an
       experimental feature.

     * The Nix manual has been converted into Markdown, making it easier to
       contribute. In addition, every nix subcommand now has a manual page,
       documenting every option.

     * A new setting that allows experimental features to be enabled
       selectively. This allows us to merge unstable features into Nix more
       quickly and do more frequent releases.

Other features

     * There are many new nix subcommands:

          * nix develop is intended to replace nix-shell. It has a number of
            new features:

               * It automatically sets the output environment variables (such
                 as $out) to writable locations (such as ./outputs/out).

               * It can store the environment in a profile. This is useful
                 for offline work.

               * It can run specific phases directly. For instance, nix
                 develop --build runs buildPhase.

               * It allows dependencies in the Nix store to be "redirected"
                 to arbitrary directories using the --redirect flag. This is
                 useful if you want to hack on a package and some of its
                 dependencies at the same time.
          * nix print-dev-env prints the environment variables and bash
            functions defined by a derivation. This is useful for users of
            other shells than bash (especially with --json).

          * nix shell was previously named nix run and is intended to replace
            nix-shell -p, but without the stdenv overhead. It simply starts a
            shell where some packages have been added to $PATH.

          * nix run (not to be confused with the old subcommand that has been
            renamed to nix shell) runs an "app", a flake output that
            specifies a command to run, or an eponymous program from a
            package. For example, nix run nixpkgs#hello runs the hello
            program from the hello package in nixpkgs.

          * nix flake is the container for flake-related operations, such as
            creating a new flake, querying the contents of a flake or
            updating flake lock files.

          * nix registry allows you to query and update the flake registry,
            which maps identifiers such as nixpkgs to concrete flake URLs.

          * nix profile is intended to replace nix-env. Its main advantage is
            that it keeps track of the provenance of installed packages (e.g.
            exactly which flake version a package came from). It also has
            some helpful subcommands:

               * nix profile history shows what packages were added, upgraded
                 or removed between each version of a profile.

               * nix profile diff-closures shows the changes between the
                 closures of each version of a profile. This allows you to
                 discover the addition or removal of dependencies or size
                 changes.

            Warning: after a profile has been updated using nix profile, it
            is no longer usable with nix-env.

          * nix store diff-closures shows the differences between the
            closures of two store paths in terms of the versions and sizes of
            dependencies in the closures.

          * nix store make-content-addressable rewrites an arbitrary closure
            to make it content-addressed. Such paths can be copied into other
            stores without requiring signatures.

          * nix bundle uses the nix-bundle program to convert a closure into
            a self-extracting executable.

          * Various other replacements for the old CLI, e.g. nix store gc,
            nix store delete, nix store repair, nix nar dump-path, nix store
            prefetch-file, nix store prefetch-tarball, nix key and nix
            daemon.

     * Nix now has an evaluation cache for flake outputs. For example, a
       second invocation of the command nix run nixpkgs#firefox will not need
       to evaluate the firefox attribute because it's already in the
       evaluation cache. This is made possible by the hermetic evaluation
       model of flakes.

     * The new --offline flag disables substituters and causes all locally
       cached tarballs and repositories to be considered up-to-date.

     * The new --refresh flag causes all locally cached tarballs and
       repositories to be considered out-of-date.

     * Many nix subcommands now have a --json option to produce
       machine-readable output.

     * nix repl has a new :doc command to show documentation about builtin
       functions (e.g. :doc builtins.map).

     * Binary cache stores now have an option index-debug-info to create an
       index of DWARF debuginfo files for use by dwarffs.

     * To support flakes, Nix now has an extensible mechanism for fetching
       source trees. Currently it has the following backends:

          * Git repositories

          * Mercurial repositories

          * GitHub and GitLab repositories (an optimisation for faster
            fetching than Git)

          * Tarballs

          * Arbitrary directories

       The fetcher infrastructure is exposed via flake input specifications
       and via the fetchTree built-in.

     * Languages changes: the only new language feature is that you can now
       have antiquotations in paths, e.g. ./${foo} instead of ./. + foo.

     * New built-in functions:

          * builtins.fetchTree allows fetching a source tree using any
            backends supported by the fetcher infrastructure. It subsumes the
            functionality of existing built-ins like fetchGit, fetchMercurial
            and fetchTarball.

          * builtins.getFlake fetches a flake and returns its output
            attributes. This function should not be used inside flakes! Use
            flake inputs instead.

          * builtins.floor and builtins.ceil round a floating-point number
            down and up, respectively.

     * Experimental support for recursive Nix. This means that Nix
       derivations can now call Nix to build other derivations. This is not
       in a stable state yet and not well documented.

     * The new experimental feature no-url-literals disables URL literals.
       This helps to implement RFC 45.

     * Nix now uses libarchive to decompress and unpack tarballs and zip
       files, so tar is no longer required.

     * The priority of substituters can now be overridden using the priority
       substituter setting (e.g. --substituters
       'http://cache.nixos.org?priority=100 daemon?priority=10').

     * nix edit now supports non-derivation attributes, e.g. nix edit
       .#nixosConfigurations.bla.

     * The nix command now provides command line completion for bash, zsh and
       fish. Since the support for getting completions is built into nix,
       it's easy to add support for other shells.

     * The new --log-format flag selects what Nix's output looks like. It
       defaults to a terse progress indicator. There is a new internal-json
       output format for use by other programs.

     * nix eval has a new --apply flag that applies a function to the
       evaluation result.

     * nix eval has a new --write-to flag that allows it to write a nested
       attribute set of string leaves to a corresponding directory tree.

     * Memory improvements: many operations that add paths to the store or
       copy paths between stores now run in constant memory.

     * Many nix commands now support the flag --derivation to operate on a
       .drv file itself instead of its outputs.

     * There is a new store called dummy:// that does not support building or
       adding paths. This is useful if you want to use the Nix evaluator but
       don't have a Nix store.

     * The ssh-ng:// store now allows substituting paths on the remote, as
       ssh:// already did.

     * When auto-calling a function with an ellipsis, all arguments are now
       passed.

     * New nix-shell features:

          * It preserves the PS1 environment variable if
            NIX_SHELL_PRESERVE_PROMPT is set.

          * With -p, it passes any --args as Nixpkgs arguments.

          * Support for structured attributes.

     * nix-prefetch-url has a new --executable flag.

     * On x86_64 systems, x86_64 microarchitecture levels are mapped to
       additional system types (e.g. x86_64-v1-linux).

     * The new --eval-store flag allows you to use a different store for
       evaluation than for building or storing the build result. This is
       primarily useful when you want to query whether something exists in a
       read-only store, such as a binary cache:

 # nix path-info --json --store https://cache.nixos.org \
   --eval-store auto nixpkgs#hello

       (Here auto indicates the local store.)

     * The Nix daemon has a new low-latency mechanism for copying closures.
       This is useful when building on remote stores such as ssh-ng://.

     * Plugins can now register nix subcommands.

     * The --indirect flag to nix-store --add-root has become a no-op.
       --add-root will always generate indirect GC roots from now on.

Incompatible changes

     * The nix command is now marked as an experimental feature. This means
       that you need to add

 experimental-features = nix-command

       to your nix.conf if you want to use it, or pass
       --extra-experimental-features nix-command on the command line.

     * The nix command no longer has a syntax for referring to packages in a
       channel. This means that the following no longer works:

 nix build nixpkgs.hello # Nix 2.3

       Instead, you can either use the # syntax to select a package from a
       flake, e.g.

 nix build nixpkgs#hello

       Or, if you want to use the nixpkgs channel in the NIX_PATH environment
       variable:

 nix build -f '<nixpkgs>' hello

     * The old nix run has been renamed to nix shell, while there is a new
       nix run that runs a default command. So instead of

 nix run nixpkgs.hello -c hello # Nix 2.3

       you should use

 nix shell nixpkgs#hello -c hello

       or just

 nix run nixpkgs#hello

       if the command you want to run has the same name as the package.

     * It is now an error to modify the plugin-files setting via a
       command-line flag that appears after the first non-flag argument to
       any command, including a subcommand to nix. For example,
       nix-instantiate default.nix --plugin-files "" must now become
       nix-instantiate --plugin-files "" default.nix.

     * We no longer release source tarballs. If you want to build from
       source, please build from the tags in the Git repository.

Contributors

   This release has contributions from Adam Höse, Albert Safin, Alex Kovar,
   Alex Zero, Alexander Bantyev, Alexandre Esteves, Alyssa Ross, Anatole
   Lucet, Anders Kaseorg, Andreas Rammhold, Antoine Eiche, Antoine Martin,
   Arnout Engelen, Arthur Gautier, aszlig, Ben Burdette, Benjamin Hipple,
   Bernardo Meurer, Björn Gohla, Bjørn Forsman, Bob van der Linden, Brian
   Leung, Brian McKenna, Brian Wignall, Bruce Toll, Bryan Richter, Calle
   Rosenquist, Calvin Loncaric, Carlo Nucera, Carlos D'Agostino, Chaz
   Schlarp, Christian Höppner, Christian Kampka, Chua Hou, Chuck, Cole
   Helbling, Daiderd Jordan, Dan Callahan, Dani, Daniel Fitzpatrick, Danila
   Fedorin, Daniël de Kok, Danny Bautista, DavHau, David McFarland, Dima,
   Domen Kožar, Dominik Schrempf, Dominique Martinet, dramforever, Dustin
   DeWeese, edef, Eelco Dolstra, Ellie Hermaszewska, Emilio Karakey, Emily,
   Eric Culp, Ersin Akinci, Fabian Möller, Farid Zakaria, Federico Pellegrin,
   Finn Behrens, Florian Franzen, Félix Baylac-Jacqué, Gabriella Gonzalez,
   Geoff Reedy, Georges Dubus, Graham Christensen, Greg Hale, Greg Price,
   Gregor Kleen, Gregory Hale, Griffin Smith, Guillaume Bouchard, Harald van
   Dijk, illustris, Ivan Zvonimir Horvat, Jade, Jake Waksbaum, jakobrs, James
   Ottaway, Jan Tojnar, Janne Heß, Jaroslavas Pocepko, Jarrett Keifer, Jeremy
   Schlatter, Joachim Breitner, Joe Pea, John Ericson, Jonathan Ringer, Josef
   Kemetmüller, Joseph Lucas, Jude Taylor, Julian Stecklina, Julien Tanguy,
   Jörg Thalheim, Kai Wohlfahrt, keke, Keshav Kini, Kevin Quick, Kevin Stock,
   Kjetil Orbekk, Krzysztof Gogolewski, kvtb, Lars Mühmel, Leonhard Markert,
   Lily Ballard, Linus Heckemann, Lorenzo Manacorda, Lucas Desgouilles, Lucas
   Franceschino, Lucas Hoffmann, Luke Granger-Brown, Madeline Haraj, Marwan
   Aljubeh, Mat Marini, Mateusz Piotrowski, Matthew Bauer, Matthew
   Kenigsberg, Mauricio Scheffer, Maximilian Bosch, Michael Adler, Michael
   Bishop, Michael Fellinger, Michael Forney, Michael Reilly, mlatus, Mykola
   Orliuk, Nathan van Doorn, Naïm Favier, ng0, Nick Van den Broeck, Nicolas
   Stig124 Formichella, Niels Egberts, Niklas Hambüchen, Nikola Knezevic,
   oxalica, p01arst0rm, Pamplemousse, Patrick Hilhorst, Paul Opiyo, Pavol
   Rusnak, Peter Kolloch, Philipp Bartsch, Philipp Middendorf, Piotr
   Szubiakowski, Profpatsch, Puck Meerburg, Ricardo M. Correia, Rickard
   Nilsson, Robert Hensing, Robin Gloster, Rodrigo, Rok Garbas, Ronnie Ebrin,
   Rovanion Luckey, Ryan Burns, Ryan Mulligan, Ryne Everett, Sam Doshi, Sam
   Lidder, Samir Talwar, Samuel Dionne-Riel, Sebastian Ullrich, Sergei
   Trofimovich, Sevan Janiyan, Shao Cheng, Shea Levy, Silvan Mosberger,
   Stefan Frijters, Stefan Jaax, sternenseemann, Steven Shaw, Stéphan Kochen,
   SuperSandro2000, Suraj Barkale, Taeer Bar-Yam, Thomas Churchman, Théophane
   Hufschmitt, Timothy DeHerrera, Timothy Klim, Tobias Möst, Tobias Pflug,
   Tom Bereknyei, Travis A. Everett, Ujjwal Jain, Vladimír Čunát, Wil Taylor,
   Will Dietz, Yaroslav Bolyukin, Yestin L. Harrison, YI, Yorick van Pelt,
   Yuriy Taraday and zimbatm.
