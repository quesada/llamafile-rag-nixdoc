   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                           Nixpkgs's Advanced Usage ​

   callPackage, Overriding, and Overlays are the techniques occasionally used
   when using Nix to customize the build method of Nix packages.

   We know that many programs have a large number of build parameters that
   need to be configured, and different users may want to use different build
   parameters. This is where Overriding and Overlays come in handy. Let me
   give you a few examples I have encountered:

    1. fcitx5-rime.nix: By default, fcitx5-rime use rime-data as the value of
       rimeDataPkgs, but this parameter can be customized by override.
    2. vscode/with-extensions.nix: This package for VS Code can also be
       customized by overriding the value of vscodeExtensions, thus we can
       install some custom plugins into VS Code.
          * nix-vscode-extensions: This is a vscode plugin manager
            implemented by overriding vscodeExtensions.
    3. firefox/common.nix: Firefox has many customizable parameters too.
    4. ...

   In short, callPackage, Overriding and Overlays can be used to customize
   the build parameters of Nix packages.

   Edit this page

   Last updated:

   Pager
   Previous pageOther useful Tips
   Next pagecallPackage

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
