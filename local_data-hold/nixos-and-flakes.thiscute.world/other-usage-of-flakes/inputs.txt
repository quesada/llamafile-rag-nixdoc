   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                                 Flake Inputs ​

   The inputs section in flake.nix is an attribute set used to specify the
   dependencies of the current flake. There are various types of inputs, as
   shown in the examples below:

   [ Submit ]nix

 {
   inputs = {
     # GitHub repository as the data source, specifying the master branch.
     # This is the most common input format.
     nixpkgs.url = "github:Mic92/nixpkgs/master";
     # Git URL, applicable to any Git repository using the https/ssh protocol.
     git-example.url = "git+https://git.somehost.tld/user/path?ref=branch";
     # Git URL by tag, applicable to any Git repository using the https/ssh protocol.
     git-example-tag.url = "git+https://git.somehost.tld/user/path?tag=x.y.x";
     # Github URL by pull request.
     git-pr.url = "github:NixOS/nixpkgs?ref=pull/349351/head";
     # Git URL with submodules, applicable to any Git repository using the https/ssh protocol.
     git-example-submodule.url = "git+https://git.somehost.tld/user/path?submodules=1";
     # Archive File URL, needed in case your input use LFS.
     # Regular git input doesn't support LFS yet.
     git-example-lfs.url = "https://codeberg.org/solver-orgz/treedome/archive/master.tar.gz";
     # Similar to fetching a Git repository, but using the ssh protocol
     # with key authentication. Also uses the shallow=1 parameter
     # to avoid copying the .git directory.
     ssh-git-example.url = "git+ssh://git@github.com/ryan4yin/nix-secrets.git?shallow=1";
     # It's also possible to directly depend on a local Git repository.
     git-directory-example.url = "git+file:/path/to/repo?shallow=1";
     # Using the `dir` parameter to specify a subdirectory.
     nixpkgs.url = "github:foo/bar?dir=shu";
     # Local folder (if using an absolute path, the 'path:' prefix can be omitted).
     directory-example.url = "path:/path/to/repo";
     # If the data source is not a flake, set flake=false.
     # `flake=false` is usually used to include additional source code,
     #   configuration files, etc.
     # In Nix code, you can directly reference files within
     #   it using "${inputs.bar}/xxx/xxx" notation.
     # For example, import "${inputs.bar}/xxx/xxx.nix" to import a specific nix file,
     # or use "${inputs.bar}/xx/xx" as a path parameter for certain options.
     bar = {
       url = "github:foo/bar/branch";
       flake = false;
     };
     sops-nix = {
       url = "github:Mic92/sops-nix";
       # `follows` is the inheritance syntax within inputs.
       # Here, it ensures that sops-nix's `inputs.nixpkgs` aligns with
       # the current flake's inputs.nixpkgs,
       # avoiding inconsistencies in the dependency's nixpkgs version.
       inputs.nixpkgs.follows = "nixpkgs";
     };
     # Lock the flake to a specific commit.
     nix-doom-emacs = {
       url = "github:vlaci/nix-doom-emacs?rev=238b18d7b2c8239f676358634bfb32693d3706f3";
       flake = false;
     };
   };
   outputs = { self, ... }@inputs: { ... };
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   Edit this page

   Last updated:

   Pager
   Previous pageIntroduction
   Next pageFlake Outputs

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
