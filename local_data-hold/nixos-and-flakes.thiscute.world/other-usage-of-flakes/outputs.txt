   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                                Flake Outputs ​

   In flake.nix, the outputs section defines the different outputs that a
   flake can produce during its build process. A flake can have multiple
   outputs simultaneously, which can include but are not limited to the
   following:

     * Nix packages: These are named apps.<system>.<name>,
       packages.<system>.<name>, or legacyPackages.<system>.<name>. You can
       build a specific package using the command nix build .#<name>.
     * Nix helper functions: These are named lib.<name> and serve as
       libraries for other flakes to use.
     * Nix development environments: These are named devShells and provide
       isolated development environments. They can be accessed using the
       command nix develop.
     * NixOS configurations: These are named nixosConfiguration and represent
       specific NixOS system configurations. You can activate a configuration
       using the command nixos-rebuild switch --flake .#<name>.
     * Nix templates: These are named templates and can be used as a starting
       point for creating new projects. You can generate a project using the
       command nix flake init --template <reference>.
     * Other user-defined outputs: These outputs can be defined by the user
       and may be used by other Nix-related tools.

   Here's an example excerpt from the NixOS Wiki that demonstrates the
   structure of the outputs section:

   [ Submit ]nix

 {
   inputs = {
     # ......
   };
   outputs = { self, ... }@inputs: {
     # Executed by `nix flake check`
     checks."<system>"."<name>" = derivation;
     # Executed by `nix build .#<name>`
     packages."<system>"."<name>" = derivation;
     # Executed by `nix build .`
     packages."<system>".default = derivation;
     # Executed by `nix run .#<name>`
     apps."<system>"."<name>" = {
       type = "app";
       program = "<store-path>";
     };
     # Executed by `nix run . -- <args?>`
     apps."<system>".default = { type = "app"; program = "..."; };
     # Formatter (alejandra, nixfmt or nixpkgs-fmt)
     formatter."<system>" = derivation;
     # Used for nixpkgs packages, also accessible via `nix build .#<name>`
     legacyPackages."<system>"."<name>" = derivation;
     # Overlay, consumed by other flakes
     overlays."<name>" = final: prev: { };
     # Default overlay
     overlays.default = {};
     # Nixos module, consumed by other flakes
     nixosModules."<name>" = { config }: { options = {}; config = {}; };
     # Default module
     nixosModules.default = {};
     # Used with `nixos-rebuild --flake .#<hostname>`
     # nixosConfigurations."<hostname>".config.system.build.toplevel must be a derivation
     nixosConfigurations."<hostname>" = {};
     # Used by `nix develop .#<name>`
     devShells."<system>"."<name>" = derivation;
     # Used by `nix develop`
     devShells."<system>".default = derivation;
     # Hydra build jobs
     hydraJobs."<attr>"."<system>" = derivation;
     # Used by `nix flake init -t <flake>#<name>`
     templates."<name>" = {
       path = "<store-path>";
       description = "template description goes here?";
     };
     # Used by `nix flake init -t <flake>`
     templates.default = { path = "<store-path>"; description = ""; };
   };
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   Edit this page

   Last updated:

   Pager
   Previous pageFlake Inputs
   Next pageThe New CLI

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
