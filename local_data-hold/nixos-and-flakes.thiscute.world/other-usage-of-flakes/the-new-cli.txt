   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS & Flakes Book
   SearchK
   Main NavigationHomePrefaceGet StartedBest Practices

   English

   简体中文

   English

   简体中文

   Appearance

   Menu
   Return to top
   Sidebar Navigation

Preface

   Preface

Get Started

   Introduction

   Advantages and Disadvantages

   Installation

The Nix Language

   Basics

NixOS with Flakes

   Get Started with NixOS

   Introduction to Flakes

   NixOS with Flakes Enabled

   NixOS's flake.nix Explained

   The combination ability of Flakes and Nixpkgs module system

   Getting Started with Home Manager

   Modularize the Configuration

   Updating the System

   Downgrading or Upgrading Packages

   Other useful Tips

Nixpkgs's Advanced Usage

   Introduction

   callPackage

   Overriding

   Overlays

   Multiple Nixpkgs Instances

Nix Store & Binary Cache

   Introduction

   Add Binary Cache Servers

   Host Your Own Binary Cache Server

Best Practices

   Introduction

   Run downloaded binaries on NixOS

   Simplify NixOS-related Commands

   Accelerating Dotfiles Debugging

   Custom NIX_PATH and Flake Registry

   Remote Deployment

   Debugging Derivations and Nix Expressions

Other Usage of Flakes

   Introduction

   Flake Inputs

   Flake Outputs

   The New CLI

   Module System & Custom Options

   [WIP]Testing

Dev Environments on NixOS

   nix shell, nix develop & pkgs.runCommand

   Dev Environments

   [WIP]Packaging 101

   Cross-platform Compilation

   Distributed Building

   [WIP]Kernel Development

Advanced Topics

   Advanced Topics

Frequently Asked Questions

   Frequently Asked Questions

   On this page

                             Usage of the New CLI ​

   Once you have enabled the nix-command and flakes features, you can start
   using the new generation Nix command-line tools provided by New Nix
   Commands. In this section, we will focus on two commands: nix shell and
   nix run. Other important commands like nix build will be discussed in
   detail in nix develop & pkgs.mkShell

nix shell ​

   The nix shell command allows you to enter an environment with the
   specified Nix package and opens an interactive shell within that
   environment:

   [ Submit ]shell

 # hello is not available
 › hello
 hello: command not found
 # Enter an environment with the 'hello' and `cowsay` package
 › nix shell nixpkgs#hello nixpkgs#cowsay
 # hello is now available
 › hello
 Hello, world!
 # ponysay is also available
 › cowsay "Hello, world!"
  _______
 < hello >
  -------
         \   ^__^
          \  (oo)\_______
             (__)\       )\/\
                 ||----w |
                 ||     ||

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21

nix run ​

   On the other hand, nix run creates an environment with the specified Nix
   package and directly runs that package within the environment (without
   installing it into the system environment):

   [ Submit ]shell

 # hello is not available
 › hello
 hello: command not found
 # Create an environment with the 'hello' package and run it
 › nix run nixpkgs#hello
 Hello, world!

   1
   2
   3
   4
   5
   6
   7

   Since nix run directly executes the Nix package, the package specified as
   the argument must generate an executable program.

   According to the nix run --help documentation, nix run executes the
   command <out>/bin/<name>, where <out> is the root directory of the
   derivation and <name> is selected in the following order:

     * The meta.mainProgram attribute of the derivation
     * The pname attribute of the derivation
     * The content of the name attribute of the derivation with the version
       number removed

   For example, in the case of the 'hello' package we tested earlier, nix run
   actually executes the program $out/bin/hello.

   Here are two more examples with detailed explanations of the relevant
   parameters:

   [ Submit ]bash

 # Explanation of the command:
 #   `nixpkgs#ponysay` means the 'ponysay' package in the 'nixpkgs' flake.
 #   `nixpkgs` is a flake registry id, and Nix will find the corresponding GitHub repository address
 #   from <https://github.com/NixOS/flake-registry/blob/master/flake-registry.json>.
 # Therefore, this command creates a new environment, installs, and runs the 'ponysay' package provided by the 'nixpkgs' flake.
 #   Note: It has been mentioned earlier that a Nix package is one of the outputs of a flake.
 echo "Hello Nix" | nix run "nixpkgs#ponysay"
 # This command has the same effect as the previous one, but it uses the complete flake URI instead of the flake registry id.
 echo "Hello Nix" | nix run "github:NixOS/nixpkgs/nixos-unstable#ponysay"

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10

Common Use Cases for nix run and nix shell ​

   These commands are commonly used for running programs temporarily. For
   example, if I want to clone my configuration repository using Git on a new
   NixOS host without Git installed, I can use the following command:

   [ Submit ]bash

 nix run nixpkgs#git clone git@github.com:ryan4yin/nix-config.git

   1

   Alternatively, I can use nix shell to enter an environment with Git and
   then run the git clone command:

   [ Submit ]bash

 nix shell nixpkgs#git
 git clone git@github.com:ryan4yin/nix-config.git

   1
   2
   Edit this page

   Last updated:

   Pager
   Previous pageFlake Outputs
   Next pageModule System & Custom Options

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
