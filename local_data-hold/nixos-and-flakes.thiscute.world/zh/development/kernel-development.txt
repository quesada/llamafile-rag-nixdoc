   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS 与 Flakes
   SearchK
   Main Navigation首页前言开始使用最佳实践

   简体中文

   English

   简体中文

   English

   Appearance

   Menu
   Return to top
   Sidebar Navigation

前言

   前言

开始使用

   简介

   优缺点

   安装

Nix 语言

   快速入门

NixOS 与 Flakes

   开始使用 NixOS

   Flakes 简介

   使用 Flakes 管理 NixOS

   NixOS 的 flake.nix 内容详解

   Flakes 的组合能力与 Nixpkgs 模块系统

   安装使用 Home Manager

   模块化系统配置

   更新系统

   降级或升级软件包

   其他杂七杂八的内容

Nixpkgs 高级用法

   简介

   callPackage

   Overriding

   Overlays

   多 Nixpkgs 实例的妙用

Nix Store 与二进制缓存

   简介

   添加二进制缓存服务器

   搭建你自己的缓存服务器

NixOS 最佳实践

   简介

   运行非 NixOS 的二进制文件

   简化常用的 NixOS 相关命令

   加速 Dotfiles 的调试

   自定义 NIX_PATH 与 Flake Registry

   远程部署 NixOS 配置

   调试 Nix 软件包与 Nix 表达式

Flakes 的其他玩法

   简介

   Flake Inputs

   Flake Outputs

   新一代 Nix 命令行工具的使用

   模块系统与自定义 options

   [WIP]Testing

在 NixOS 上进行开发工作

   nix shell, nix develop & pkgs.runCommand

   各语言的开发环境

   [WIP]软件打包

   跨平台编译

   分布式构建

   [WIP]内核开发

其他进阶话题

   其他进阶话题

常见问题 FAQ

   常见问题 FAQ

   On this page

                              Kernel Development ​

     WIP 本文还有待完善

   一个我 licheepi4a 官方内核开发调试环境的 flake.nix 如下

   [ Submit ]nix

 {
   description = "NixOS running on LicheePi 4A";
   inputs = {
     nixpkgs.url = "github:nixos/nixpkgs/nixos-23.11-small";
     # custom kernel's source
     thead-kernel = {
       url = "github:revyos/thead-kernel/lpi4a";
       flake = false;
     };
   };
   outputs = inputs@{
     self
     ,nixpkgs
     ,thead-kernel
     ,... }:
   let
     pkgsKernel = import nixpkgs {
       localSystem = "x86_64-linux";
       crossSystem = {
         config = "riscv64-unknown-linux-gnu";
       };
       overlays = [
         (self: super: {
           # use gcc 13 to compile this custom kernel
           linuxPackages_thead = super.linuxPackagesFor (super.callPackage ./pkgs/kernel {
             src = thead-kernel;
             stdenv = super.gcc13Stdenv;
             kernelPatches = with super.kernelPatches; [
               bridge_stp_helper
               request_key_helper
             ];
           });
         })
       ];
     };
   in
   {
     nixosConfigurations.lp4a = nixpkgs.lib.nixosSystem {
       system = "x86_64-linux";
       specialArgs = {
         inherit nixpkgs pkgsKernel;
       };
       modules = [
         {
           # cross-compile this flake.
           nixpkgs.crossSystem = {
             system = "riscv64-linux";
           };
         }
         ./modules/licheepi4a.nix
         ./modules/sd-image-lp4a.nix
       ];
     };
     # use `nix develop .#kernel` to enter the environment with the custom kernel build environment available.
     # and then use `unpackPhase` to unpack the kernel source code and cd into it.
     # then you can use `make menuconfig` to configure the kernel.
     #
     # problem
     #   - using `make menuconfig` - Unable to find the ncurses package.
     devShells.x86_64-linux.kernel = pkgsKernel.linuxPackages_thead.kernel.dev;
     # use `nix develop .#fhs` to enter the fhs test environment defined here.
     devShells.x86_64-linux.fhs = let
       pkgs = import nixpkgs {
         system = "x86_64-linux";
       };
     in
       # the code here is mainly copied from:
       #   https://wiki.nixos.org/wiki/Linux_kernel#Embedded_Linux_Cross-compile_xconfig_and_menuconfig
       (pkgs.buildFHSUserEnv {
         name = "kernel-build-env";
         targetPkgs = pkgs_: (with pkgs_;
           [
             # we need theses packages to run `make menuconfig` successfully.
             pkgconfig
             ncurses
             pkgsKernel.gcc13Stdenv.cc
             gcc
           ]
           ++ pkgs.linux.nativeBuildInputs);
         runScript = pkgs.writeScript "init.sh" ''
           # set the cross-compilation environment variables.
           export CROSS_COMPILE=riscv64-unknown-linux-gnu-
           export ARCH=riscv
           export PKG_CONFIG_PATH="${pkgs.ncurses.dev}/lib/pkgconfig:"
           exec bash
         '';
       }).env;
   };
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   51
   52
   53
   54
   55
   56
   57
   58
   59
   60
   61
   62
   63
   64
   65
   66
   67
   68
   69
   70
   71
   72
   73
   74
   75
   76
   77
   78
   79
   80
   81
   82
   83
   84
   85
   86
   87
   88
   89
   90
   91
   92
   93
   94
   95
   96
   97
   98

   通过上面的 flake.nix，我可以通过 nix develop .#kernel 进入到内核的构建环境中，执行 unpackPhase
   解压出内核源码。

   但是不能执行 make menuconfig 进行内核的配置，因为该环境中缺少 ncurses 等包。

   所以我第二步是退出再通过 nix develop .#fhs 进入到另一个添加了必需包的 FHS 环境中，再执行 make menuconfig
   进行内核的配置，以及后续的构建调试。

References ​

     * Linux kernel - NixOS Wiki
     * https://github.com/jordanisaacs/kernel-module-flake
   Edit this page

   Last updated:

   Pager
   Previous page分布式构建
   Next page其他进阶话题

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
