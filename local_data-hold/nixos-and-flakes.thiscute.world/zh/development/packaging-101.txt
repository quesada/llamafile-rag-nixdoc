   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS 与 Flakes
   SearchK
   Main Navigation首页前言开始使用最佳实践

   简体中文

   English

   简体中文

   English

   Appearance

   Menu
   Return to top
   Sidebar Navigation

前言

   前言

开始使用

   简介

   优缺点

   安装

Nix 语言

   快速入门

NixOS 与 Flakes

   开始使用 NixOS

   Flakes 简介

   使用 Flakes 管理 NixOS

   NixOS 的 flake.nix 内容详解

   Flakes 的组合能力与 Nixpkgs 模块系统

   安装使用 Home Manager

   模块化系统配置

   更新系统

   降级或升级软件包

   其他杂七杂八的内容

Nixpkgs 高级用法

   简介

   callPackage

   Overriding

   Overlays

   多 Nixpkgs 实例的妙用

Nix Store 与二进制缓存

   简介

   添加二进制缓存服务器

   搭建你自己的缓存服务器

NixOS 最佳实践

   简介

   运行非 NixOS 的二进制文件

   简化常用的 NixOS 相关命令

   加速 Dotfiles 的调试

   自定义 NIX_PATH 与 Flake Registry

   远程部署 NixOS 配置

   调试 Nix 软件包与 Nix 表达式

Flakes 的其他玩法

   简介

   Flake Inputs

   Flake Outputs

   新一代 Nix 命令行工具的使用

   模块系统与自定义 options

   [WIP]Testing

在 NixOS 上进行开发工作

   nix shell, nix develop & pkgs.runCommand

   各语言的开发环境

   [WIP]软件打包

   跨平台编译

   分布式构建

   [WIP]内核开发

其他进阶话题

   其他进阶话题

常见问题 FAQ

   常见问题 FAQ

   On this page

                                  Nix 软件打包入门 ​

   WIP 未完成，目前请移步如下参考文档学习 Nix 打包。

参考文档 ​

     * NixOS 系列（三）：软件打包，从入门到放弃 - LanTian
     * How to Learn Nix, Part 28: The standard environment
     * stdenv - Nixpkgs Manual
     * languages-frameworks - Nixpkgs Manual
     * Wrapping packages - NixOS Cookbook
     * Useful tools:
          * nurl: Generate Nix fetcher calls from repository URLs
          * nix-init: Generate Nix packages from URLs with hash prefetching,
            dependency inference, license detection, and more
     * Source Code:
          * pkgs/build-support/trivial-builders/default.nix - runCommand
          * pkgs/build-support/setup-hooks/make-wrapper.sh
          * FHS related
               * pkgs/build-support/build-fhsenv-bubblewrap/buildFHSEnv.nix:
                 pkgs.buildFHSEnvBubblewrap
               * pkgs/build-support/build-fhsenv-chroot/default.nix:
                 pkgs.buildFHSEnvChroot

     ----------------------------------------------------------------------

     一些草稿

1. stdenv 构建介绍 ​

   TODO

2. language specific frameworks ​

   TODO

Fetchers ​

   构建输入除了直接来自文件系统路径之外，还可以通过 Fetchers 来获取，Fetcher 是一种特殊的函数，它的输入是一个 attribute
   set，输出是 Nix Store 中的一个系统路径。

   Nix 提供了四个内置的 Fetcher，分别是：

     * builtins.fetchurl：从 url 中下载文件
     * builtins.fetchTarball：从 url 中下载 tarball 文件
     * builtins.fetchGit：从 git 仓库中下载文件
     * builtins.fetchClosure：从 Nix Store 中获取 Derivation

   举例：

   [ Submit ]nix

 builtins.fetchurl "https://github.com/NixOS/nix/archive/7c3ab5751568a0bc63430b33a5169c5e4784a0ff.tar.gz"
 # result example => "/nix/store/7dhgs330clj36384akg86140fqkgh8zf-7c3ab5751568a0bc63430b33a5169c5e4784a0ff.tar.gz"
 builtins.fetchTarball "https://github.com/NixOS/nix/archive/7c3ab5751568a0bc63430b33a5169c5e4784a0ff.tar.gz"
 # result example(auto unzip the tarball) => "/nix/store/d59llm96vgis5fy231x6m7nrijs0ww36-source"

   1
   2
   3
   4
   5

Derivations ​

     官方 Nixpkgs 包仓库中的软件包已经能满足绝大部分用户的使用，在学习 NixOS 的前期不太需要深入了解 Derivation
     的使用细节，有个印象就行。本书会在后面 Nix 软件打包入门 中详细介绍相关内容，这里仅做简要介绍。

   Derivation 描述了如何构建一个软件包，是一个软件包构建流程的 Nix
   语言描述，它声明了构建时需要有哪些依赖项、需要什么构建工具链、要设置哪些环境变量、哪些构建参数、先干啥后干啥等等。

   Derivation 的构建结果是一个 Store Object，其中包含了软件包的所有二进制程序、配置文件等等内容。Store Object
   的存放路径格式为 /nix/store/<hash>-<name>，其中 <hash> 是构建结果的 hash 值，<name> 是它的名字。路径
   hash 值确保了每个构建结果都是唯一的，因此可以多版本共存，而且不会出现依赖冲突的问题。

   /nix/store 是一个特殊的文件路径，它被称为 Store，存放所有的 Store Objects，这个路径被设置为只读，只有 Nix
   本身才能修改这个路径下的内容，以保证系统的可复现性。

   Derivation 实质上只是一个 attribute set，Nix 底层会使用内置函数 builtins.derivation 将这个
   attribute set 构建为一个 Store Object。我们实际编写 Derivation
   时，通常使用的是stdenv.mkDerivation，它是前述内置函数 builtins.derivation 的 Nix 语言
   wrapper，屏蔽了底层的细节，简化了用法。

   一个简单的 Derivation 如下，它声明了一个名为 hello 的应用程序（摘抄自 nixpkgs/pkgs/hello）：

   [ Submit ]nix

 { callPackage
 , lib
 , stdenv
 , fetchurl
 , nixos
 , testers
 , hello
 }:
 stdenv.mkDerivation (finalAttrs: {
   pname = "hello";
   version = "2.12.1";
   src = fetchurl {
     url = "mirror://gnu/hello/hello-${finalAttrs.version}.tar.gz";
     sha256 = "sha256-jZkUKv2SV28wsM18tCqNxoCZmLxdYH2Idh9RLibH2yA=";
   };
   doCheck = true;
   passthru.tests = {
     version = testers.testVersion { package = hello; };
     invariant-under-noXlibs =
       testers.testEqualDerivation
         "hello must not be rebuilt when environment.noXlibs is set."
         hello
         (nixos { environment.noXlibs = true; }).pkgs.hello;
   };
   passthru.tests.run = callPackage ./test.nix { hello = finalAttrs.finalPackage; };
   meta = with lib; {
     description = "A program that produces a familiar, friendly greeting";
     longDescription = ''
       GNU Hello is a program that prints "Hello, world!" when you run it.
       It is fully customizable.
     '';
     homepage = "https://www.gnu.org/software/hello/manual/";
     changelog = "https://git.savannah.gnu.org/cgit/hello.git/plain/NEWS?h=v${finalAttrs.version}";
     license = licenses.gpl3Plus;
     maintainers = [ maintainers.eelco ];
     platforms = platforms.all;
   };
 })

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   Edit this page

   Last updated:

   Pager
   Previous page各语言的开发环境
   Next page跨平台编译

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
