   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS 与 Flakes
   SearchK
   Main Navigation首页前言开始使用最佳实践

   简体中文

   English

   简体中文

   English

   Appearance

   Menu
   Return to top
   Sidebar Navigation

前言

   前言

开始使用

   简介

   优缺点

   安装

Nix 语言

   快速入门

NixOS 与 Flakes

   开始使用 NixOS

   Flakes 简介

   使用 Flakes 管理 NixOS

   NixOS 的 flake.nix 内容详解

   Flakes 的组合能力与 Nixpkgs 模块系统

   安装使用 Home Manager

   模块化系统配置

   更新系统

   降级或升级软件包

   其他杂七杂八的内容

Nixpkgs 高级用法

   简介

   callPackage

   Overriding

   Overlays

   多 Nixpkgs 实例的妙用

Nix Store 与二进制缓存

   简介

   添加二进制缓存服务器

   搭建你自己的缓存服务器

NixOS 最佳实践

   简介

   运行非 NixOS 的二进制文件

   简化常用的 NixOS 相关命令

   加速 Dotfiles 的调试

   自定义 NIX_PATH 与 Flake Registry

   远程部署 NixOS 配置

   调试 Nix 软件包与 Nix 表达式

Flakes 的其他玩法

   简介

   Flake Inputs

   Flake Outputs

   新一代 Nix 命令行工具的使用

   模块系统与自定义 options

   [WIP]Testing

在 NixOS 上进行开发工作

   nix shell, nix develop & pkgs.runCommand

   各语言的开发环境

   [WIP]软件打包

   跨平台编译

   分布式构建

   [WIP]内核开发

其他进阶话题

   其他进阶话题

常见问题 FAQ

   常见问题 FAQ

   On this page

                                  Overriding ​

   简单的说，所有 nixpkgs 中的 Nix 包都可以通过 <pkg>.override {} 来自定义某些构建参数，它返回一个使用了自定义参数的新
   Derivation. 举个例子：

   [ Submit ]nix

 pkgs.fcitx5-rime.override {rimeDataPkgs = [
     ./rime-data-flypy
 ];}

   1
   2
   3

   上面这个 Nix 表达式的执行结果就是一个新的 Derivation，它的 rimeDataPkgs
   参数被覆盖为[./rime-data-flypy]，而其他参数则沿用原来的值。

   如何知道 fcitx5-rime 这个包有哪些参数可以覆写呢？有几种方法：

    1. 直接在 GitHub 的 nixpkgs 源码中找：fcitx5-rime.nix
         1. 注意要选择正确的分支，加入你用的是 nixos-unstable 分支，那就要在 nixos-unstable 分支中找。
    2. 通过 nix repl 交互式查看：nix repl -f '<nixpkgs>'，然后输入 :e
       pkgs.fcitx5-rime，会通过编辑器打开这个包的源码，然后就可以看到这个包的所有参数了。

   通过上述两种方法，都可以看到 fcitx5-rime 这个包拥有如下输入参数，它们都是可以通过 override 修改的：

   [ Submit ]nix

 { lib, stdenv
 , fetchFromGitHub
 , pkg-config
 , cmake
 , extra-cmake-modules
 , gettext
 , fcitx5
 , librime
 , rime-data
 , symlinkJoin
 , rimeDataPkgs ? [ rime-data ]
 }:
 stdenv.mkDerivation rec {
   ...
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16

   除了覆写参数，还可以通过 overrideAttrs 来覆写使用 stdenv.mkDerivation 构建的 Derivation 的属性。以
   pkgs.hello 为例，首先通过前述方法查看这个包的源码：

   [ Submit ]nix

 { callPackage
 , lib
 , stdenv
 , fetchurl
 , nixos
 , testers
 , hello
 }:
 stdenv.mkDerivation (finalAttrs: {
   pname = "hello";
   version = "2.12.1";
   src = fetchurl {
     url = "mirror://gnu/hello/hello-${finalAttrs.version}.tar.gz";
     sha256 = "sha256-jZkUKv2SV28wsM18tCqNxoCZmLxdYH2Idh9RLibH2yA=";
   };
   doCheck = true;
   # ......
 })

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22

   其中 pname version src doCheck 等属性都是可以通过 overrideAttrs 来覆写的，比如：

   [ Submit ]nix

 helloWithDebug = pkgs.hello.overrideAttrs (finalAttrs: previousAttrs: {
   doCheck = false;
 });

   1
   2
   3

   上面这个例子中，doCheck 就是一个新的 Derivation，它的 doCheck 参数被改写为 false，而其他参数则沿用原来的值。

   除了包源码中自定义的参数值外，我们也可以通过 overrideAttrs 直接改写 stdenv.mkDerivation 内部的默认参数，比如：

   [ Submit ]nix

 helloWithDebug = pkgs.hello.overrideAttrs (finalAttrs: previousAttrs: {
   separateDebugInfo = true;
 });

   1
   2
   3

   具体的内部参数可以通过 nix repl -f '<nixpkgs>' 然后输入 :e stdenv.mkDerivation 来查看其源码。

参考 ​

     * Chapter 4. Overriding - nixpkgs Manual
   Edit this page

   Last updated:

   Pager
   Previous pagecallPackage
   Next pageOverlays

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
