   Link: preload stylesheet
   Link: modulepreload
   Link: modulepreload
   Link: modulepreload
   Skip to content
   NixOS 与 Flakes
   SearchK
   Main Navigation首页前言开始使用最佳实践

   简体中文

   English

   简体中文

   English

   Appearance

   Menu
   Return to top
   Sidebar Navigation

前言

   前言

开始使用

   简介

   优缺点

   安装

Nix 语言

   快速入门

NixOS 与 Flakes

   开始使用 NixOS

   Flakes 简介

   使用 Flakes 管理 NixOS

   NixOS 的 flake.nix 内容详解

   Flakes 的组合能力与 Nixpkgs 模块系统

   安装使用 Home Manager

   模块化系统配置

   更新系统

   降级或升级软件包

   其他杂七杂八的内容

Nixpkgs 高级用法

   简介

   callPackage

   Overriding

   Overlays

   多 Nixpkgs 实例的妙用

Nix Store 与二进制缓存

   简介

   添加二进制缓存服务器

   搭建你自己的缓存服务器

NixOS 最佳实践

   简介

   运行非 NixOS 的二进制文件

   简化常用的 NixOS 相关命令

   加速 Dotfiles 的调试

   自定义 NIX_PATH 与 Flake Registry

   远程部署 NixOS 配置

   调试 Nix 软件包与 Nix 表达式

Flakes 的其他玩法

   简介

   Flake Inputs

   Flake Outputs

   新一代 Nix 命令行工具的使用

   模块系统与自定义 options

   [WIP]Testing

在 NixOS 上进行开发工作

   nix shell, nix develop & pkgs.runCommand

   各语言的开发环境

   [WIP]软件打包

   跨平台编译

   分布式构建

   [WIP]内核开发

其他进阶话题

   其他进阶话题

常见问题 FAQ

   常见问题 FAQ

   On this page

                               Flake 的 outputs ​

   flake.nix 中的 outputs 是一个 attribute set，是整个 Flake 的构建结果，每个 Flake 都可以有许多不同的
   outputs。

   一些特定名称的 outputs 有特殊用途，会被某些 Nix 命令识别处理，比如：

     * Nix packages: 名称为 apps.<system>.<name>, packages.<system>.<name> 或
       legacyPackages.<system>.<name> 的 outputs，都是 Nix 包，通常都是一个个应用程序。
          * 可以通过 nix build .#name 来构建某个 nix 包
     * Nix Helper Functions: 名称为 lib 的 outputs 是 Flake 函数库，可以被其他 Flake 作为
       inputs 导入使用。
     * Nix development environments: 名称为 devShells 的 outputs 是 Nix 开发环境
          * 可以通过 nix develop 命令来使用该 Output 创建开发环境
     * NixOS configurations: 名称为 nixosConfigurations.<hostname> 的 outputs，是
       NixOS 的系统配置。
          * nixos-rebuild switch .#<hostname> 可以使用该 Output 来部署 NixOS 系统
     * Nix templates: 名称为 templates 的 outputs 是 flake 模板
          * 可以通过执行命令 nix flake init --template <reference> 使用模板初始化一个 Flake 包
     * 其他用户自定义的 outputs，可能被其他 Nix 相关的工具使用

   NixOS Wiki 中给出的使用案例：

   [ Submit ]nix

 {
   inputs = {
     # ......
   };
   outputs = { self, ... }@inputs: {
     # Executed by `nix flake check`
     checks."<system>"."<name>" = derivation;
     # Executed by `nix build .#<name>`
     packages."<system>"."<name>" = derivation;
     # Executed by `nix build .`
     packages."<system>".default = derivation;
     # Executed by `nix run .#<name>`
     apps."<system>"."<name>" = {
       type = "app";
       program = "<store-path>";
     };
     # Executed by `nix run . -- <args?>`
     apps."<system>".default = { type = "app"; program = "..."; };
     # Formatter (alejandra, nixfmt or nixpkgs-fmt)
     formatter."<system>" = derivation;
     # Used for nixpkgs packages, also accessible via `nix build .#<name>`
     legacyPackages."<system>"."<name>" = derivation;
     # Overlay, consumed by other flakes
     overlays."<name>" = final: prev: { };
     # Default overlay
     overlays.default = {};
     # Nixos module, consumed by other flakes
     nixosModules."<name>" = { config }: { options = {}; config = {}; };
     # Default module
     nixosModules.default = {};
     # Used with `nixos-rebuild --flake .#<hostname>`
     # nixosConfigurations."<hostname>".config.system.build.toplevel must be a derivation
     nixosConfigurations."<hostname>" = {};
     # Used by `nix develop .#<name>`
     devShells."<system>"."<name>" = derivation;
     # Used by `nix develop`
     devShells."<system>".default = derivation;
     # Hydra build jobs
     hydraJobs."<attr>"."<system>" = derivation;
     # Used by `nix flake init -t <flake>#<name>`
     templates."<name>" = {
       path = "<store-path>";
       description = "template description goes here?";
     };
     # Used by `nix flake init -t <flake>`
     templates.default = { path = "<store-path>"; description = ""; };
   };
 }

   1
   2
   3
   4
   5
   6
   7
   8
   9
   10
   11
   12
   13
   14
   15
   16
   17
   18
   19
   20
   21
   22
   23
   24
   25
   26
   27
   28
   29
   30
   31
   32
   33
   34
   35
   36
   37
   38
   39
   40
   41
   42
   43
   44
   45
   46
   47
   48
   49
   50
   Edit this page

   Last updated:

   Pager
   Previous pageFlake Inputs
   Next page新一代 Nix 命令行工具的使用

   Licensed under CC BY-SA 4.0

   Copyright © 2023-present Ryan Yin
