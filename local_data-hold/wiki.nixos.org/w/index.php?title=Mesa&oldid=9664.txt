   Jump to content
   [ ] Main menu
   Main menu
   Navigation
     * Home
   Ecosystem
     * Overview
     * NixOS
     * Package Manager
     * Nix Language
     * Nixpkgs
     * Hydra
     * Applications
   Topics
     * Software
     * Hardware
     * Desktop
     * Server
     * Community
   Learn NixOS
     * Overview
     * Guides
     * Tutorials
     * References
     * Cookbooks
   Wiki
     * Contribute
     * Manual of Style
     * Recent changes
     * Random page
   [IMG] NixOS Wiki
   Search
   _____________________
   Search
     * English
     * Create account
     * Log in
   [ ] Personal tools
     * Create account
     * Log in
     * Dark mode

Contents

     * Beginning
     * 1 Enabling Vulkan Layers
     * 2 Default drivers
   [ ] Toggle the table of contents

                                      Mesa

     * Page
     * Discussion
   [ ] English
     * Read
     * View source
     * View history
   [ ] Tools
   Tools
   Actions
     * Read
     * View source
     * View history
   General
     * What links here
     * Related changes
     * Special pages
     * Printable version
     * Permanent link
     * Page information
   From NixOS Wiki
   Revision as of 14:33, 5 December 2022 by imported>PedroHLC (update default
   drivers to 22.3.0)
   (diff) ← Older revision | Latest revision (diff) | Newer revision → (diff)

   Mesa is an open source implementation of several graphics APIs including
   OpenGL and Vulkan.

Enabling Vulkan Layers

     This article or section is out of date.                                  
     Reason: Vulkan layers are enabled by default since we merged             
     [IMG] #196310. However, this is a good example on how to properly        
     override mesa's package attributes. (Discuss in Talk:Mesa)               
     Once the page has been updated this notice can be removed.               

   Vulkan Layers are not enabled by default in Nixpkgs. You can override the
   existing Mesa packages and specify them in config.hardware.opengl.

 hardware = {
   opengl =
     let
       fn = oa: {
         nativeBuildInputs = oa.nativeBuildInputs ++ [ pkgs.glslang ];
         mesonFlags = oa.mesonFlags ++ [ "-Dvulkan-layers=device-select,overlay" ];
 #       patches = oa.patches ++ [ ./mesa-vulkan-layer-nvidia.patch ]; See below
         postInstall = oa.postInstall + ''
             mv $out/lib/libVkLayer* $drivers/lib

             #Device Select layer
             layer=VkLayer_MESA_device_select
             substituteInPlace $drivers/share/vulkan/implicit_layer.d/''${layer}.json \
               --replace "lib''${layer}" "$drivers/lib/lib''${layer}"

             #Overlay layer
             layer=VkLayer_MESA_overlay
             substituteInPlace $drivers/share/vulkan/explicit_layer.d/''${layer}.json \
               --replace "lib''${layer}" "$drivers/lib/lib''${layer}"
           '';
       };
     in
     with pkgs; {
       enable = true;
       driSupport32Bit = true;
       package = (mesa.overrideAttrs fn).drivers;
       package32 = (pkgsi686Linux.mesa.overrideAttrs fn).drivers;
     };

   Nvidia users may need to apply this patch for the Device Select layer to
   work.

 diff b/src/vulkan/device-select-layer/device_select_layer.c a/src/vulkan/device-select-layer/device_select_layer.c
 --- b/src/vulkan/device-select-layer/device_select_layer.c
 +++ a/src/vulkan/device-select-layer/device_select_layer.c
 @@ -454,12 +454,8 @@
        exit(0);
     } else {
        unsigned selected_index = get_default_device(info, selection, physical_device_count, physical_devices);
 -      selected_physical_device_count = physical_device_count;
 +      selected_physical_device_count = 1;
        selected_physical_devices[0] = physical_devices[selected_index];
 -      for (unsigned i = 0; i < physical_device_count - 1; ++i) {
 -         unsigned  this_idx = i < selected_index ? i : i + 1;
 -         selected_physical_devices[i + 1] = physical_devices[this_idx];
 -      }
     }

     if (selected_physical_device_count == 0) {

Default drivers

   In case you wonder where does ["auto"] in mesa's attributes lead you, this
   might be another way to see them (for 22.3.0[1]):

 , galliumDrivers ?
   # Search for `gallium_drivers.contains('auto')` in meson.build
   if stdenv.isLinux then
     if stdenv.isi686 || stdenv.isx86_64  then ["r300" "r600" "radeonsi" "nouveau" "virgl" "svga" "swrast" "iris" "crocus" "i915"]
     else if stdenv.isAarch64 then ["v3d" "vc4" "freedreno" "etnaviv" "nouveau" "svga" "tegra" "virgl" "lima" "panfrost" "swrast"]
     else throw "Unsupported platform: this derivation only supports i686/x86_64/aarch64"
   else if stdenv.isDarwin then ["swrast"]
   else throw "Unsupported platform: this derivation only supports Linux/Darwin"
 , vulkanDrivers ?
   # Search for `_vulkan_drivers.contains('auto')` in meson.build
   if stdenv.isLinux then
     if stdenv.isi686 || stdenv.isx86_64   then ["amd" "intel" "intel_hasvk" "swrast"]
     else if stdenv.isAarch64 || stdenv.isArch32 then ["swrast"]
     else throw "Unsupported platform: this derivation only supports i686/x86_64/aarch64"
   else if stdenv.isDarwin then  []
   else throw "Unsupported platform: this derivation only supports Linux/Darwin"

   Retrieved from "https://wiki.nixos.org/w/index.php?title=Mesa&oldid=9664"
   Category:
     * Video
   Hidden category:
     * Pages or sections flagged with Template:outdated
     * This page was last edited on 5 December 2022, at 14:33.
     * Privacy policy
     * About the NixOS Wiki
     *  
     * Desktop
     * Powered by MediaWiki
     * Toggle limited content width
