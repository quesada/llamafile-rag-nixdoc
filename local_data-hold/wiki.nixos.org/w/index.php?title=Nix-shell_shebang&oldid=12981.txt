   Jump to content
   [ ] Main menu
   Main menu
   Navigation
     * Home
   Ecosystem
     * Overview
     * NixOS
     * Package Manager
     * Nix Language
     * Nixpkgs
     * Hydra
     * Applications
   Topics
     * Software
     * Hardware
     * Desktop
     * Server
     * Community
   Learn NixOS
     * Overview
     * Guides
     * Tutorials
     * References
     * Cookbooks
   Wiki
     * Contribute
     * Manual of Style
     * Recent changes
     * Random page
   [IMG] NixOS Wiki
   Search
   _____________________
   Search
     * English
     * Create account
     * Log in
   [ ] Personal tools
     * Create account
     * Log in
     * Dark mode

Contents

     * Beginning
     * 1 Examples
          * 1.1 Bash
          * 1.2 Python
          * 1.3 Rust
               * 1.3.1 No dependencies
               * 1.3.2 With dependencies
          * 1.4 Haskell
     * 2 Pinning nixpkgs
     * 3 Flake
     * 4 Performance
     * 5 See also
   [ ] Toggle the table of contents

                               Nix-shell shebang

     * Page
     * Discussion
   [ ] English
     * Read
     * View source
     * View history
   [ ] Tools
   Tools
   Actions
     * Read
     * View source
     * View history
   General
     * What links here
     * Related changes
     * Special pages
     * Printable version
     * Permanent link
     * Page information
   From NixOS Wiki
   Revision as of 21:58, 28 May 2024 by Klinger (talk | contribs)
   (Category:Nix Category:Shell)
   (diff) ← Older revision | Latest revision (diff) | Newer revision → (diff)

   You can use nix-shell as a script interpreter to

     * run scripts in arbitrary languages
     * provide dependencies with Nix

   To do this, start the script with multiple shebang (#!) lines.
   The first shebang line is always #! /usr/bin/env nix-shell.
   The second shebang line declares the script language and the script
   dependencies.

   As of Nix 2.19.0 you can also use the new CLI nix shell and flakes to
   define shebangs. See docs.

Examples

  Bash

   To run bash scripts, set the interpreter with -i bash

 #! /usr/bin/env nix-shell
 #! nix-shell -i bash -p bash

 echo hello world

   You can use nix-shell -p ... to add dependencies:

 #! /usr/bin/env nix-shell
 #! nix-shell -i bash -p imagemagick cowsay

 # scale image by 50%
 convert "$1" -scale 50% "$1.s50.jpg" &&
 cowsay "done $1.q50.jpg"

  Python

 #! /usr/bin/env nix-shell
 #! nix-shell -i python3 -p python3

 print("hello world")

 #! /usr/bin/env nix-shell
 #! nix-shell -i python3 -p python3Packages.pillow python3Packages.ansicolor

 # scale image by 50%
 import sys, PIL.Image, ansicolor
 path = sys.argv[1]
 image = PIL.Image.open(path)
 factor = 0.5
 image = image.resize((round(image.width * factor), round(image.height * factor)))
 path = path + ".s50.jpg"
 image.save(path)
 print(ansicolor.green(f"done {path}"))

  Rust

    No dependencies

 #!/usr/bin/env nix-shell
 #![allow()] /*
 #!nix-shell -i bash -p rustc
 rsfile="$(readlink -f $0)"
 binfile="/tmp/$(basename "$rsfile").bin"
 rustc "$rsfile" -o "$binfile" --edition=2021 && exec "$binfile" $@ || exit $?
 */
 fn main() {
     for argument in std::env::args().skip(1) {
         println!("{}", argument);
     };
     println!("{}", std::env::var("HOME").expect(""));
 }

    With dependencies

   uses rust-script

 #!/usr/bin/env nix-shell
 //! ```cargo
 //! [dependencies]
 //! time = "0.1.25"
 //! ```
 /*
 #!nix-shell -i rust-script -p rustc -p rust-script -p cargo
 */
 fn main() {
     for argument in std::env::args().skip(1) {
         println!("{}", argument);
     };
     println!("{}", std::env::var("HOME").expect(""));
     println!("{}", time::now().rfc822z());
 }

  Haskell

 #! /usr/bin/env nix-shell
 #! nix-shell -p "haskellPackages.ghcWithPackages (p: with p; [turtle])" -i runghc

 {-# LANGUAGE OverloadedStrings #-}

 import Turtle

 main = echo "Hello world!"

Pinning nixpkgs

   To pin nixpkgs to a specific version, add a third shebang line:

 #! /usr/bin/env nix-shell
 #! nix-shell -i bash
 #! nix-shell -I nixpkgs=https://github.com/NixOS/nixpkgs/archive/aed4b19d312525ae7ca9bceb4e1efe3357d0e2eb.tar.gz

 echo hello world

Flake

   It is also possible to make it work for flake like in:

 #!/usr/bin/env -S nix shell nixpkgs#bash nixpkgs#hello nixpkgs#cowsay --command bash

 hello | cowsay

   The doc mentions that it should be possible to run more complex commands
   using multiple lines, but it does not work for me as reported here.

Performance

   TODO ... why the startup delay? how to make it faster?

     * Speeding up nix-shell shebang
     * cached-nix-shell - Instant startup time for nix-shell
     * Nix Flakes, Part 2: Evaluation caching - Tweag

See also

     * nix-shell: Use As a #!-Interpreter in nix manual
     * nix-shell: Use As a #!-Interpreter man page
     * nix-shell and Shebang Lines
     * Spice up with Nix: Scripts with magical dependencies
   Retrieved from
   "https://wiki.nixos.org/w/index.php?title=Nix-shell_shebang&oldid=12981"
   Categories:
     * Nix
     * Shell
     * This page was last edited on 28 May 2024, at 21:58.
     * Privacy policy
     * About the NixOS Wiki
     *  
     * Desktop
     * Powered by MediaWiki
     * Toggle limited content width
