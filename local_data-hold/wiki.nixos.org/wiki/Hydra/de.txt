   Jump to content
   [ ] Main menu
   Main menu
   Navigation
     * Home
   Ecosystem
     * Overview
     * NixOS
     * Package Manager
     * Nix Language
     * Nixpkgs
     * Hydra
     * Applications
   Topics
     * Software
     * Hardware
     * Desktop
     * Server
     * Community
   Learn NixOS
     * Overview
     * Guides
     * Tutorials
     * References
     * Cookbooks
   Wiki
     * Contribute
     * Manual of Style
     * Recent changes
     * Random page
   [IMG] NixOS Wiki
   Search
   _____________________
   Search
     * English
     * Create account
     * Log in
   [ ] Personal tools
     * Create account
     * Log in
     * Dark mode

Contents

     * Beginning
     * 1 Installation
          * 1.1 Webserverkonfiguration
          * 1.2 Virtuelle Maschinen
     * 2 Flake-Jobset
          * 2.1 Eingeschränkter Modus (Restricted mode)
     * 3 Build a single Package from nixpkgs
          * 3.1 Imperative Building
          * 3.2 Declarative Building
     * 4 Hydra Internals
          * 4.1 Definitions
               * 4.1.1 Project
               * 4.1.2 Jobset
               * 4.1.3 Job
               * 4.1.4 Release Set
               * 4.1.5 Evaluation
               * 4.1.6 Build
     * 5 Known Issues
     * 6 Hydra for NixOS releases
     * 7 Resources
   [ ] Toggle the table of contents

                                     Hydra

     * Page
     * Discussion
   [ ] Deutsch
     * Read
     * View source
     * View history
   [ ] Tools
   Tools
   Actions
     * Read
     * View source
     * View history
   General
     * What links here
     * Related changes
     * Special pages
     * Printable version
     * Permanent link
     * Page information
   From NixOS Wiki
   This page is a translated version of the page Hydra and the translation is
   34% complete.
   Other languages:
     * Deutsch
     * English
     * русский

   Hydra ist ein Werkzeug für kontinuierliche Integrationstests und
   Softwarefreigabe, das eine rein funktionale Sprache zur Beschreibung von
   Build-Jobs und deren Abhängigkeiten verwendet. Kontinuierliche Integration
   ist eine einfache Technik zur Verbesserung der Qualität des
   Softwareentwicklungsprozesses. Ein automatisiertes System prüft
   kontinuierlich oder periodisch den Quellcode eines Projekts, baut ihn,
   führt Tests durch und erstellt Berichte für die Entwickler. Auf diese
   Weise werden verschiedene Fehler, die versehentlich in die Codebasis
   aufgenommen werden könnten, automatisch erkannt.

   Die offiziellen Hydra-Server bieten vorgefertigte Binärpakete an, um die
   Aktualisierungszeit für Nixpgs zu verkürzen: Die Benutzer müssen sie nicht
   auf ihren eigenen Computern kompilieren.

   Das Hydra Handbuch bietet eine Übersicht der Funktionalität und Funktionen
   von Hydra sowohl als auch eine aktuelle Installationsanleitung.

Installation

   Eine vollständige Installation kann wie folgt konfiguriert werden:

   services.hydra = {
     enable = true;
     hydraURL = "http://localhost:3000"; # externally visible URL
     notificationSender = "hydra@localhost"; # e-mail of Hydra service
     # a standalone Hydra will require you to unset the buildMachinesFiles list to avoid using a nonexistant /etc/nix/machines
     buildMachinesFiles = [];
     # you will probably also want, otherwise *everything* will be built from scratch
     useSubstitutes = true;
   };

   Dieses Modul aktiviert PostgreSQL automatisch, außer die
   services.hydra.dbi wird geändert. Das Datenbanklayout wird automatisch
   erstellt vom Hydra-Service. Allerdings ist anzumerken, das zusätzliche
   Daten in der Datenbank gespeichert werden, was eine vollständige
   deklarative Konfiguration unmöglich macht. Daher sind Backups
   erforderlich.

     * Siehe nixos-option oder die Nixos Optionsseite für eine Liste aller
       Optionen.

  Webserverkonfiguration

   Hydra will provide the web interface at localhost port 3000. However you
   need to create a new admin user (as UNIX user hydra) before being able to
   perform any changes:

 # su - hydra
 $ hydra-create-user alice --full-name 'Alice Q. User' \
     --email-address 'alice@example.org' --password-prompt --role admin

  Virtuelle Maschinen

   Hydra benutzt localhost als Standardbuildmaschine, wenn nichts anderes
   konfiguriert ist. Standardmäßig sind die Systemfunktionen kvm> und
   nixos-test in Nix, zum benutzen von Virtuellen Maschinen nicht aktiviert.
   Jobs, die dies Funktionen benötigen werden daraufhin auf unbestimmte Zeit
   in die Warteschlange gestellt. Die folgenden Optionen aktieren diese
   Systemfeature:

 {
   nix.buildMachines = [
     { hostName = "localhost";
       system = "x86_64-linux";
       supportedFeatures = ["kvm" "nixos-test" "big-parallel" "benchmark"];
       maxJobs = 8;
     }
   ];
 }

   Diese Konfiguration erzeugt die Datei /etc/nix/machines. Falls die
   Hydra-option buildMachinesFiles immer noch auf eine leere Liste gesetzt
   ist, wird diese Einstellung ignoriert. Deswegen muss diese Option wieder
   entfernt werden oder /etc/nix/machines hinzugefügt werden.

Flake-Jobset

   Ein Jobset kann wie folgt konfiguriert werden.

     * Type: Flake
     * Flake URI: an URI to a repo containing a Flake like
       git+https://git.myserver.net/user/repo.git

   Der Flake-Output sollte das Attribut hydraJobs enthalten. hydraJobs ist
   ein Attributset, das verschachtelt sein kann und auf Derivations verweist.

   Ein Beispiel für ein Flake-Output, das Hydra veranlasst, alle Pakete zu
   bauen, könnte wie folgt aussehen:

 {
   inputs = {
     nixpkgs.url = "github:NixOS/nixpkgs/nixos-unstable";
   };
   outputs = { self, nixpkgs, ... }: {
     packages.x86_64-linux = {
       ...
     };

     hydraJobs = {
       inherit (self)
         packages;
     };
   };
 }

  Eingeschränkter Modus (Restricted mode)

   Hydra evaluates flakes in restricted mode. This prevents access to files
   outside of the nix store, including those fetched as flake inputs. Update
   your nix.settings.allowed-uris to include URI prefixes from which you
   expect flake inputs to be fetched:

 nix.settings.allowed-uris = [
   "github:"
   "git+https://github.com/"
   "git+ssh://github.com/"
 ];

Build a single Package from nixpkgs

   Right now it is not possible to build a single package from nixpkgs with
   just that input. You will need to provide a supplementary repository which
   defines what to build. For examples you can check the hydra-example by
   makefu and in the Hydra Manual.

  Imperative Building

   These steps are required to build the hello package.

    1. log into Hydra after creating a user with hydra-create-user
    1. create new project
     * identifier: example-hello
     * display name: example-hello
    1. Actions -> Create jobset
     * identifier: hello
     * Nix expression: release.nix in hydra-example -> will evaluate the file
       release.nix in the given input
     * check interval: 60
     * scheduling shares: 1
     * Inputs:

   Input Name    Type     Value                                   Note          
                                                                  will check    
                                                                  out branch    
                                                                  nixos-21.11,  
                 git      https://github.com/nixos/nixpkgs        will be made  
   nixpkgs       checkout nixos-21.11                             available to  
                                                                  the nix       
                                                                  expression    
                                                                  via           
                                                                  <nixpkgs>.    
                                                                  hydra-example 
                                                                  is used by    
                                                                  the jobset as 
   hydra-example git      https://github.com/makefu/hydra-example input,        
                 checkout                                         release.nix   
                                                                  is in the     
                                                                  root          
                                                                  directory     

   After creation, the jobset should be in the evaluation phase where inputs
   will be fetched. This phase may take some time as the complete nixpkgs
   repository needs to be downloaded before continuing. The result of the
   evaluation should be a single job which will get built.

  Declarative Building

   Since 2016, Hydra supports declarative creation of jobsets. Check out the
   example repository and description by Shea Levy.

Hydra Internals

  Definitions

   This subsection provides an overview of the Hydra-specific definitions and
   how to configure them.

    Project

   A cluster of Jobs which are all coming from a single input (like a git
   checkout), the first thing you will need to create. Every Job should be
   able to be built independently from another. Most of the time the project
   maps to a single repository like nixpkgs. It is comparable to the project
   definition in Jenkins.

    Jobset

   Eine Liste von Jobs, die ausgeführt werden sollen. Oft passt ein Jobset zu
   einem bestimmten Branch (master, staging, stable). Ein Jobset wird durch
   seine Eingaben definiert und wird ausgelöst, wenn sich diese Eingaben
   ändern, z.B. wenn ein neuer Commit zu einem Branch hinzugefügt wird.
   Jobsets können voneinander abhängen.

    Job

   Ein Closure, welches als Teil eines Jobsatzes erstellt wird (wie ein
   einzelnes Paket, ISO-Image oder Tarball).

    Release Set

   Definiert alle Jobs, die in Ihrem Release beschrieben sind. Konventionell
   wird eine Datei namens release.nix verwendet. Eine ausführliche
   Beschreibung der Struktur finden Sie im Hydra Handbuch für Build Recipes.

    Evaluation

   The process of interpreting nix code into a list of .drv files. These
   files are the build recipes for all related outputs. You can introspect
   these files by running nix show-derivation nixpkgs.hello.

    Build

   Instantiation of a Job which is being triggered by being part of the
   release set.

Known Issues

     * hydra-queue-runner sometimes gets stuck even with builds are in the
       queue, and the builds are not scheduled. The issue is being tracked
       here. In the meantime, a workaround is to add a cron job that
       regularly restarts the hydra-queue-runner systemd service. Possible
       fix: [1]
     * If you see error: unexpected end-of-file it can mean multiple things,
       some of them are:
    1. You have a miss-match between nix versions on the Hydra server and the
       builder
    1. It can also mean that hydra-queue-runner needs privileges on the build
       server. Reference: [2]
     * The default timeout for git operations is 600 seconds [3], which might
       cause fetches of large repositories like nixos/nixpkgs to fail: error
       fetching latest change from git repo at
       `https://github.com/nixos/nixpkgs': timeout. The timeout can be
       increased with the following configuration.nix snippet:

 {
   services.hydra.extraConfig = ''
     <git-input>
       timeout = 3600
     </git-input>
   '';
 }

Hydra for NixOS releases

   Hydra is used for managing official Nix project releases. The project
   Hydra server: https://hydra.nixos.org/

   Some Hydra trackers for Nix projects:

     * Nixpkgs
     * NixOS

Resources

     * Video: Setting up a Hydra Build Farm by Peter Simons (2016)
     * Hydra Caveats by Joepie91
   Retrieved from
   "https://wiki.nixos.org/w/index.php?title=Hydra/de&oldid=15988"
   Categories:
     * Pedias
     * Hydra
     * Nix
     * Incomplete
     * Software
     * Server
     * This page was last edited on 30 July 2024, at 12:55.
     * Privacy policy
     * About the NixOS Wiki
     *  
     * Desktop
     * Powered by MediaWiki
     * Toggle limited content width
